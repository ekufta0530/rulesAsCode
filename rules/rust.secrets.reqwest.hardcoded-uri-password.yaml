id: rust.secrets.reqwest.hardcoded-uri-password.hardcoded-uri-password
message: A secret is hard-coded in the application. Secrets stored in source code,
  such as credentials, identifiers, and other types of sensitive data, can be leaked
  and used by internal or external malicious actors. It is recommended to rotate the
  secret and retrieve them from a secure secret vault or Hardware Security Module
  (HSM), alternatively environment variables can be used if allowed by your company
  policy.
severity: WARNING
metadata:
  likelihood: LOW
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-798: Use of Hard-coded Credentials'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  owasp:
  - A07:2021 - Identification and Authentication Failures
  references:
  - https://docs.rs/reqwest/latest/reqwest/
  - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
  technology:
  - reqwest
  - rust
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Hard-coded Secrets
  source: https://semgrep.dev/r/rust.secrets.reqwest.hardcoded-uri-password.hardcoded-uri-password
  shortlink: https://sg.run/r9P6
  semgrep.dev:
    rule:
      r_id: 62525
      rv_id: 732006
      rule_id: BYU6pX
      version_id: zyTn0k9
      url: https://semgrep.dev/playground/r/zyTn0k9/rust.secrets.reqwest.hardcoded-uri-password.hardcoded-uri-password
      origin: pro_rules
languages:
- rust
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: '"$URL"

      '
  - metavariable-regex:
      metavariable: $URL
      regex: (?:https?:)?\/\/[^{}\s]{3,50}:([^\{\}\s]{3,50})@[-.%\w\/:]+
pattern-sinks:
- patterns:
  - focus-metavariable: $QUERY
  - pattern-either:
    - pattern: reqwest::get($QUERY,...)
    - patterns:
      - pattern-either:
        - pattern: $CLIENT.delete($QUERY,...)
        - pattern: $CLIENT.get($QUERY,...)
        - pattern: $CLIENT.post($QUERY,...)
        - pattern: $CLIENT.head($QUERY,...)
        - pattern: $CLIENT.patch($QUERY,...)
        - pattern: $CLIENT.put($QUERY,...)
        - pattern: $CLIENT.request($M,$QUERY,...)
      - pattern-inside: 'let $CLIENT = reqwest::Client::new(...);

          ...

          '
    - pattern: '($CLIENT: reqwest::Client).delete($QUERY,...)

        '
    - pattern: '($CLIENT: reqwest::Client).get($QUERY,...)

        '
    - pattern: '($CLIENT: reqwest::Client).post($QUERY,...)

        '
    - pattern: '($CLIENT: reqwest::Client).head($QUERY,...)

        '
    - pattern: '($CLIENT: reqwest::Client).patch($QUERY,...)

        '
    - pattern: '($CLIENT: reqwest::Client).put($QUERY,...)

        '
    - pattern: '($CLIENT: reqwest::Client).request($M,$QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).delete($QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).get($QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).post($QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).head($QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).patch($QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).put($QUERY,...)

        '
    - pattern: '($CLIENT: actix_web::web::Data<reqwest::Client>).request($M,$QUERY,...)

        '
