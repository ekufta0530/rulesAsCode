id: java.micronaut.deserialization.objectinputstream-deserialization-ws.objectinputstream-deserialization-ws
message: 'The application may convert user-controlled data into an object, which can
  lead to an insecure deserialization vulnerability. An attacker can create a malicious
  serialized object, pass it to the application, and take advantage of the deserialization
  process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass
  access control measures. To prevent this vulnerability, leverage data formats such
  as JSON or XML as safer alternatives. If you need to deserialize user input in a
  specific format, consider digitally signing the data before serialization to prevent
  tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  We do not recommend deserializing untrusted data with the `ObjectInputStream`. If
  you must, you can try overriding the `ObjectInputStream#resolveClass()` method or
  using a safe replacement for the generic `readObject()` method.'
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: LOW
  category: security
  subcategory:
  - audit
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::apache.commons
  - deserialization::sink::load-object::java.io
  - net::source::network-connection::Micronaut
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
  technology:
  - Micronaut
  - WebSocket
  - java
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/java.micronaut.deserialization.objectinputstream-deserialization-ws.objectinputstream-deserialization-ws
  shortlink: https://sg.run/5rgD6
  semgrep.dev:
    rule:
      r_id: 116491
      rv_id: 734990
      rule_id: L1UqR5L
      version_id: 6xTElr2
      url: https://semgrep.dev/playground/r/6xTElr2/java.micronaut.deserialization.objectinputstream-deserialization-ws.objectinputstream-deserialization-ws
      origin: pro_rules
languages:
- java
mode: taint
options:
  interfile: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- patterns:
  - focus-metavariable: $INPUT
  - pattern: '@io.micronaut.websocket.annotation.$ON(...)

      $TYPE $NAME(..., $ITYPE $INPUT, ...) {...}

      '
  - pattern-either:
    - pattern-inside: '@io.micronaut.websocket.annotation.ServerWebSocket(...)

        class $CL {...}

        '
    - pattern-inside: '@io.micronaut.websocket.annotation.ClientWebSocket(...)

        class $CL {...}

        '
  - metavariable-pattern:
      metavariable: $ON
      patterns:
      - patterns:
        - pattern-either:
          - pattern: OnOpen
          - pattern: OnClose
          - pattern: OnMessage
  - metavariable-pattern:
      metavariable: $ITYPE
      patterns:
      - patterns:
        - pattern-not-regex: WebSocketSession
pattern-propagators:
- from: $INPUT
  patterns:
  - pattern-either:
    - pattern: String.format($FMT, ..., $INPUT, ...)
    - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
  to: $FMT
- from: $INPUT
  patterns:
  - pattern: (StringBuilder $BUILDER).append($INPUT);
  to: $BUILDER
pattern-sinks:
- patterns:
  - focus-metavariable: $IN
  - pattern-either:
    - pattern: new ObjectInputStream($IN, ...)
    - pattern: new java.io.ObjectInputStream($IN, ...)
    - pattern: new org.apache.commons.io.input.ClassLoaderObjectInputStream($CL, $IN,
        ...)
pattern-sanitizers:
- pattern: (ChoiceFormat $X).format(...)
- pattern: (DecimalFormat $X).format(...)
- pattern: (java.util.UUID $X)
