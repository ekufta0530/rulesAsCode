id: go.gorilla.path-traversal.gorilla-path-traversal.gorilla-path-traversal-taint
message: The application builds a file path from potentially untrusted data, which
  can lead to a path traversal vulnerability. An attacker can manipulate the path
  which the application uses to access files. If the application does not validate
  user input and sanitize file paths, sensitive files such as configuration or user
  data can be accessed, potentially creating or overwriting files. To prevent this
  vulnerability, validate and sanitize any input that is used to create references
  to file paths. Also, enforce strict file access controls. For example, choose privileges
  allowing public-facing applications to access only the required files. In Go, it
  is possible to sanitize user input and mitigate path traversal by using the built-in
  `filepath.Clean` function.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path Traversal'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - file::sink::file-access::archive/zip
  - file::sink::file-access::io/fs
  - file::sink::file-access::net/http
  - file::sink::file-access::os
  - net::source::network-connection::gorilla
  - web::source::cookie::gorilla
  - web::source::form-data::gorilla
  owasp:
  - A01:2021 - Broken Access Control
  - A05:2017 - Broken Access Control
  references:
  - https://owasp.org/Top10/A01_2021-Broken_Access_Control
  - https://owasp.org/www-community/attacks/Path_Traversal
  - https://portswigger.net/web-security/file-path-traversal
  technology:
  - go
  - gorilla
  - gorilla/sessions
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Path Traversal
  source: https://semgrep.dev/r/go.gorilla.path-traversal.gorilla-path-traversal.gorilla-path-traversal-taint
  shortlink: https://sg.run/yKx7
  semgrep.dev:
    rule:
      r_id: 59524
      rv_id: 731860
      rule_id: nJUXvL
      version_id: o5T2pg2
      url: https://semgrep.dev/playground/r/o5T2pg2/go.gorilla.path-traversal.gorilla-path-traversal.gorilla-path-traversal-taint
      origin: pro_rules
languages:
- go
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: 'import "github.com/gorilla/schema"

      ...

      '
  - pattern-inside: '$DECODER = schema.NewDecoder()

      ...

      '
  - pattern-inside: '$DECODER.Decode(&$TO, ...)

      ...

      '
  - pattern: $TO
- patterns:
  - pattern-inside: 'import "github.com/gorilla/securecookie"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-inside: '$COOKIE = securecookie.New(...)

          ...

          '
      - pattern-inside: '$COOKIE.Decode($NAME, $C, &$VALUE)

          ...

          '
    - pattern-inside: 'securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)

        ...

        '
  - pattern: $VALUE
- patterns:
  - pattern-inside: 'import "github.com/gorilla/sessions"

      ...

      '
  - pattern-inside: '$STORE = sessions.NewCookieStore(...)

      ...

      '
  - pattern-inside: '$SESSION, ... = $STORE.Get(...)

      ...

      '
  - pattern: $SESSION.Values
- by-side-effect: true
  patterns:
  - pattern-inside: 'import "github.com/gorilla/websocket"

      ...

      '
  - pattern-inside: '$UPGRADER = websocket.Upgrader{...}

      ...

      '
  - pattern-inside: '$CONN, ... = $UPGRADER.Upgrade(...)

      ...

      '
  - pattern-either:
    - patterns:
      - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ReadMessage|ReadJSON)$
      - focus-metavariable: $BYTES
    - patterns:
      - pattern-inside: '$TYPE, $READER, $ERR = $CONN.NextReader()

          ...

          '
      - pattern: $READER.Read($VAR)
      - focus-metavariable: $VAR
    - patterns:
      - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
      - focus-metavariable: $READER
pattern-sinks:
- patterns:
  - pattern-inside: 'import "net/http"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern: http.FileSystem.$FUNC($F, $INPUT)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Open|Dir)$
    - patterns:
      - pattern-inside: '$DIR := http.Dir(...)

          ...

          '
      - pattern: $DIR.Open($INPUT)
  - focus-metavariable: $INPUT
- patterns:
  - pattern-inside: 'import "os"

      ...

      '
  - pattern: os.$FUNC($INPUT, ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
  - focus-metavariable: $INPUT
- patterns:
  - pattern-inside: 'import "io/fs"

      ...

      '
  - pattern: fs.$FUNC($FS, $INPUT, ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: ^(Glob|ReadFile|WalkDir)$
  - focus-metavariable: $INPUT
- patterns:
  - pattern-inside: 'import "archive/zip"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-inside: '$W := zip.NewWriter(...)

              ...

              '
          - pattern: $W.$FUNC($INPUT)
        - patterns:
          - pattern-inside: '$W, $ERR := zip.NewWriter(...)

              ...

              '
          - pattern: $W.$FUNC($INPUT)
        - pattern: '($W : *zip.Writer).$FUNC($INPUT)

            '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Create)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-inside: '$R := zip.NewReader(...)

              ...

              '
          - pattern: $R.$FUNC($INPUT)
        - patterns:
          - pattern-inside: '$R, $ERR := zip.NewReader(...)

              ...

              '
          - pattern: $R.$FUNC($INPUT)
        - pattern: '($R : *zip.Reader).$FUNC($INPUT)

            '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Open)$
      - focus-metavariable: $INPUT
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern-inside: 'import "path"

        ...

        '
    - pattern-inside: 'import "path/filepath"

        ...

        '
  - patterns:
    - pattern-either:
      - pattern: $P.Join("/", ..., $INPUT, ...)
      - patterns:
        - pattern: $P.$SANFUNC($INPUT)
        - metavariable-regex:
            metavariable: $SANFUNC
            regex: ^(Abs|Base|Clean|Dir|Ext)$
  - metavariable-regex:
      metavariable: $P
      regex: ^(path|filepath)$
  - focus-metavariable: $INPUT
- patterns:
  - pattern-inside: 'import "io/fs"

      ...

      '
  - pattern: fs.ValidPath(...)
