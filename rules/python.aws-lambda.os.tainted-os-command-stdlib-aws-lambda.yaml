id: python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda.tainted-os-command-stdlib-aws-lambda
message: Untrusted input might be injected into a command executed by the application,
  which can lead to a command injection vulnerability. An attacker can execute arbitrary
  commands, potentially gaining complete control of the system. To prevent this vulnerability,
  avoid executing OS commands with user input. If this is unavoidable, validate and
  sanitize the input, and use safe methods for executing the commands.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
    Command Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - os::sink::os-command-or-thread::commands
  - os::sink::os-command-or-thread::os
  - os::sink::os-command-or-thread::popen2
  - os::sink::os-command-or-thread::stdlib
  - os::sink::os-command-or-thread::stdlib2
  - os::sink::os-command-or-thread::stdlib3
  - os::sink::os-command-or-thread::subprocess
  - serverless::source::function-params::aws-lambda
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://docs.python.org/3/library/os.html
  - https://docs.python.org/3/library/subprocess.html#subprocess.Popen
  - https://owasp.org/Top10/A03_2021-Injection
  - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
  - https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html
  technology:
  - aws
  - aws-lambda
  - cloud
  - commands
  - os
  - popen2
  - serverless
  - stdlib
  - stdlib2
  - stdlib3
  - subprocess
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Command Injection
  source: https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda.tainted-os-command-stdlib-aws-lambda
  shortlink: https://sg.run/DbYz2
  semgrep.dev:
    rule:
      r_id: 116496
      rv_id: 524314
      rule_id: 4bURb1B
      version_id: rxT99Kj
      url: https://semgrep.dev/playground/r/rxT99Kj/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda.tainted-os-command-stdlib-aws-lambda
      origin: pro_rules
languages:
- python
mode: taint
options:
  interfile: true
  symbolic_propagation: true
pattern-sources:
- patterns:
  - pattern-either:
    - patterns:
      - pattern: "def $HANDLER($EVENT, context):\n    ...\n"
      - metavariable-regex:
          metavariable: $EVENT
          regex: ^(event)$
    - patterns:
      - pattern: "def $HANDLER($EVENT, $CONTEXT):\n    ...\n"
      - metavariable-regex:
          metavariable: $HANDLER
          regex: .*(aws_lambda|lambda_handler).*
  - focus-metavariable: $EVENT
pattern-propagators:
- from: $DEFAULT
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.get($FIELD, $DEFAULT)
      - pattern: $DICT.setdefault($KEY, $DEFAULT)
  to: $DICT
- from: $FROM_DICT
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$TO_DICT[$KEY]

          ...

          '
      - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$TO_DICT = { ... }

          ...

          '
      - pattern-inside: '$TO_DICT = dict(...)

          ...

          '
      - pattern-inside: '$FROM_DICT[$KEY]

          ...

          '
      - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$FROM_DICT = { ... }

          ...

          '
      - pattern-inside: '$FROM_DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $TO_DICT.update($FROM_DICT)
      - pattern: $TO_DICT | $FROM_DICT
      - pattern: $TO_DICT |= $FROM_DICT
  to: $TO_DICT
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.append($FROM)
      - pattern: $LIST.extend($FROM)
      - pattern: $LIST.insert($INDEX, $FROM)
  to: $LIST
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.update(..., $FROM, ...)
      - pattern: $SET.intersection_update(..., $FROM, ...)
      - pattern: $SET.difference_update(..., $FROM, ...)
      - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
      - pattern: $SET.add($FROM)
      - pattern: $SET |= $FROM
      - pattern: $SET &= $FROM
      - pattern: $SET -= $FROM
      - pattern: $SET ^= $FROM
  to: $SET
- from: $FORM
  patterns:
  - pattern: $FORM.populate_obj($OBJ)
  to: $OBJ
pattern-sinks:
- pattern-either:
  - patterns:
    - pattern: os.$FUNC($SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(startfile|system)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: os.startfile(..., path=$SINK, ...)
      - pattern: os.startfile(..., command=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern: os.$FUNC($SINK, ..., $ENV)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(execle|execlpe|execve|execvpe)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: os.$FUNC(..., $ARG=$SINK, ..., $ENV)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(execle|execlpe|execve|execvpe)$
    - metavariable-regex:
        metavariable: $ARG
        regex: ^(path|file)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: os.$FUNC($SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(popen|popen2|popen3|popen4|execl|execlp|execv|execvp)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: os.$FUNC(..., $ARG=$SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(popen|popen2|popen3|popen4|execl|execlp|execv|execvp)$
    - metavariable-regex:
        metavariable: $ARG
        regex: ^(cmd|path|file)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: popen2.$FUNC($SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(popen2|popen3|popen4|Popen3|Popen4)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: popen2.$FUNC(..., cmd=$SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(popen2|popen3|popen4|Popen3|Popen4)$
    - focus-metavariable: $SINK
- pattern-either:
  - patterns:
    - pattern: os.$FUNC($PATH, $ARG, $ENV, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(posix_spawn|posix_spawnp)$
    - focus-metavariable: $PATH
  - patterns:
    - pattern: os.$FUNC(..., path=$PATH, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(posix_spawn|posix_spawnp)$
    - focus-metavariable: $PATH
- pattern-either:
  - patterns:
    - pattern: os.$FUNC($MODE, ..., $SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(spawnl|spawnlp|spawnv|spawnvp)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: os.$FUNC($MODE, $SINK, ..., $ENV)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(spawnle|spawnlpe|spawnve|spawnvpe)$
    - focus-metavariable: $SINK
  - patterns:
    - pattern: os.$FUNC(..., $ARG=$SINK, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(spawnle|spawnlpe|spawnve|spawnvpe)$
    - metavariable-regex:
        metavariable: $ARG
        regex: ^(path|file)$
    - focus-metavariable: $SINK
- pattern-either:
  - patterns:
    - pattern-either:
      - pattern: subprocess.$FUNC($CMD, ..., shell=True, ...)
      - pattern: subprocess.$FUNC([$CMD, ...], ...)
      - pattern: subprocess.$FUNC(..., args=$CMD, ..., shell=True, ...)
      - pattern: subprocess.$FUNC(..., args=[$CMD, ...], ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(call|run|check_call|check_output)$
    - focus-metavariable: $CMD
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: subprocess.Popen($SINK, ...)
        - pattern: subprocess.Popen([$SINK, ...], ...)
        - pattern: subprocess.Popen(..., args=$SINK, ...)
        - pattern: subprocess.Popen(..., args=[$SINK, ...], ...)
      - focus-metavariable: $SINK
    - patterns:
      - pattern-either:
        - pattern-inside: subprocess.Popen(...)
        - pattern-inside: subprocess.run(...)
      - pattern: subprocess.$FUNC(..., $ARG=$SINK, ...)
      - metavariable-regex:
          metavariable: $ARG
          regex: ^(executable|cwd|env)$
      - focus-metavariable: $SINK
  - pattern-either:
    - patterns:
      - pattern: subprocess.run($ARG1, $ARG2, $ARG3, $ARG4, $ARG5, $ARG6, $ARG7, $ARG8,
          $CWD, $ARG10, $ARG11, $ARG12, $ARG13, $ARG14, $ENV, $ARG15, $ARG16)
      - focus-metavariable: $ENV
    - patterns:
      - pattern: subprocess.run($ARG1, $ARG2, $ARG3, $ARG4, $ARG5, $ARG6, $ARG7, $ARG8,
          $CWD, $ARG10, $ARG11, $ARG12, $ARG13, $ARG14, $ENV, $ARG15, $ARG16)
      - focus-metavariable: $CWD
    - patterns:
      - pattern: subprocess.Popen($ARG1, $ARG2, $EXECUTABLE, $ARG4, $ARG5, $ARG6,
          $ARG7, $ARG8, $ARG9, $CWD, $ENV, $ARG12, $ARG13, $ARG14, $ARG15, $ARG16,
          $ARG17, $ARG18, $ARG19, $ARG20, $ARG21, $ARG22, $ARG23, $ARG24, $ARG25,
          $ARG26, $ARG27)
      - focus-metavariable: $EXECUTABLE
    - patterns:
      - pattern: subprocess.Popen($ARG1, $ARG2, $EXECUTABLE, $ARG4, $ARG5, $ARG6,
          $ARG7, $ARG8, $ARG9, $CWD, $ENV, $ARG12, $ARG13, $ARG14, $ARG15, $ARG16,
          $ARG17, $ARG18, $ARG19, $ARG20, $ARG21, $ARG22, $ARG23, $ARG24, $ARG25,
          $ARG26, $ARG27)
      - focus-metavariable: $CWD
    - patterns:
      - pattern: subprocess.Popen($ARG1, $ARG2, $EXECUTABLE, $ARG4, $ARG5, $ARG6,
          $ARG7, $ARG8, $ARG9, $CWD, $ENV, $ARG12, $ARG13, $ARG14, $ARG15, $ARG16,
          $ARG17, $ARG18, $ARG19, $ARG20, $ARG21, $ARG22, $ARG23, $ARG24, $ARG25,
          $ARG26, $ARG27)
      - focus-metavariable: $ENV
- pattern-either:
  - pattern: commands.getoutput($CMD)
  - pattern: commands.getstatusoutput($CMD)
  - pattern: commands.getoutput(cmd=$CMD)
  - pattern: commands.getstatusoutput(cmd=$CMD)
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern: int(...)
    - pattern: bool(...)
    - pattern: float(...)
    - pattern: complex(...)
    - pattern: oct(...)
    - pattern: hex(...)
    - pattern: bin(...)
    - pattern: round(...)
    - pattern: id(...)
    - pattern: hash(...)
    - pattern: len(...)
    - pattern: type(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$DICT[$KEY]

        ...

        '
    - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

        ...

        '
    - pattern-inside: '$DICT.get($KEY, $DEFAULT)

        ...

        '
    - pattern-inside: '$DICT = { }

        ...

        '
    - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

        ...

        '
    - pattern-inside: '$DICT = dict(...)

        ...

        '
  - pattern-either:
    - pattern: $DICT.clear()
    - pattern: $DICT.len()
- patterns:
  - pattern-either:
    - pattern-inside: '$LIST = [ ... ]

        ...

        '
    - pattern-inside: '$LIST = list(...)

        ...

        '
  - pattern-either:
    - pattern: $LIST.clear()
    - pattern: $LIST.count(...)
    - pattern: $LIST.index(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$SET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$SET = set(...)

        ...

        '
  - pattern-either:
    - pattern: $SET.len()
    - pattern: $SET.clear()
- patterns:
  - pattern-either:
    - pattern-inside: '$SET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$SET = { $ITEM for ... in ...}

        ...

        '
    - pattern-inside: '$SET = set(...)

        ...

        '
    - pattern-inside: '$SET = frozenset(...)

        ...

        '
    - pattern-inside: '$OTHERSET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$OTHERSET = set(...)

        ...

        '
  - pattern-either:
    - pattern: $SET.isdisjoint($OTHERSET)
    - pattern: $SET.issubset($OTHERSET)
    - pattern: $SET < $OTHERSET
    - pattern: $SET <= $OTHERSET
    - pattern: $SET.issuperset($OTHERSET)
    - pattern: $SET > $OTHERSET
    - pattern: $SET >= $OTHERSET
- patterns:
  - pattern-either:
    - pattern-inside: '$TUPLE = ( $ITEM, ... )

        ...

        '
    - pattern-inside: '$TUPLE = $ITEM, ...

        ...

        '
    - pattern-inside: '$TUPLE = tuple(...)

        ...

        '
  - pattern-either:
    - pattern: $TUPLE.len()
