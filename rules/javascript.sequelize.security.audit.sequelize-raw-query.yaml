id: javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
message: 'Avoiding SQL string concatenation: untrusted input concatenated with raw
  SQL query can result in SQL Injection. Data replacement or data binding should be
  used. See https://sequelize.org/master/manual/raw-queries.html'
metadata:
  category: security
  technology:
  - sequelize
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://sequelize.org/master/manual/raw-queries.html
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: HIGH
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
  shortlink: https://sg.run/GeG6
  semgrep.dev:
    rule:
      r_id: 9348
      rv_id: 109974
      rule_id: lBU9RN
      version_id: 44TRlq8
      url: https://semgrep.dev/playground/r/44TRlq8/javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
      origin: community
languages:
- javascript
- typescript
severity: WARNING
pattern-either:
- pattern: '$DATABASE.sequelize.query(`...${...}...`, ...)

    '
- pattern: '$QUERY = `...${...}...`

    ...

    $DATABASE.sequelize.query($QUERY, ...)

    '
- pattern: '$DATABASE.sequelize.query($SQL + $VALUE, ...)

    '
- pattern: '$QUERY = $SQL + $VALUE

    ...

    $DATABASE.sequelize.query($QUERY, ...)

    '
