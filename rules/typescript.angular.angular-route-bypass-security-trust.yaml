id: typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
message: Untrusted input could be used to tamper with a web page rendering, which
  can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
  when untrusted input executes malicious JavaScript code, leading to issues such
  as account compromise and sensitive information leakage. Validate the user input,
  perform contextual output encoding, or sanitize the input. A popular library used
  to prevent XSS is DOMPurify. You can also use libraries and frameworks such as Angular,
  Vue, and React, which offer secure defaults when rendering input.
severity: WARNING
metadata:
  likelihood: HIGH
  impact: MEDIUM
  confidence: MEDIUM
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
    Scripting'')'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::source::http-params::angular
  - web::source::http-body::angular
  - web::source::header::angular
  - web::source::url-path-params::angular
  - web::sink::html-webpage::angular
  owasp:
  - A07:2017 - Cross-Site Scripting (XSS)
  - A03:2021 - Injection
  references:
  - https://angular.io/api/router/ActivatedRoute
  - https://angular.io/api/router/ActivatedRouteSnapshot
  - https://angular.io/api/platform-browser/DomSanitizer
  technology:
  - angular
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Cross-Site-Scripting (XSS)
  source: https://semgrep.dev/r/typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
  shortlink: https://sg.run/JpBW
  semgrep.dev:
    rule:
      r_id: 40346
      rv_id: 112045
      rule_id: GdUWew
      version_id: 7ZTgnA5
      url: https://semgrep.dev/playground/r/7ZTgnA5/typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
      origin: pro_rules
languages:
- typescript
- javascript
mode: taint
pattern-sources:
- patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: '($SN: ActivatedRoute).snapshot.$X

            '
        - pattern: '($SN: ActivatedRouteSnapshot). ... .$X

            '
      - metavariable-regex:
          metavariable: $X
          regex: ^(fragment|queryParams|params)$
- patterns:
  - pattern: '($SN: ActivatedRoute).snapshot.url[$VALUE].$X

      '
  - pattern-not: this.$ROUTE.snapshot.url[$VALUE]
  - metavariable-regex:
      metavariable: $X
      regex: ^(path)$
- patterns:
  - pattern-inside: '($SN: ActivatedRoute).paramMap.subscribe($X => {

      ...

      })

      '
  - pattern: $X.get('...')
- patterns:
  - pattern-inside: '($SN: ActivatedRoute).params.subscribe($X => {

      ...

      })

      '
  - pattern: $X
pattern-sinks:
- patterns:
  - pattern: '($X: DomSanitizer).$BYPASS($FOO)

      '
  - metavariable-regex:
      metavariable: $BYPASS
      regex: (bypassSecurityTrustHtml|bypassSecurityTrustStyle|bypassSecurityTrustScript|bypassSecurityTrustUrl|bypassSecurityTrustResourceUrl)
  - focus-metavariable: $FOO
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern: '($X: DomSanitizer).sanitize(...)

        '
- patterns:
  - pattern-either:
    - pattern-inside: 'import $S from "underscore.string"

        ...

        '
    - pattern-inside: 'import * as $S from "underscore.string"

        ...

        '
    - pattern-inside: 'import $S from "underscore.string"

        ...

        '
    - pattern-inside: '$S = require("underscore.string")

        ...

        '
  - pattern-either:
    - pattern: $S.escapeHTML(...)
- patterns:
  - pattern-either:
    - pattern-inside: 'import $S from "dompurify"

        ...

        '
    - pattern-inside: 'import { ..., $S,... } from "dompurify"

        ...

        '
    - pattern-inside: 'import * as $S from "dompurify"

        ...

        '
    - pattern-inside: '$S = require("dompurify")

        ...

        '
    - pattern-inside: 'import $S from "isomorphic-dompurify"

        ...

        '
    - pattern-inside: 'import * as $S from "isomorphic-dompurify"

        ...

        '
    - pattern-inside: '$S = require("isomorphic-dompurify")

        ...

        '
  - pattern-either:
    - patterns:
      - pattern-inside: '$VALUE = $S(...)

          ...

          '
      - pattern: $VALUE.sanitize(...)
    - patterns:
      - pattern-inside: '$VALUE = $S.sanitize

          ...

          '
      - pattern: $S(...)
    - patterns:
      - pattern-inside: '$VALUE = (...) => $S.sanitize(...)

          ...

          '
      - pattern: $VALUE(...)
    - pattern: $S.sanitize(...)
    - pattern: $S(...)
- patterns:
  - pattern-either:
    - pattern-inside: 'import $S from ''xss'';

        ...

        '
    - pattern-inside: 'import * as $S from ''xss'';

        ...

        '
    - pattern-inside: '$S = require("xss")

        ...

        '
  - pattern: $S(...)
- patterns:
  - pattern-either:
    - pattern-inside: 'import $S from ''sanitize-html'';

        ...

        '
    - pattern-inside: 'import * as $S from "sanitize-html";

        ...

        '
    - pattern-inside: '$S = require("sanitize-html")

        ...

        '
  - pattern: $S(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$S = new Remarkable()

        ...

        '
  - pattern: $S.render(...)
