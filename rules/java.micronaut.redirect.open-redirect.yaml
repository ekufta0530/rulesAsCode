id: java.micronaut.redirect.open-redirect.open-redirect
message: The application builds a URL using user-controlled input which can lead to
  an open redirect vulnerability. An attacker can manipulate the URL and redirect
  users to an arbitrary domain. Open redirect vulnerabilities can lead to issues such
  as Cross-site scripting (XSS) or redirecting to a malicious domain for activities
  such as phishing to capture users' credentials. To prevent this vulnerability perform
  strict input validation of the domain against an allowlist of approved domains.
  Notify a user in your application that they are leaving the website. Display a domain
  where they are redirected to the user. A user can then either accept or deny the
  redirect to an untrusted site.
severity: WARNING
metadata:
  likelihood: MEDIUM
  impact: MEDIUM
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
  functional-categories:
  - web::sink::redirect::HttpClient
  - web::source::cookie::Micronaut
  - web::source::form-data::Micronaut
  - web::source::header::Micronaut
  - web::source::http-body::Micronaut
  - web::source::http-params::Micronaut
  - web::source::url-path-params::Micronaut
  owasp:
  - A01:2021 - Broken Access Control
  references:
  - https://owasp.org/Top10/A01_2021-Broken_Access_Control
  technology:
  - Micronaut
  - java
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Open Redirect
  source: https://semgrep.dev/r/java.micronaut.redirect.open-redirect.open-redirect
  shortlink: https://sg.run/3qWPo
  semgrep.dev:
    rule:
      r_id: 115587
      rv_id: 735000
      rule_id: 4bUR94v
      version_id: rxT2pEg
      url: https://semgrep.dev/playground/r/rxT2pEg/java.micronaut.redirect.open-redirect.open-redirect
      origin: pro_rules
languages:
- java
mode: taint
options:
  interfile: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- label: REQ
  patterns:
  - pattern: '@io.micronaut.http.annotation.$METHOD(...)

      $T $FUNC(..., $TYPE $SOURCE, ...) {...}

      '
  - focus-metavariable: $SOURCE
  - metavariable-regex:
      metavariable: $METHOD
      regex: (Delete|Get|Head|Options|Patch|Put|Post|Trace|CustomHttpMethod)
  - metavariable-pattern:
      metavariable: $TYPE
      patterns:
      - patterns:
        - pattern-not-regex: ^Session$
- label: REQ
  patterns:
  - pattern-either:
    - pattern: (io.micronaut.http.HttpRequest<$ANY> $REQ).$PARAM(...)
    - pattern: (io.micronaut.http.HttpRequest<?> $REQ).$PARAM(...)
    - pattern: (io.micronaut.http.HttpRequest $REQ).$PARAM(...)
  - metavariable-pattern:
      metavariable: $PARAM
      patterns:
      - patterns:
        - pattern-either:
          - pattern: getCookies
          - pattern: getLocale
          - pattern: getParameters
          - pattern: getPath
          - pattern: getUri
          - pattern: getBody
          - pattern: getContentType
          - pattern: getHeaders
- label: NOT_CONCAT
  patterns:
  - focus-metavariable: $X
  - pattern-either:
    - pattern: $F + $X
    - pattern: String.format(..., $X, ...)
    - pattern: MessageFormat.format(..., $X, ...)
  - pattern-not: $X + $F
  - pattern-not: '"https://" + $X

      '
  - pattern-not: '"http://" + $X

      '
  - pattern-not: '"ws://" + $X

      '
  - pattern-not: '"wss://" + $X

      '
  - pattern-not: '"//" + $X

      '
  requires: REQ
- label: HTTP_FORMAT
  patterns:
  - focus-metavariable: $X
  - pattern-either:
    - pattern: MessageFormat.format("$REGEX", $X,...)
    - pattern: String.format("$REGEX", $X,...)
  - metavariable-regex:
      metavariable: $REGEX
      regex: ^(http://|https://|//|ws://|wss://)%s.*
  requires: REQ
- label: STRING_CONCAT
  patterns:
  - pattern-either:
    - pattern: '"...${$X}..."

        '
    - pattern: $F + $X
    - pattern: '"...".formatted(...)

        '
    - pattern: String.format(...)
    - pattern: MessageFormat.format(...)
  requires: REQ
pattern-propagators:
- from: $INPUT
  patterns:
  - pattern-either:
    - pattern: String.format($FMT, ..., $INPUT, ...)
    - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
  to: $FMT
- from: $INPUT
  patterns:
  - pattern: (StringBuilder $BUILDER).append($INPUT);
  to: $BUILDER
pattern-sinks:
- patterns:
  - focus-metavariable: $URI
  - pattern-either:
    - pattern: io.micronaut.http.HttpResponse.redirect($URI,...)
    - pattern: io.micronaut.http.HttpResponse.permanentRedirect($URI,...)
    - pattern: io.micronaut.http.HttpResponse.temporaryRedirect($URI,...)
    - pattern: io.micronaut.http.HttpResponse.seeOther($URI,...)
    - patterns:
      - pattern: io.micronaut.http.HttpResponse. ... .header("$HEADER", $URI,...)
      - metavariable-regex:
          metavariable: $HEADER
          regex: (?i)location
  requires: (REQ and not STRING_CONCAT) or (REQ and STRING_CONCAT and not NOT_CONCAT)
    or HTTP_FORMAT
pattern-sanitizers:
- pattern: (ChoiceFormat $X).format(...)
- pattern: (DecimalFormat $X).format(...)
- pattern: (java.util.UUID $X)
- patterns:
  - focus-metavariable: $X
  - pattern: io.micronaut.http.HttpRequest.$METHOD($URL, ..., $X, ...)
- patterns:
  - pattern: io.micronaut.http.uri.UriBuilder. ... .$FUNC(...)
  - metavariable-pattern:
      metavariable: $FUNC
      patterns:
      - pattern-either:
        - pattern: path
        - pattern: expand
        - pattern: queryParam
- patterns:
  - focus-metavariable: $X
  - pattern-either:
    - pattern: java.net.http.HttpRequest. ... .$FUNC(..., $X, ...)
    - pattern: (java.net.http.HttpRequest.Builder $B). ... .$FUNC(..., $X, ...)
  - metavariable-pattern:
      metavariable: $FUNC
      patterns:
      - pattern-not-regex: ^(newBuilder|uri)$
- patterns:
  - focus-metavariable: $PARAM
  - pattern: $URLBUILDER. ... .addQueryParameter(..., $PARAM). ...
