id: python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask
message: Untrusted input might be used to build a database query, which can lead to
  a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. To prevent this vulnerability, use prepared statements
  that do not concatenate user-controllable strings and use parameterized queries
  where SQL commands and user data are strictly separated. Also, consider using an
  object-relational (ORM) framework to operate with safer abstractions.
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - db::sink::sql-or-nosql-query::sqlalchemy
  - web::source::cookie::flask
  - web::source::form-data::flask
  - web::source::form-data::flask-wtf
  - web::source::form-data::wtforms
  - web::source::header::flask
  - web::source::http-body::flask
  - web::source::http-params::flask
  - web::source::url-path-params::flask
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - flask
  - flask-wtf
  - sql
  - sqlalchemy
  - web
  - wtforms
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask
  shortlink: https://sg.run/WAbpo
  semgrep.dev:
    rule:
      r_id: 116509
      rv_id: 524327
      rule_id: lBU4p85
      version_id: 7ZTpp3J
      url: https://semgrep.dev/playground/r/7ZTpp3J/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask
      origin: pro_rules
languages:
- python
mode: taint
options:
  interfile: true
  symbolic_propagation: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- label: USER_INPUT
  pattern-either:
  - patterns:
    - pattern: flask.request.$FUNC()
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(from_values|get_data|get_json)$
  - patterns:
    - pattern-either:
      - pattern: flask.request.$PROPERTY
      - pattern: flask.request.$PROPERTY[...]
      - pattern: flask.request.$PROPERTY.get(...)
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
  - patterns:
    - pattern: "@$APP.$ROUTE\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(endpoint)$
    - focus-metavariable: $PARAM
- label: USER_INPUT
  patterns:
  - pattern: "@$APP.$ROUTE(...)\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
  - metavariable-regex:
      metavariable: $ROUTE
      regex: ^(route|delete|get|patch|post|put)$
  - focus-metavariable: $PARAM
- label: USER_INPUT
  patterns:
  - pattern-either:
    - pattern-inside: "@$APP.$ROUTE(...)\ndef $FUNC(...):\n  ...\n  $FORM = $FORMCLASS(...)\n\
        \  ...\n  $FORM.validate_on_submit()\n  ...\n"
    - pattern-inside: "@$APP.$ROUTE(...)\ndef $FUNC(...):\n  ...\n  $FORM = $FORMCLASS(...)\n\
        \  ...\n  if $FORM.validate_on_submit():\n    ...\n  ...\n"
  - metavariable-regex:
      metavariable: $ROUTE
      regex: ^(route|delete|get|patch|post|put|endpoint)$
  - pattern: $FORM.$FIELD.data
- label: SQLALCHEMY_ENGINE
  patterns:
  - pattern-either:
    - pattern: sqlalchemy.create_engine(...)
    - pattern: sqlalchemy.dialects.mssql.provision.create_engine(...)
    - pattern: sqlalchemy.dialects.oracle.provision.create_engine(...)
    - pattern: sqlalchemy.engine.create.create_engine(...)
    - pattern: sqlalchemy.engine.create_engine(...)
    - pattern: sqlalchemy.future.create_engine(...)
    - pattern: sqlalchemy.future.engine.create_engine(...)
    - pattern: sqlalchemy.ext.asyncio.engine._create_engine(...)
    - pattern: sqlalchemy.ext.asyncio.engine.create_async_engine(...)
    - pattern: sqlalchemy.ext.asyncio.engine.async_engine_from_config(...)
    - pattern: sqlalchemy.engine_from_config(...)
    - pattern: sqlalchemy.engine.engine_from_config(...)
    - pattern: sqlalchemy.engine.create.engine_from_config(...)
- label: SQLALCHEMY_CONN
  patterns:
  - pattern-either:
    - pattern: $ENGINE.connect(...)
    - pattern: $ENGINE.begin(...)
    - pattern: $ENGINE.connect(...).begin_nested(...)
    - pattern: $ENGINE.begin(...).begin_nested(...)
    - pattern: $ENGINE.raw_connection(...)
  - focus-metavariable: $ENGINE
  requires: SQLALCHEMY_ENGINE
pattern-propagators:
- from: $DEFAULT
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.get($FIELD, $DEFAULT)
      - pattern: $DICT.setdefault($KEY, $DEFAULT)
  to: $DICT
- from: $FROM_DICT
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$TO_DICT[$KEY]

          ...

          '
      - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$TO_DICT = { ... }

          ...

          '
      - pattern-inside: '$TO_DICT = dict(...)

          ...

          '
      - pattern-inside: '$FROM_DICT[$KEY]

          ...

          '
      - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$FROM_DICT = { ... }

          ...

          '
      - pattern-inside: '$FROM_DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $TO_DICT.update($FROM_DICT)
      - pattern: $TO_DICT | $FROM_DICT
      - pattern: $TO_DICT |= $FROM_DICT
  to: $TO_DICT
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.append($FROM)
      - pattern: $LIST.extend($FROM)
      - pattern: $LIST.insert($INDEX, $FROM)
  to: $LIST
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.update(..., $FROM, ...)
      - pattern: $SET.intersection_update(..., $FROM, ...)
      - pattern: $SET.difference_update(..., $FROM, ...)
      - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
      - pattern: $SET.add($FROM)
      - pattern: $SET |= $FROM
      - pattern: $SET &= $FROM
      - pattern: $SET -= $FROM
      - pattern: $SET ^= $FROM
  to: $SET
- from: $FORM
  patterns:
  - pattern: $FORM.populate_obj($OBJ)
  to: $OBJ
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: $SQLALCHEMY_CONN.exec_driver_sql($SINK, ...)
    - pattern: $SQLALCHEMY_CONN.exec_driver_sql(..., statement=$SINK, ...)
    - pattern: $SQLALCHEMY_CONN.execute($SINK, ...)
    - pattern: $SQLALCHEMY_CONN.execute(..., statement=$SINK, ...)
    - pattern: $SQLALCHEMY_CONN.scalar($SINK, ...)
    - pattern: $SQLALCHEMY_CONN.scalar(..., statement=$SINK, ...)
    - pattern: $SQLALCHEMY_CONN.scalars($SINK, ...)
    - pattern: $SQLALCHEMY_CONN.scalars(..., statement=$SINK, ...)
    - pattern: $SQLALCHEMY_CONN.stream($SINK, ...)
    - pattern: $SQLALCHEMY_CONN.stream(..., statements=$SINK, ...)
    - pattern: $SQLALCHEMY_CONN.stream_scalars($SINK, ...)
    - pattern: $SQLALCHEMY_CONN.stream_scalars(..., statements=$SINK, ...)
  requires: USER_INPUT and SQLALCHEMY_CONN
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern: int(...)
    - pattern: bool(...)
    - pattern: float(...)
    - pattern: complex(...)
    - pattern: oct(...)
    - pattern: hex(...)
    - pattern: bin(...)
    - pattern: round(...)
    - pattern: id(...)
    - pattern: hash(...)
    - pattern: len(...)
    - pattern: type(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$DICT[$KEY]

        ...

        '
    - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

        ...

        '
    - pattern-inside: '$DICT.get($KEY, $DEFAULT)

        ...

        '
    - pattern-inside: '$DICT = { }

        ...

        '
    - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

        ...

        '
    - pattern-inside: '$DICT = dict(...)

        ...

        '
  - pattern-either:
    - pattern: $DICT.clear()
    - pattern: $DICT.len()
- patterns:
  - pattern-either:
    - pattern-inside: '$LIST = [ ... ]

        ...

        '
    - pattern-inside: '$LIST = list(...)

        ...

        '
  - pattern-either:
    - pattern: $LIST.clear()
    - pattern: $LIST.count(...)
    - pattern: $LIST.index(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$SET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$SET = set(...)

        ...

        '
  - pattern-either:
    - pattern: $SET.len()
    - pattern: $SET.clear()
- patterns:
  - pattern-either:
    - pattern-inside: '$SET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$SET = { $ITEM for ... in ...}

        ...

        '
    - pattern-inside: '$SET = set(...)

        ...

        '
    - pattern-inside: '$SET = frozenset(...)

        ...

        '
    - pattern-inside: '$OTHERSET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$OTHERSET = set(...)

        ...

        '
  - pattern-either:
    - pattern: $SET.isdisjoint($OTHERSET)
    - pattern: $SET.issubset($OTHERSET)
    - pattern: $SET < $OTHERSET
    - pattern: $SET <= $OTHERSET
    - pattern: $SET.issuperset($OTHERSET)
    - pattern: $SET > $OTHERSET
    - pattern: $SET >= $OTHERSET
- patterns:
  - pattern-either:
    - pattern-inside: '$TUPLE = ( $ITEM, ... )

        ...

        '
    - pattern-inside: '$TUPLE = $ITEM, ...

        ...

        '
    - pattern-inside: '$TUPLE = tuple(...)

        ...

        '
  - pattern-either:
    - pattern: $TUPLE.len()
- pattern-either:
  - pattern: sqlalchemy.select(...)
  - pattern: sqlalchemy.select(...).$FUNC(...)
  - pattern: sqlalchemy.table(...)
  - pattern: sqlalchemy.table(...).$FUNC(...)
  - pattern: sqlalchemy.bindparam(...)
  - pattern: sqlalchemy.bindparams(...)
  - pattern: $STMT.bindparam(...)
  - pattern: $STMT.bindparams(...)
  - patterns:
    - pattern: $COLUMN.$FUNC(...)
    - pattern-not: $COLUMN.$FUNC(..., autoescape=False, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(contains|endswith|like|startswith|icontains|iendswith|ilike|istartswith|not_ilike|not_like|notilike|notlike|regexp_match|regexp_replace)$
