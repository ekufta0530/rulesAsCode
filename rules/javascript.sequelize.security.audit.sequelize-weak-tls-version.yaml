id: javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
message: TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default,
  NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1.
  Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for
  PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
  This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.
metadata:
  cwe:
  - 'CWE-319: Cleartext Transmission of Sensitive Information'
  owasp:
  - A03:2017 - Sensitive Data Exposure
  - A02:2021 - Cryptographic Failures
  references:
  - https://node-postgres.com/features/ssl
  - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
  - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
  - https://nodejs.org/api/tls.html#tls_tls_default_min_version
  category: security
  technology:
  - sequelize
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Mishandled Sensitive Information
  source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
  shortlink: https://sg.run/bDrq
  semgrep.dev:
    rule:
      r_id: 9970
      rv_id: 109976
      rule_id: wdU8GB
      version_id: JdTNpRZ
      url: https://semgrep.dev/playground/r/JdTNpRZ/javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
      origin: community
languages:
- javascript
- typescript
severity: WARNING
patterns:
- pattern-inside: "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n\
    \  dialectOptions:\n    { ssl: ... }\n }\n"
- pattern-either:
  - pattern: "{\n  minVersion: 'TLSv1'\n}\n"
  - pattern: "{\n  minVersion: 'TLSv1.1'\n}\n"
- metavariable-regex:
    metavariable: $DIALECT
    regex: '[''"](mariadb|mysql|postgres)[''"]'
