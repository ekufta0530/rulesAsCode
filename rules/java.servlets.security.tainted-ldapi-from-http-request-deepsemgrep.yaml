id: java.servlets.security.tainted-ldapi-from-http-request-deepsemgrep.tainted-ldapi-from-http-request-deepsemgrep
message: Untrusted input might be used to build an LDAP query, which can allow attackers
  to run arbitrary LDAP queries. If an LDAP query must contain untrusted input then
  it must be escaped. Ensure data passed to an LDAP query is not controllable or properly
  sanitize the user input with functions like createEqualityFilter.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
    Injection'')'
  functional-categories:
  - ldap::sink::ldap-query::javax.naming
  - web::source::cookie::Servlet
  - web::source::header::Servlet
  - web::source::http-body::Servlet
  - web::source::http-params::Servlet
  - web::source::url-path-params::Servlet
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - java
  - servlets
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - LDAP Injection
  source: https://semgrep.dev/r/java.servlets.security.tainted-ldapi-from-http-request-deepsemgrep.tainted-ldapi-from-http-request-deepsemgrep
  shortlink: https://sg.run/DbqR2
  semgrep.dev:
    rule:
      r_id: 125208
      rv_id: 735027
      rule_id: bwUb4rn
      version_id: DkTxPJ1
      url: https://semgrep.dev/playground/r/DkTxPJ1/java.servlets.security.tainted-ldapi-from-http-request-deepsemgrep.tainted-ldapi-from-http-request-deepsemgrep
      origin: pro_rules
languages:
- java
mode: taint
options:
  interfile: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- patterns:
  - pattern-either:
    - pattern: (ServletRequest $REQ).$METHOD(...)
    - pattern: (HttpServletRequest $REQ).$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
pattern-propagators:
- from: $INPUT
  patterns:
  - pattern-either:
    - pattern: String.format($FMT, ..., $INPUT, ...)
    - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
  to: $FMT
- from: $INPUT
  patterns:
  - pattern: (StringBuilder $BUILDER).append($INPUT);
  to: $BUILDER
- from: $VAR
  patterns:
  - patterns:
    - pattern: (SearchRequest $SEARCH).$METHOD($VAR)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (setBase|setFilter)
  to: $SEARCH
pattern-sinks:
- patterns:
  - focus-metavariable:
    - $FILTER
    - $BASE
  - pattern-either:
    - pattern: (javax.naming.directory.InitialDirContext $IDC).search($BASE, $FILTER,
        ...)
    - pattern: (javax.naming.directory.DirContext $CTX).search($BASE, $FILTER, ...)
    - pattern: (InitialDirContext $IDC).search($BASE, $FILTER, ...)
    - pattern: (DirContext $CTX).search($BASE, $FILTER, ...)
    - pattern: (LDAPConnection $CONN).search($BASE, $SCOPE, $FILTER, ...)
    - pattern: (LdapConnection $CONN).search($BASE, ...)
    - pattern: (LdapTemplate $TEMP).search($BASE, $FILTER, ...)
pattern-sanitizers:
- pattern: (ChoiceFormat $X).format(...)
- pattern: (DecimalFormat $X).format(...)
- pattern: (java.util.UUID $X)
- pattern: Filter.createEqualityFilter(...)
- pattern: Filter.createPresenceFilter(...)
- pattern: new Rdn(...)
- pattern: new RDN(...)
- pattern: (Encoder $ENC).encodeForDN(...)
- pattern: (Encoder $ENC).encodeForLDAP(...)
- pattern: LdapNameBuilder.newInstance(...). ... .add(...)
- pattern: org.apache.directory.ldap.client.api.search.FilterBuilder.equal(...)
