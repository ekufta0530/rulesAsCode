id: java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
severity: WARNING
languages:
- java
metadata:
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
  category: security
  technology:
  - rmi
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: HIGH
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
  shortlink: https://sg.run/oxg6
  semgrep.dev:
    rule:
      r_id: 9216
      rv_id: 109767
      rule_id: bwUwj4
      version_id: LjTqQZj
      url: https://semgrep.dev/playground/r/LjTqQZj/java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
      origin: community
message: Using a non-primitive class with Java RMI may be an insecure deserialization
  vulnerability. Depending on the underlying implementation. This object could be
  manipulated by a malicious actor allowing them to execute code on your system. Instead,
  use an integer ID to look up your object, or consider alternative serialization
  schemes such as JSON.
patterns:
- pattern: "interface $INTERFACE extends Remote {\n  $RETURNTYPE $METHOD($CLASS $PARAM)\
    \ throws RemoteException;\n}\n"
- metavariable-regex:
    metavariable: $CLASS
    regex: (?!int|boolean|short|long|byte|char|float|double)
