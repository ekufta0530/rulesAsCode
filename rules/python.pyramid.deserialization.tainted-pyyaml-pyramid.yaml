id: python.pyramid.deserialization.tainted-pyyaml-pyramid.tainted-pyyaml-pyramid
message: 'The application may convert user-controlled data into an object, which can
  lead to an insecure deserialization vulnerability. An attacker can create a malicious
  serialized object, pass it to the application, and take advantage of the deserialization
  process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass
  access control measures. To prevent this vulnerability, leverage data formats such
  as JSON or XML as safer alternatives. If you need to deserialize user input in a
  specific format, consider digitally signing the data before serialization to prevent
  tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  PyYAML''s `yaml` module is as powerful as `pickle` and so may call any Python function.
  It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.'
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::pyyaml
  - web::source::cookie::pyramid
  - web::source::http-params::pyramid
  - web::source::http-body::pyramid
  - web::source::header::pyramid
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://portswigger.net/web-security/deserialization
  - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
  - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
  - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
  - https://cwe.mitre.org/data/definitions/502.html
  related_oss_rules:
  - python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
  technology:
  - python
  - pyramid
  - yaml
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-pyyaml-pyramid.tainted-pyyaml-pyramid
  shortlink: https://sg.run/92Lk
  semgrep.dev:
    rule:
      r_id: 44967
      rv_id: 111894
      rule_id: 9AU8JD
      version_id: PkTJdGD
      url: https://semgrep.dev/playground/r/PkTJdGD/python.pyramid.deserialization.tainted-pyyaml-pyramid.tainted-pyyaml-pyramid
      origin: pro_rules
languages:
- python
mode: taint
pattern-sources:
- pattern-either:
  - patterns:
    - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
pattern-sinks:
- patterns:
  - pattern: 'yaml.$FUNC($SINK, ...)

      '
  - pattern-not: 'yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)

      '
  - pattern-not: 'yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)

      '
  - metavariable-regex:
      metavariable: $FUNC
      regex: ^(scan|parse|compose|compose_all|load|load_all|unsafe_load)$
- patterns:
  - pattern: yaml.$LOADER($SINK)
  - metavariable-regex:
      metavariable: $LOADER
      regex: ^(Loader|BaseLoader|CLoader|CBaseLoader)$
