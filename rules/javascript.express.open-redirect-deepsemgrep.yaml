id: javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep
message: The application builds a URL using user-controlled input which can lead to
  an open redirect vulnerability. An attacker can manipulate the URL and redirect
  users to an arbitrary domain. Open redirect vulnerabilities can lead to issues such
  as Cross-site scripting (XSS) or redirecting to a malicious domain for activities
  such as phishing to capture users' credentials. To prevent this vulnerability perform
  strict input validation of the domain against an allowlist of approved domains.
  Notify a user in your application that they are leaving the website. Display a domain
  where they are redirected to the user. A user can then either accept or deny the
  redirect to an untrusted site.
severity: WARNING
metadata:
  likelihood: HIGH
  impact: MEDIUM
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
  functional-categories:
  - web::source::cookie::express
  - web::source::http-params::express
  - web::source::http-body::express
  - web::source::header::express
  - web::sink::redirect::express
  owasp:
  - A01:2021 - Broken Access Control
  references:
  - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
  technology:
  - express
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Open Redirect
  source: https://semgrep.dev/r/javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep
  shortlink: https://sg.run/BDbW
  semgrep.dev:
    rule:
      r_id: 43795
      rv_id: 111670
      rule_id: 2ZUXkp
      version_id: 9lTd52K
      url: https://semgrep.dev/playground/r/9lTd52K/javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep
      origin: pro_rules
languages:
- javascript
- typescript
mode: taint
pattern-sources:
- label: TAINTED
  patterns:
  - pattern-either:
    - pattern-inside: function ... (...,$REQ, ...) {...}
  - pattern-either:
    - pattern: $REQ.query
    - pattern: $REQ.body
    - pattern: $REQ.params
    - pattern: $REQ.cookies
    - pattern: $REQ.headers
- label: TAINTED
  patterns:
  - pattern-either:
    - pattern-inside: '(...,{..., $REQ,... }: Request,...) => {...}

        '
    - pattern-inside: '(...,{..., $REQ,... }: $EXPRESS.Request,...) => {...}

        '
  - focus-metavariable: $REQ
  - pattern-either:
    - pattern: params
    - pattern: query
    - pattern: cookies
    - pattern: headers
    - pattern: body
- label: CONCAT
  requires: TAINTED
  patterns:
  - pattern-either:
    - pattern: '`...${$X}...`

        '
    - pattern: '$F + $X

        '
  - pattern-not: '`${$X}...`

      '
  - pattern-not: '"https://" + $X

      '
  - pattern-not: '"http://" + $X

      '
  - pattern-not: '"//" + $X

      '
  - pattern-not: '`http://${$X}...`

      '
  - pattern-not: '`https://${$X}...`

      '
  - pattern-not: '`//${$X}...`

      '
  - pattern-not: '$X + $F

      '
  - focus-metavariable: $X
pattern-sinks:
- requires: TAINTED and not CONCAT
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: $RES.redirect($QUERY,...)
      - focus-metavariable: $QUERY
    - patterns:
      - pattern-either:
        - pattern-inside: '(...,{..., redirect,... }: Response,...) => {...}

            '
        - pattern-inside: '(...,{..., redirect,... }: $EXPRESS.Response,...) => {...}

            '
      - pattern-inside: redirect($QUERY,...)
pattern-sanitizers:
- by-side-effect: true
  patterns:
  - pattern-either:
    - pattern-inside: "if (!$F.$REGEX($URL)) {\n...\n  return ...\n}\n...\n"
    - pattern-inside: 'if ($F.$REGEX($URL)) {

        ...

        }

        '
  - metavariable-regex:
      metavariable: $REGEX
      regex: ^(has|test)$
  - focus-metavariable: $URL
