id: go.gin.xss.gin-formatted-template-string-taint.formatted-template-string-taint
message: 'Untrusted input could be used to tamper with a web page rendering, which
  can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
  when untrusted input executes malicious JavaScript code, leading to issues such
  as account compromise and sensitive information leakage. To prevent this vulnerability,
  validate the user input, perform contextual output encoding or sanitize the input.
  For more information, see: [Go XSS prevention](https://semgrep.dev/docs/cheat-sheets/go-xss/).'
severity: WARNING
metadata:
  likelihood: MEDIUM
  impact: MEDIUM
  confidence: HIGH
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
    Scripting'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::sink::html-webpage::html/template
  - web::source::cookie::gin
  - web::source::form-data::gin
  - web::source::header::gin
  - web::source::http-body::gin
  - web::source::http-params::gin
  - web::source::url-path-params::gin
  owasp:
  - A03:2021 - Injection
  - A07:2017 - Cross-Site Scripting (XSS)
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - gin
  - go
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Cross-Site-Scripting (XSS)
  source: https://semgrep.dev/r/go.gin.xss.gin-formatted-template-string-taint.formatted-template-string-taint
  shortlink: https://sg.run/9958
  semgrep.dev:
    rule:
      r_id: 56867
      rv_id: 731858
      rule_id: ReU7Er
      version_id: YDTAKpQ
      url: https://semgrep.dev/playground/r/YDTAKpQ/go.gin.xss.gin-formatted-template-string-taint.formatted-template-string-taint
      origin: pro_rules
languages:
- go
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: 'import "github.com/gin-gonic/gin"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).$FIELD

            '
        - pattern: '($CONTEXT : *gin.Context).$FIELD

            '
      - metavariable-regex:
          metavariable: $FIELD
          regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
    - pattern-either:
      - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)

          '
      - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)

          '
pattern-sinks:
- patterns:
  - pattern-inside: 'import "html/template"

      ...

      '
  - pattern-either:
    - pattern: template.HTML(...)
    - pattern: template.HTMLAttr(...)
    - pattern: template.CSS(...)
    - pattern: template.JS(...)
    - pattern: template.JSStr(...)
    - pattern: template.Srcset(...)
    - pattern: template.URL(...)
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern-inside: 'import "github.com/microcosm-cc/bluemonday"

        ...

        '
    - pattern-inside: 'import "microcosm-cc/bluemonday"

        ...

        '
  - pattern-either:
    - patterns:
      - pattern-inside: '$P := bluemonday.$POLICY()

          ...

          '
      - pattern: $P.$SAN(...)
    - pattern: bluemonday.$POLICY().$SAN(...)
  - metavariable-regex:
      metavariable: $SAN
      regex: ^(Sanitize|SanitizeBytes)$
