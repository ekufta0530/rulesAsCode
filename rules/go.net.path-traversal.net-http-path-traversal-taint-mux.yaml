id: go.net.path-traversal.net-http-path-traversal-taint-mux.net-http-path-traversal-taint-mux
message: Untrusted input might be used to build a path, which can lead to a path traversal
  vulnerability. An attacker can manipulate the path which the application uses to
  access files. If the application does not validate user input and sanitize file
  paths, sensitive files can be accessed, such as configuration files or user data,
  potentially creating or overwriting files. To prevent this vulnerability, validate
  and sanitize any input that is used to create references to file paths. Also, enforce
  strict file access controls. For example, choose privileges allowing public-facing
  applications to access only the required files. In Go, it is possible to sanitize
  user input and mitigate path traversal by using the `SecureJoin` function in `filepath-securejoin`.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path Traversal'')'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - file::sink::file-access::archive/zip
  - file::sink::file-access::io/fs
  - file::sink::file-access::io/ioutil
  - file::sink::file-access::net/http
  - file::sink::file-access::os
  - web::source::cookie::net/http
  - web::source::form-data::net/http
  - web::source::header::net/http
  - web::source::http-body::net/http
  - web::source::http-params::net/http
  - web::source::session-properties::net/http
  - web::source::url-path-params::net/http
  owasp:
  - A01:2021 - Broken Access Control
  - A05:2017 - Broken Access Control
  references:
  - https://pkg.go.dev/net/http#ServeMux.Handler
  - https://owasp.org/www-community/attacks/Path_Traversal
  - https://portswigger.net/web-security/file-path-traversal
  technology:
  - go
  - go-net/http
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Path Traversal
  source: https://semgrep.dev/r/go.net.path-traversal.net-http-path-traversal-taint-mux.net-http-path-traversal-taint-mux
  shortlink: https://sg.run/jYjP
  semgrep.dev:
    rule:
      r_id: 56665
      rv_id: 111503
      rule_id: ReU7Al
      version_id: YDTpnKD
      url: https://semgrep.dev/playground/r/YDTpnKD/go.net.path-traversal.net-http-path-traversal-taint-mux.net-http-path-traversal-taint-mux
      origin: pro_rules
languages:
- go
mode: taint
options:
  symbolic_propagation: true
pattern-sources:
- label: USER_INPUT
  patterns:
  - pattern-either:
    - pattern: '($REQ : http.Request).$FIELD

        '
    - pattern: '($REQ : *http.Request).$FIELD

        '
  - pattern-not-inside: $REQ.URL.EscapedPath()
  - metavariable-regex:
      metavariable: $FIELD
      regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
- requires: USER_INPUT
  label: MUX
  patterns:
  - pattern-inside: '$MUX = http.NewServeMux()

      ...

      '
  - pattern-inside: '$MUX.HandleFunc(...)

      '
pattern-sinks:
- requires: MUX
  patterns:
  - pattern-not-inside: "if r.Method != http.MethodConnect{\n  ...\n}\n"
  - pattern-not-inside: "if r.Method == http.MethodConnect{\n  ...\n}\n...\n"
  - pattern-either:
    - patterns:
      - pattern-inside: 'import "net/http"

          ...

          '
      - pattern: 'http.FileSystem.$FUNC($F, $INPUT)

          '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Open)$
      - focus-metavariable: $INPUT
    - patterns:
      - pattern-inside: 'import "os"

          ...

          '
      - pattern: 'os.$FUNC($INPUT, ...)

          '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
      - focus-metavariable: $INPUT
    - patterns:
      - pattern-inside: 'import "io/fs"

          ...

          '
      - pattern: 'fs.$FUNC($FS, $INPUT, ...)

          '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Glob|ReadFile|WalkDir)$
      - focus-metavariable: $INPUT
    - patterns:
      - pattern-inside: 'import "io/ioutil"

          ...

          '
      - pattern: 'ioutil.$FUNC($INPUT)

          '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ReadFile)$
      - focus-metavariable: $INPUT
    - patterns:
      - pattern-inside: 'import "archive/zip"

          ...

          '
      - pattern-either:
        - patterns:
          - pattern-either:
            - patterns:
              - pattern-inside: '$W := zip.NewWriter(...)

                  ...

                  '
              - pattern: $W.$FUNC($INPUT)
            - pattern: '($W : *zip.Writer).$FUNC($INPUT)

                '
          - metavariable-regex:
              metavariable: $FUNC
              regex: ^(Create)$
        - patterns:
          - pattern-either:
            - patterns:
              - pattern-inside: '$R, ... := zip.NewReader(...)

                  ...

                  '
              - pattern: $R.$FUNC($INPUT)
            - pattern: '($R : *zip.Reader).$FUNC($INPUT)

                '
          - metavariable-regex:
              metavariable: $FUNC
              regex: ^(Open)$
      - focus-metavariable: $INPUT
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern-inside: 'import "path"

        ...

        '
    - pattern-inside: 'import "path/filepath"

        ...

        '
  - pattern-either:
    - pattern: '$P.Join("/", ..., $INPUT, ...)

        '
    - patterns:
      - pattern: $P.$SANFUNC($INPUT)
      - metavariable-regex:
          metavariable: $SANFUNC
          regex: ^(Abs|Base|Clean|Dir|Ext)$
  - metavariable-regex:
      metavariable: $P
      regex: ^(path|filepath)$
  - focus-metavariable: $INPUT
- patterns:
  - pattern-inside: 'import "io/fs"

      ...

      '
  - pattern: 'fs.ValidPath(...)

      '
