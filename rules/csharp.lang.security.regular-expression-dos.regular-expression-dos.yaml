id: csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos
severity: WARNING
languages:
- C#
metadata:
  cwe:
  - 'CWE-1333: Inefficient Regular Expression Complexity'
  owasp: A01:2017 - Injection
  references:
  - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
  - https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples
  category: security
  technology:
  - .net
  confidence: MEDIUM
  subcategory:
  - audit
  likelihood: LOW
  impact: MEDIUM
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Denial-of-Service (DoS)
  source: https://semgrep.dev/r/csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos
  shortlink: https://sg.run/RPyY
  semgrep.dev:
    rule:
      r_id: 12005
      rv_id: 109214
      rule_id: 4bU2gd
      version_id: ZRTQNWg
      url: https://semgrep.dev/playground/r/ZRTQNWg/csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos
      origin: community
message: When using `System.Text.RegularExpressions` to process untrusted input, pass
  a timeout.  A malicious user can provide input to `RegularExpressions` that abuses
  the backtracking behaviour of this regular expression engine. This will lead to
  excessive CPU usage, causing a Denial-of-Service attack
patterns:
- pattern-inside: 'using System.Text.RegularExpressions;

    ...

    '
- pattern-either:
  - pattern: "public $T $F($X)\n{\n  Regex $Y = new Regex($P);\n  ...\n  $Y.Match($X);\n\
      }\n"
  - pattern: "public $T $F($X)\n{\n  Regex $Y = new Regex($P, $O);\n  ...\n  $Y.Match($X);\n\
      }\n"
  - pattern: "public $T $F($X)\n{\n  ... Regex.Match($X, $P);\n}\n"
  - pattern: "public $T $F($X)\n{\n  ... Regex.Match($X, $P, $O);\n}\n"
