id: python.django.security.nan-injection.nan-injection
message: Found user input going directly into typecast for bool(), float(), or complex().
  This allows an attacker to inject Python's not-a-number (NaN) into the typecast.
  This results in undefind behavior, particularly when doing comparisons. Either cast
  to a different type, or add a guard checking for all capitalizations of the string
  'nan'.
languages:
- python
severity: ERROR
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
  - pattern-either:
    - pattern: request.$PROPERTY.get(...)
    - pattern: request.$PROPERTY[...]
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: float(...)
    - pattern: bool(...)
    - pattern: complex(...)
  - pattern-not-inside: "if $COND:\n  ...\n...\n"
pattern-sanitizers:
- pattern: $ANYTHING(...)
  not_conflicting: true
metadata:
  references:
  - https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868
  - https://blog.bitdiscovery.com/2021/12/python-nan-injection/
  category: security
  cwe:
  - 'CWE-704: Incorrect Type Conversion or Cast'
  technology:
  - django
  subcategory:
  - vuln
  impact: MEDIUM
  likelihood: MEDIUM
  confidence: MEDIUM
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Improper Validation
  source: https://semgrep.dev/r/python.django.security.nan-injection.nan-injection
  shortlink: https://sg.run/Og7L
  semgrep.dev:
    rule:
      r_id: 18275
      rv_id: 110238
      rule_id: DbUGvk
      version_id: RGTDkb9
      url: https://semgrep.dev/playground/r/RGTDkb9/python.django.security.nan-injection.nan-injection
      origin: community
