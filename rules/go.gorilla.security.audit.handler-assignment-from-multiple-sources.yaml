id: go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources
metadata:
  cwe:
  - 'CWE-289: Authentication Bypass by Alternate Name'
  category: security
  technology:
  - gorilla
  confidence: MEDIUM
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  references:
  - https://cwe.mitre.org/data/definitions/289.html
  subcategory:
  - audit
  impact: MEDIUM
  likelihood: LOW
  vulnerability_class:
  - Improper Authentication
  source: https://semgrep.dev/r/go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources
  shortlink: https://sg.run/gL3y
  semgrep.dev:
    rule:
      r_id: 9085
      rv_id: 109575
      rule_id: WAUoBk
      version_id: RGTDkZp
      url: https://semgrep.dev/playground/r/RGTDkZp/go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources
      origin: community
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: "func $HANDLER(..., $R *http.Request, ...) {\n  ...\n}\n"
  - focus-metavariable: $R
  - pattern-either:
    - pattern: $R.query
pattern-sinks:
- patterns:
  - pattern: '$Y, err := store.Get(...)

      ...

      $VAR := $Y.Values[...]

      ...

      $VAR = $R

      '
  - focus-metavariable: $R
- patterns:
  - pattern: '$Y, err := store.Get(...)

      ...

      var $VAR $INT = $Y.Values["..."].($INT)

      ...

      $VAR = $R

      '
  - focus-metavariable: $R
message: 'Variable $VAR is assigned from two different sources: ''$Y'' and ''$R''.
  Make sure this is intended, as this could cause logic bugs if they are treated as
  they are the same object.'
languages:
- go
severity: WARNING
