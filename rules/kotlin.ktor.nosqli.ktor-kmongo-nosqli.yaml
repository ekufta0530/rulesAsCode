id: kotlin.ktor.nosqli.ktor-kmongo-nosqli.ktor-kmongo-nosqli
message: Untrusted input might be used to build a database query, which can lead to
  a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. Make sure all user input is validated and sanitized,
  and avoid using tainted user input to construct NoSQL statements if possible. Ideally,
  avoid raw queries and instead use parameterized queries.
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
  functional-categories:
  - db::sink::sql-or-nosql-query::kmongo
  - web::source::cookie::Ktor
  - web::source::header::Ktor
  - web::source::http-params::Ktor
  - web::source::url-path-params::Ktor
  owasp:
  - A01:2017 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - kmongo
  - kotlin
  - ktor
  - mongo
  - nosql
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Improper Validation
  source: https://semgrep.dev/r/kotlin.ktor.nosqli.ktor-kmongo-nosqli.ktor-kmongo-nosqli
  shortlink: https://sg.run/Pd03
  semgrep.dev:
    rule:
      r_id: 59545
      rv_id: 731938
      rule_id: lBUkn6
      version_id: A8TeZkY
      url: https://semgrep.dev/playground/r/A8TeZkY/kotlin.ktor.nosqli.ktor-kmongo-nosqli.ktor-kmongo-nosqli
      origin: pro_rules
languages:
- kotlin
mode: taint
pattern-sources:
- label: no_processing_needed
  patterns:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: 'import io.ktor.server.*

              ...

              '
          - pattern-inside: 'import io.ktor.server.application

              ...

              '
        - pattern-either:
          - pattern: application.call.parameters
          - patterns:
            - pattern: application.call.receive(...)
            - pattern-not-inside: 'val $X: Int = application.call.receive(...)

                '
            - pattern-not-inside: 'val $X: Int = application.call.receive(...)

                '
          - patterns:
            - pattern: application.call.request.$F(...)
            - metavariable-regex:
                metavariable: $F
                regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
              - pattern: application.call.request.cookies.rawCookies
          - pattern: application.call.request.local.uri
      - patterns:
        - pattern-either:
          - pattern-inside: 'import io.ktor.server.application.*

              ...

              '
          - pattern-inside: 'import io.ktor.server.application.call

              ...

              '
        - pattern-either:
          - pattern: call.parameters
          - patterns:
            - pattern: call.receive(...)
            - pattern-not-inside: 'val $X: Int = call.receive(...)

                '
            - pattern-not-inside: 'val $X: Int = call.receive(...)

                '
          - patterns:
            - pattern: call.request.$F(...)
            - metavariable-regex:
                metavariable: $F
                regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
              - pattern: call.request.cookies.rawCookies
          - pattern: call.request.local.uri
- label: returns_url_encoded
  patterns:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: 'import io.ktor.server.*

              ...

              '
          - pattern-inside: 'import io.ktor.server.application

              ...

              '
        - patterns:
          - pattern-either:
            - patterns:
              - pattern: application.call.request.$F
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(uri)$
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(document|path|toLogString)$
      - patterns:
        - pattern-either:
          - pattern-inside: 'import io.ktor.server.application.*

              ...

              '
          - pattern-inside: 'import io.ktor.server.application.call

              ...

              '
        - patterns:
          - pattern-either:
            - patterns:
              - pattern: call.request.$F
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(uri)$
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(document|path|toLogString)$
- label: urldecode
  patterns:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: 'import java.*

              ...

              '
          - pattern-inside: 'import java.net

              ...

              '
        - patterns:
          - pattern: net.URLDecoder.decode($INPUT, ...)
          - focus-metavariable: $INPUT
      - patterns:
        - pattern-either:
          - pattern-inside: 'import java.net.*

              ...

              '
          - pattern-inside: 'import java.net.URLDecoder

              ...

              '
        - patterns:
          - pattern: URLDecoder.decode($INPUT, ...)
          - focus-metavariable: $INPUT
  requires: returns_url_encoded
- label: CONCAT
  patterns:
  - pattern-either:
    - pattern: '"...${...}..."

        '
    - pattern: '"...${...}...".$MD(...)

        '
    - pattern: '"..." + ...

        '
    - pattern: '... + "..."'
    - pattern: '"...${...}..." + ...

        '
    - pattern: '... + "...${...}..."'
    - pattern: String.format(...)
  requires: no_processing_needed or urldecode
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern-inside: 'import org.litote.kmongo.*

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.coroutine.*

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.reactivestreams.*

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.reactor.*

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.rxjava2.*

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.$METHOD

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.coroutine.$METHOD

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.reactivestreams.$METHOD

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.reactor.$METHOD

        ...

        '
    - pattern-inside: 'import org.litote.kmongo.rxjava2.$METHOD

        ...

        '
  - pattern-either:
    - pattern-inside: '$COL = $X.getCollection(...)

        ...

        '
    - pattern-inside: "class $CL(...) {\n  ...\n  val $COL = $X.getCollection(...)\n\
        \  ...\n}\n"
    - pattern: '($COL: MongoCollection<$Z>).$METHOD(...)

        '
  - metavariable-pattern:
      metavariable: $METHOD
      patterns:
      - pattern-either:
        - pattern: aggregate
        - pattern: bulkWrite
        - pattern: countDocuments
        - pattern: createIndex
        - pattern: deleteMany
        - pattern: deleteOne
        - pattern: distinct
        - pattern: dropIndex
        - pattern: dropIndexOfKeys
        - pattern: ensureIndex
        - pattern: find
        - pattern: findOne
        - pattern: findOneAndDelete
        - pattern: findOneAndReplace
        - pattern: findOneAndUpdate
        - pattern: insertOne
        - pattern: mapReduce
        - pattern: mapReduceWith
        - pattern: replaceOne
        - pattern: updateMany
        - pattern: updateOne
  - focus-metavariable: $QUERY
  - pattern-either:
    - pattern: $COL.$METHOD($QUERY,...)
    - pattern: $COL.$METHOD($SESSION, $QUERY,...)
  requires: CONCAT
pattern-sanitizers:
- patterns:
  - pattern: $X.$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
- pattern: '($X: boolean)

    '
- pattern: $X.json
