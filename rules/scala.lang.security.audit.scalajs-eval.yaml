id: scala.lang.security.audit.scalajs-eval.scalajs-eval
mode: taint
pattern-sources:
- patterns:
  - pattern: $PARAM
  - pattern-either:
    - pattern-inside: "def $CTRL(..., $PARAM: $TYPE, ...) = {\n  ...\n}\n"
    - pattern-inside: "def $CTRL(..., $PARAM: $TYPE, ...) = $A {\n  ...\n}\n"
    - pattern-inside: "def $CTRL(..., $PARAM: $TYPE, ...) = $A(...) {\n  ...\n}\n"
pattern-sinks:
- patterns:
  - pattern: $JS.eval(...)
  - pattern-inside: 'import scala.scalajs.$X

      ...

      '
message: "`eval()` function evaluates JavaScript code represented as a string. Executing\
  \ JavaScript from a string is an enormous security risk. It is far too easy for\
  \ a bad actor to run arbitrary code when you use `eval()`. Do not use eval(). Alternatively:\
  \ Ensure evaluated content is not definable by external sources. If it\u2019s not\
  \ possible, strip everything except alphanumeric characters from an input provided\
  \ for the command string and arguments."
metadata:
  references:
  - https://www.scala-js.org/doc/
  cwe:
  - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
  owasp:
  - A03:2021 - Injection
  category: security
  technology:
  - scala
  - scala-js
  confidence: LOW
  cwe2022-top25: true
  subcategory:
  - vuln
  likelihood: LOW
  impact: HIGH
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Code Injection
  source: https://semgrep.dev/r/scala.lang.security.audit.scalajs-eval.scalajs-eval
  shortlink: https://sg.run/R5L2
  semgrep.dev:
    rule:
      r_id: 20049
      rv_id: 110637
      rule_id: DbU2kJ
      version_id: 44TR62x
      url: https://semgrep.dev/playground/r/44TR62x/scala.lang.security.audit.scalajs-eval.scalajs-eval
      origin: community
languages:
- scala
severity: WARNING
