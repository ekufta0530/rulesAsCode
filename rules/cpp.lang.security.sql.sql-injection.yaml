id: cpp.lang.security.sql.sql-injection.sql-injection
message: Untrusted input might be used to build a database query, which can lead to
  a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. To prevent this vulnerability, use prepared statements
  that do not concatenate user-controllable strings and use parameterized queries
  where SQL commands and user data are strictly separated. Also, consider using an
  object-relational (ORM) framework to operate with safer abstractions.
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cert:
  - C
  - C++
  - L1
  - STR02-C
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - db::sink::sql-or-nosql-query
  - os::source::console
  - os::source::environment
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  - https://wiki.sei.cmu.edu/confluence/display/c/STR02-C.+Sanitize+data+passed+to+complex+subsystems
  technology:
  - cpp
  - sql
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/cpp.lang.security.sql.sql-injection.sql-injection
  shortlink: https://sg.run/ZqLBp
  semgrep.dev:
    rule:
      r_id: 114879
      rv_id: 257490
      rule_id: 3qUkR4v
      version_id: 3ZTpkYl
      url: https://semgrep.dev/playground/r/3ZTpkYl/cpp.lang.security.sql.sql-injection.sql-injection
      origin: pro_rules
languages:
- cpp
- c
mode: taint
min-version: 1.59.0
options:
  interfile: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- patterns:
  - pattern: "int main(int $ARGC, $ARGV_TY $ARGV, $ENVP_TY $ENVP) {\n  ...\n}\n"
  - focus-metavariable: $ENVP
- patterns:
  - pattern: "int main(int $ARGC, $ARGV_TY $ARGV, ...) {\n  ...\n}\n"
  - focus-metavariable: $ARGV
- pattern-either:
  - pattern: getenv(...)
  - pattern: std::getenv(...)
  - pattern: readline()
- by-side-effect: only
  patterns:
  - pattern-either:
    - pattern: gets($SRC)
    - pattern: fread($SRC, ...)
    - pattern: fgets($SRC, ...)
    - pattern: getline($SRC, ...)
    - pattern: getdelim($SRC, ...)
    - pattern: read($S_OR_FP, $SRC, ...)
    - pattern: msgrcv($QID, $SRC, ...)
  - focus-metavariable: $SRC
- pattern: gets(...)
- by-side-effect: only
  patterns:
  - pattern-either:
    - pattern: $X.get($SRC, ...)
    - pattern: $X.getline($SRC, ...)
    - pattern: $X.read($SRC, ...)
    - pattern: $X.readsome($SRC, ...)
  - metavariable-type:
      metavariable: $X
      types:
      - basic_ifstream<$TYPE>
      - std::basic_ifstream<$TYPE>
      - ifstream
      - std::ifstream
      - wifstream
      - std::wifstream
      - basic_ofstream<$TYPE>
      - std::basic_ofstream<$TYPE>
      - ofstream
      - std::ofstream
      - wofstream
      - std::wofstream
      - basic_fstream<$TYPE>
      - std::basic_fstream<$TYPE>
      - fstream
      - std::fstream
      - wfstream
      - std::wfstream
      - basic_filebuf<$TYPE>
      - std::basic_filebuf<$TYPE>
      - filebuf
      - std::filebuf
      - wfilebuf
      - std::wfilebuf
  - focus-metavariable: $SRC
- by-side-effect: only
  patterns:
  - pattern-either:
    - pattern: recv($S, $SRC, ...)
    - pattern: recvfrom($S, $SRC, ...)
    - pattern: recvmsg($S, $SRC, ...)
    - patterns:
      - pattern: curl_easy_setopt($CURL, CURLOPT_WRITEDATA, $SRC)
      - pattern-not: curl_easy_setopt($CURL, CURLOPT_WRITEDATA, $CURL)
  - focus-metavariable: $SRC
- pattern: mysql_fetch_row(...)
- by-side-effect: only
  patterns:
  - pattern: mysql_fetch_row_nonblocking($RESULT, &$ROW)
  - focus-metavariable: $ROW
- patterns:
  - pattern: $WT->body()
  - metavariable-type:
      metavariable: $WT
      types:
      - Wt::Http::Message*
      - Http::Message*
      - Wt::Mail::Message*
      - Mail::Message*
pattern-propagators:
- from: $FROM
  patterns:
  - pattern-either:
    - pattern: memccpy($TO, $FROM, ...)
    - pattern: memcpy($TO, $FROM, ...)
    - pattern: memcpy_s($TO, $TO_SIZE, $FROM, ...)
    - pattern: memmove($TO, $FROM, ...)
    - pattern: memmove_s($TO, $TO_SIZE, $FROM, ...)
    - pattern: snprintf($TO, $SIZE, $FORMAT, ..., $FROM, ...)
    - pattern: sprintf($TO, $FORMAT, ..., $FROM, ...)
    - pattern: stpcpy($TO, $FROM)
    - pattern: stpncpy($TO, $FROM, ...)
    - pattern: strcat($TO, $FROM)
    - pattern: strcpy($TO, $FROM)
    - pattern: strcpy_s($TO, $SIZE, $FROM)
    - pattern: strlcat($TO, $FROM, ...)
    - pattern: strlcpy($TO, $FROM, ...)
    - pattern: strncat($TO, $FROM, ...)
    - pattern: strncpy($TO, $FROM, ...)
    - pattern: strncpy_s($TO, $TO_SIZE, $FROM, ...)
    - pattern: strxfrm($TO, $FROM, ...)
  to: $TO
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern: $TO.append(..., $FROM, ...)
      - pattern: $TO.append_range($FROM)
      - pattern: $TO.assign($FROM, ...)
      - pattern: $TO.assign_range($FROM)
      - pattern: $TO.insert(..., $FROM, ...)
      - pattern: $TO.insert_range($POSITION, $FROM)
      - pattern: $TO.replace(..., $FROM, ...)
      - pattern: $TO.replace_with_range($FIRST, $LAST, $FROM)
      - pattern: $FROM.copy($TO, ...)
    - metavariable-type:
        metavariable: $TO
        types:
        - basic_string<$TYPE>
        - std::basic_string<$TYPE>
        - string
        - std::string
        - wstring
        - std::wstring
  to: $TO
- from: $FROM
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $TO.open($FROM, ...)
      - metavariable-type:
          metavariable: $TO
          types:
          - basic_ifstream<$TYPE>
          - std::basic_ifstream<$TYPE>
          - ifstream
          - std::ifstream
          - wifstream
          - std::wifstream
          - basic_ofstream<$TYPE>
          - std::basic_ofstream<$TYPE>
          - ofstream
          - std::ofstream
          - wofstream
          - std::wofstream
          - basic_fstream<$TYPE>
          - std::basic_fstream<$TYPE>
          - fstream
          - std::fstream
          - wfstream
          - std::wfstream
          - basic_filebuf<$TYPE>
          - std::basic_filebuf<$TYPE>
          - filebuf
          - std::filebuf
          - wfilebuf
          - std::wfilebuf
    - patterns:
      - pattern-either:
        - pattern: $FROM.get($TO, ...)
        - pattern: $FROM.getline($TO, ...)
        - pattern: $FROM.read($TO, ...)
        - pattern: $FROM.readsome($TO, ...)
      - metavariable-type:
          metavariable: $FROM
          types:
          - basic_ifstream<$TYPE>
          - std::basic_ifstream<$TYPE>
          - ifstream
          - std::ifstream
          - wifstream
          - std::wifstream
          - basic_ofstream<$TYPE>
          - std::basic_ofstream<$TYPE>
          - ofstream
          - std::ofstream
          - wofstream
          - std::wofstream
          - basic_fstream<$TYPE>
          - std::basic_fstream<$TYPE>
          - fstream
          - std::fstream
          - wfstream
          - std::wfstream
          - basic_filebuf<$TYPE>
          - std::basic_filebuf<$TYPE>
          - filebuf
          - std::filebuf
          - wfilebuf
          - std::wfilebuf
  to: $TO
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern: $FROM >> $TO
      - pattern: $FROM >> $_1 >> $TO
      - pattern: $FROM >> $_1 >> $_2 >> $TO
      - pattern: $FROM >> $_1 >> $_2 >> $_3 >> $TO
      - pattern: $FROM >> $_1 >> $_2 >> $_3 >> $_4 >> $TO
    - metavariable-type:
        metavariable: $FROM
        types:
        - basic_ifstream<$TYPE>
        - std::basic_ifstream<$TYPE>
        - ifstream
        - std::ifstream
        - wifstream
        - std::wifstream
        - basic_ofstream<$TYPE>
        - std::basic_ofstream<$TYPE>
        - ofstream
        - std::ofstream
        - wofstream
        - std::wofstream
        - basic_fstream<$TYPE>
        - std::basic_fstream<$TYPE>
        - fstream
        - std::fstream
        - wfstream
        - std::wfstream
        - basic_filebuf<$TYPE>
        - std::basic_filebuf<$TYPE>
        - filebuf
        - std::filebuf
        - wfilebuf
        - std::wfilebuf
        - basic_istringstream<$TYPE>
        - std::basic_istringstream<$TYPE>
        - istringstream
        - std::istringstream
        - wistringstream
        - std::wistringstream
        - basic_ostringstream<$TYPE>
        - std::basic_ostringstream<$TYPE>
        - ostringstream
        - std::ostringstream
        - wostringstream
        - std::wostringstream
        - basic_stringstream<$TYPE>
        - std::basic_stringstream<$TYPE>
        - stringstream
        - std::stringstream
        - wstringstream
        - std::wstringstream
  to: $TO
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern: $TO << $FROM
      - pattern: $TO << $_1 << $FROM
      - pattern: $TO << $_1 << $_2 << $FROM
      - pattern: $TO << $_1 << $_2 << $_3 << $FROM
      - pattern: $TO << $_1 << $_2 << $_3 << $_4 << $FROM
    - metavariable-type:
        metavariable: $TO
        types:
        - basic_ifstream<$TYPE>
        - std::basic_ifstream<$TYPE>
        - ifstream
        - std::ifstream
        - wifstream
        - std::wifstream
        - basic_ofstream<$TYPE>
        - std::basic_ofstream<$TYPE>
        - ofstream
        - std::ofstream
        - wofstream
        - std::wofstream
        - basic_fstream<$TYPE>
        - std::basic_fstream<$TYPE>
        - fstream
        - std::fstream
        - wfstream
        - std::wfstream
        - basic_filebuf<$TYPE>
        - std::basic_filebuf<$TYPE>
        - filebuf
        - std::filebuf
        - wfilebuf
        - std::wfilebuf
        - basic_istringstream<$TYPE>
        - std::basic_istringstream<$TYPE>
        - istringstream
        - std::istringstream
        - wistringstream
        - std::wistringstream
        - basic_ostringstream<$TYPE>
        - std::basic_ostringstream<$TYPE>
        - ostringstream
        - std::ostringstream
        - wostringstream
        - std::wostringstream
        - basic_stringstream<$TYPE>
        - std::basic_stringstream<$TYPE>
        - stringstream
        - std::stringstream
        - wstringstream
        - std::wstringstream
  to: $TO
pattern-sinks:
- patterns:
  - patterns:
    - pattern-either:
      - pattern: PQsendQuery($ARG1, $SRC, ...)
      - pattern: PQsendQueryParams($ARG1, $SRC, ...)
      - pattern: PQsendPrepare($ARG1, $ARG2, $SRC, ...)
      - pattern: PQsendQueryPrepared($ARG1, $ARG2, $ARG3, $SRC, ...)
      - pattern: PQexec($ARG1, $SRC)
      - pattern: PQexecParams($ARG1, $SRC, ...)
      - pattern: PQprepare($ARG1, $ARG2, $SRC, ...)
      - pattern: mysql_query($ARG1, $SRC)
      - pattern: mysql_real_query($ARG1, $SRC, ...)
      - pattern: mysql_real_query_nonblocking($ARG1, $SRC, ...)
      - pattern: mysql_drop_db($ARG1, $STR)
      - pattern: mysql_stmt_prepare($ARG1, $SRC, ...)
      - pattern: sqlite3_exec($ARG1, $SRC, ...)
      - pattern: sqlite3_prepare($ARG1, $SRC, ...)
      - pattern: sqlite3_prepare_v2($ARG1, $SRC, ...)
      - pattern: sqlite3_prepare_v3($ARG1, $SRC, ...)
      - pattern: sqlite3_prepare16($ARG1, $SRC, ...)
      - pattern: sqlite3_prepare16_v2($ARG1, $SRC, ...)
      - pattern: sqlite3_prepare16_v3($ARG1, $SRC, ...)
      - pattern: OCIStmtPrepare($ARG1, $ARG2, $SRC, ...)
      - pattern: OCIStmtPrepare2($ARG1, $ARG2, $ARG3, $SRC, ...)
      - pattern: SQLExecDirect($ARG1, $SRC, ...)
      - pattern: SQLPrepare($ARG1, $SRC, ...)
      - pattern: SQLExecDirect($ARG1, $SRC, ...)
      - pattern: SQLPrepare($ARG1, $SRC, ...)
      - patterns:
        - pattern-either:
          - pattern: $WORK.exec($SRC, ...)
          - pattern: $WORK.exec0($SRC, ...)
          - pattern: $WORK.exec1($SRC, ...)
          - pattern: $WORK.exec_n($ROWS, $SRC, ...)
        - metavariable-type:
            metavariable: $WORK
            type: pqxx::work
      - patterns:
        - pattern-either:
          - pattern: $CONN.prepare($SRC)
          - pattern: $CONN.prepare($NAME, $SRC)
        - metavariable-type:
            metavariable: $CONN
            type: pqxx::connection
    - focus-metavariable: $SRC
pattern-sanitizers:
- patterns:
  - pattern: $QUOTE(..., $SRC, ...)
  - metavariable-regex:
      metavariable: $QUOTE
      regex: (?i)^.*(escape|quote|sanitize).*$
  - focus-metavariable: $SRC
