id: rust.rocket.path-traversal.rust-rocket-path-traversal.rust-rocket-path-traversal
message: The application builds a file path from potentially untrusted data, which
  can lead to a path traversal vulnerability. An attacker can manipulate the path
  which the application uses to access files. If the application does not validate
  user input and sanitize file paths, sensitive files such as configuration or user
  data can be accessed, potentially creating or overwriting files. To prevent this
  vulnerability, validate and sanitize any input that is used to create references
  to file paths. Also, enforce strict file access controls. For example, choose privileges
  allowing public-facing applications to access only the required files.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path Traversal'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - file::sink::file-access::rocket
  - file::sink::file-access::std::fs
  - file::sink::file-access::std::os
  - file::sink::file-access::std::path
  - file::sink::file-access::tempfile
  - file::sink::file-access::tokio
  - web::source::cookie::rocket
  - web::source::form-data::rocket
  - web::source::header::rocket
  - web::source::http-body::rocket
  - web::source::http-params::rocket
  - web::source::url-path-params::rocket
  owasp:
  - A01:2021 - Broken Access Control
  - A05:2017 - Broken Access Control
  references:
  - https://owasp.org/Top10/A01_2021-Broken_Access_Control
  - https://owasp.org/www-community/attacks/Path_Traversal
  - https://portswigger.net/web-security/file-path-traversal
  technology:
  - rocket
  - rust
  - std::fs
  - std::os
  - std::path
  - tokio
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Path Traversal
  source: https://semgrep.dev/r/rust.rocket.path-traversal.rust-rocket-path-traversal.rust-rocket-path-traversal
  shortlink: https://sg.run/77oQ
  semgrep.dev:
    rule:
      r_id: 62138
      rv_id: 731994
      rule_id: yyUKnD
      version_id: RGTqZg2
      url: https://semgrep.dev/playground/r/RGTqZg2/rust.rocket.path-traversal.rust-rocket-path-traversal.rust-rocket-path-traversal
      origin: pro_rules
languages:
- rust
mode: taint
pattern-sources:
- label: INPUT
  pattern-either:
  - patterns:
    - pattern: $PARAM
    - pattern-either:
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : rocket::request::Form<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : rocket::http::Cookies,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &rocket::http::CookieJar<'$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : rocket::serde::json::Json<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : String, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &str, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &RawStr, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &OsStr, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : OsString, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<String>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&str>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&RawStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&OsStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<OsString>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<rocket::request::Form<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<rocket::http::Cookies>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&rocket::http::CookieJar<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<rocket::serde::json::Json<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<String>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&str>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&RawStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&OsStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<OsString>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<String>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&str>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&RawStr>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&OsStr>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<OsString>>,\
          \ ...) {\n  ...\n}\n"
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|put|post|delete|head|patch|options)$
  - patterns:
    - pattern: $PARAM
    - pattern-either:
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : $TYPE, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : $TYPE<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : $TYPE<'$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &$TYPE, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &$TYPE<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &$TYPE<'$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<$TYPE>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<$TYPE<$T>>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<$TYPE<'$T>>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&$TYPE>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&$TYPE<$T>>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&$TYPE<'$T>>>,\
          \ ...) {\n  ...\n}\n"
    - pattern-inside: 'struct $TYPE { ... };

        ...

        '
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|put|post|delete|head|patch|options)$
- label: REQUEST
  patterns:
  - pattern-either:
    - pattern-inside: "fn $FUNC(..., $REQ : &'r rocket::Request<'_>, ...) {\n  ...\n\
        }\n"
    - pattern-inside: "fn $FUNC(..., $REQ : &'r rocket::request::Request<'_>, ...)\
        \ {\n  ...\n}\n"
    - pattern-inside: "fn $FUNC(..., $REQ : &rocket::Request, ...) {\n  ...\n}\n"
    - pattern-inside: "fn $FUNC(..., $REQ : &rocket::request::Request, ...) {\n  ...\n\
        }\n"
- label: REQ_INPUT
  patterns:
  - pattern-either:
    - pattern: $R.path()
    - pattern: $R.query()
    - pattern: $R.map_path()
    - pattern: $R.clear_query()
    - pattern: $R.cookies()
    - pattern: $R.headers()
    - pattern: $R.query_value
pattern-sinks:
- patterns:
  - focus-metavariable: $PATH
  - pattern-either:
    - pattern: std::fs::File::open($PATH,...)
    - pattern: std::fs::File::create($PATH,...)
    - pattern: std::fs::File::create_new($PATH,...)
    - pattern: std::fs::File::$METHOD(...). ... .open($PATH,...)
    - pattern: std::fs::read($PATH,...)
    - pattern: std::fs::read_dir($PATH,...)
    - pattern: std::fs::read_link($PATH,...)
    - pattern: std::fs::read_to_string($PATH,...)
    - pattern: std::fs::copy($PATH,...)
    - pattern: std::fs::hard_link($PATH,...)
    - pattern: std::fs::soft_link($PATH,...)
    - pattern: std::os::unix::fs::symlink($PATH,...)
    - pattern: std::path::Path::new($PATH,...)
    - pattern: std::path::Path::new(...).join($PATH,...)
    - pattern: '($P: std::path::Path).join($PATH,...)

        '
    - pattern: std::path::PathBuf::from($PATH,...)
    - pattern: std::path::PathBuf::new(...).push($PATH,...)
    - pattern: '($P: std::path::PathBuf).push($PATH,...)

        '
    - pattern: tokio::fs::File::open($PATH,...)
    - pattern: tokio::fs::File::create($PATH,...)
    - pattern: tokio::fs::read($PATH,...)
    - pattern: tokio::fs::read_dir($PATH,...)
    - pattern: tokio::fs::read_link($PATH,...)
    - pattern: tokio::fs::read_to_string($PATH,...)
    - pattern: tokio::fs::copy($PATH,...)
    - pattern: tokio::fs::hard_link($PATH,...)
    - pattern: tokio::fs::soft_link($PATH,...)
    - pattern: rocket::response::NamedFile::open($PATH, ...)
    - pattern: rocket::fs::NamedFile::open($PATH, ...)
    - patterns:
      - pattern: '($T : rocket::fs::TempFile).$SAVE(...)

          '
      - metavariable-regex:
          metavariable: $SAVE
          regex: ^(persist_to|copy_to|move_copy_to)$
    - patterns:
      - pattern: '($T : tempfile::NamedTempFile).$SAVE(...)

          '
      - metavariable-regex:
          metavariable: $SAVE
          regex: ^(persist|persist_noclobber)$
  requires: INPUT or (REQUEST and REQ_INPUT)
