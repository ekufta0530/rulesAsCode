id: python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
languages:
- python
metadata:
  cwe:
  - 'CWE-522: Insufficiently Protected Credentials'
  owasp:
  - A02:2017 - Broken Authentication
  - A04:2021 - Insecure Design
  source-rule-url: https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  references:
  - https://cwe.mitre.org/data/definitions/522.html
  category: security
  technology:
  - jwt
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: MEDIUM
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Cryptographic Issues
  source: https://semgrep.dev/r/python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
  shortlink: https://sg.run/qxPy
  semgrep.dev:
    rule:
      r_id: 9556
      rv_id: 110289
      rule_id: 2ZUb1L
      version_id: qkT2xqz
      url: https://semgrep.dev/playground/r/qkT2xqz/python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
      origin: community
message: Password is exposed through JWT token payload. This is not encrypted and
  the password could be compromised. Do not store passwords in JWT tokens.
pattern-either:
- pattern: 'jwt.encode({...,"password":$P,...},...)

    '
- pattern: '$PAYLOAD = {...,"password":$P,...}

    ...

    jwt.encode($PAYLOAD,...)

    '
severity: ERROR
