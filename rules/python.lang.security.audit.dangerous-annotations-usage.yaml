id: python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
patterns:
- pattern: '$C.__annotations__[$NAME] = $X

    '
- pattern-not: '$C.__annotations__[$NAME] = "..."

    '
- pattern-not: '$C.__annotations__[$NAME] = typing.$Y

    '
- metavariable-regex:
    metavariable: $X
    regex: (?!(int|float|complex|list|tuple|range|str|bytes|bytearray|memoryview|set|frozenset|dict))
message: Annotations passed to `typing.get_type_hints` are evaluated in `globals`
  and `locals` namespaces. Make sure that no arbitrary value can be written as the
  annotation and passed to `typing.get_type_hints` function.
severity: INFO
metadata:
  cwe:
  - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (''Eval
    Injection'')'
  owasp:
  - A03:2021 - Injection
  category: security
  references:
  - https://docs.python.org/3/library/typing.html#typing.get_type_hints
  technology:
  - python
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Code Injection
  source: https://semgrep.dev/r/python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
  shortlink: https://sg.run/8R6J
  semgrep.dev:
    rule:
      r_id: 11940
      rv_id: 110363
      rule_id: 9AUkR3
      version_id: w8T9D1K
      url: https://semgrep.dev/playground/r/w8T9D1K/python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
      origin: community
languages:
- python
