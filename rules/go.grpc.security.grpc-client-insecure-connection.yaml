id: go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
metadata:
  cwe:
  - 'CWE-300: Channel Accessible by Non-Endpoint'
  references:
  - https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption
  category: security
  technology:
  - grpc
  confidence: HIGH
  owasp:
  - A07:2021 - Identification and Authentication Failures
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Other
  source: https://semgrep.dev/r/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
  shortlink: https://sg.run/J9yZ
  semgrep.dev:
    rule:
      r_id: 9090
      rv_id: 109580
      rule_id: PeUZ4X
      version_id: 0bTLlY6
      url: https://semgrep.dev/playground/r/0bTLlY6/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
      origin: community
message: 'Found an insecure gRPC connection using ''grpc.WithInsecure()''. This creates
  a connection without encryption to a gRPC server. A malicious attacker could tamper
  with the gRPC message, which could compromise the machine. Instead, establish a
  secure connection with an SSL certificate using the ''grpc.WithTransportCredentials()''
  function. You can create a create credentials using a ''tls.Config{}'' struct with
  ''credentials.NewTLS()''. The final fix looks like this: ''grpc.WithTransportCredentials(credentials.NewTLS(<config>))''.'
languages:
- go
severity: ERROR
pattern: $GRPC.Dial($ADDR, ..., $GRPC.WithInsecure(...), ...)
fix-regex:
  regex: (.*)WithInsecure\(.*?\)
  replacement: \1WithTransportCredentials(credentials.NewTLS(<your_tls_config_here>))
