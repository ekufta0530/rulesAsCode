id: php.doctrine.security.audit.doctrine-dbal-dangerous-query.doctrine-dbal-dangerous-query
languages:
- php
message: Detected string concatenation with a non-literal variable in a Doctrine DBAL
  query method. This could lead to SQL injection if the variable is user-controlled
  and not properly sanitized. In order to prevent SQL injection, use parameterized
  queries or prepared statements instead.
metadata:
  category: security
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html
  - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  technology:
  - doctrine
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: HIGH
  confidence: LOW
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/php.doctrine.security.audit.doctrine-dbal-dangerous-query.doctrine-dbal-dangerous-query
  shortlink: https://sg.run/KXWn
  semgrep.dev:
    rule:
      r_id: 13799
      rv_id: 110029
      rule_id: X5UdZj
      version_id: QkTW0qD
      url: https://semgrep.dev/playground/r/QkTW0qD/php.doctrine.security.audit.doctrine-dbal-dangerous-query.doctrine-dbal-dangerous-query
      origin: community
patterns:
- pattern-either:
  - pattern: $CONNECTION->prepare($QUERY,...)
  - pattern: $CONNECTION->createQuery($QUERY,...)
  - pattern: $CONNECTION->executeQuery($QUERY,...)
- pattern-either:
  - pattern-inside: 'use Doctrine\DBAL\Connection;

      ...

      '
  - pattern-inside: '$CONNECTION = $SMTH->getConnection(...);

      ...

      '
- pattern-not: $CONNECTION->prepare("...",...)
- pattern-not: $CONNECTION->createQuery("...",...)
- pattern-not: $CONNECTION->executeQuery("...",...)
severity: WARNING
