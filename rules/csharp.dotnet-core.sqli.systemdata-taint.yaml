id: csharp.dotnet-core.sqli.systemdata-taint.systemdata-taint
message: Untrusted input might be used to build a database query, which can lead to
  a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. To prevent this vulnerability, use prepared statements
  that do not concatenate user-controllable strings and use parameterized queries
  where SQL commands and user data are strictly separated. Also, consider using an
  object-relational (ORM) framework to operate with safer abstractions.
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - db::sink::sql-or-nosql-query::ADO
  - web::source::header::ASP.NET
  - web::source::http-body::ASP.NET
  - web::source::http-params::ASP.NET
  - web::source::url-path-params::ASP.NET
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - .NET
  - ado
  - ado.net
  - api
  - csharp
  - dotnet
  - mvc
  - sql
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/csharp.dotnet-core.sqli.systemdata-taint.systemdata-taint
  shortlink: https://sg.run/4EpL
  semgrep.dev:
    rule:
      r_id: 71600
      rv_id: 229192
      rule_id: ReUL1k
      version_id: rxT0dn5
      url: https://semgrep.dev/playground/r/rxT0dn5/csharp.dotnet-core.sqli.systemdata-taint.systemdata-taint
      origin: pro_rules
languages:
- csharp
mode: taint
options:
  interfile: true
pattern-sources:
- pattern-either:
  - patterns:
    - pattern-inside: 'using Microsoft.AspNetCore.Mvc;

        ...

        '
    - pattern: "public $TYPE $NAME(..., $X $VAR,...) {\n  ...\n}\n"
    - pattern-not: "[NonAction]\npublic $TYPE $NAME(..., $X $VAR,...) {\n  ...\n}\n"
    - pattern-not: "public $TYPE $NAME(..., [FromServices] $X $VAR, ...){\n  ...\n\
        }\n"
    - focus-metavariable: $VAR
    - metavariable-pattern:
        metavariable: $X
        patterns:
        - pattern-not-regex: (int|long|float|double|bool|Guid)
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: 'class $CN : Controller {...}

              '
          - pattern-inside: 'class $CN : ControllerBase {...}

              '
        - pattern-not-inside: '[NonController]

            class $CN : $T {...}

            '
      - patterns:
        - pattern-inside: class $CN {...}
        - pattern-not-inside: '[NonController]

            class $CN {...}

            '
        - metavariable-regex:
            metavariable: $CN
            regex: .*Controller
      - pattern-inside: '[Controller]

          class $CN {...}

          '
      - pattern-inside: '[ApiController]

          class $CN {...}

          '
  - patterns:
    - pattern-inside: 'using Microsoft.AspNetCore.Mvc;

        ...

        '
    - focus-metavariable: $VAR
    - pattern-either:
      - pattern-inside: $TYPE $NAME(..., [FromBody] $T $VAR, ...) { ... }
      - pattern-inside: $TYPE $NAME(..., [FromForm] $T $VAR, ...) { ... }
      - pattern-inside: $TYPE $NAME(..., [FromHeader] $T $VAR, ...) { ... }
      - pattern-inside: $TYPE $NAME(..., [FromQuery] $T $VAR, ...) { ... }
      - pattern-inside: $TYPE $NAME(..., [FromRoute] $T $VAR, ...) { ... }
      - pattern-inside: (..., [FromBody] $T $VAR, ...) => { ... }
      - pattern-inside: (..., [FromForm] $T $VAR, ...) => { ... }
      - pattern-inside: (..., [FromHeader] $T $VAR, ...) => { ... }
      - pattern-inside: (..., [FromQuery] $T $VAR, ...) => { ... }
      - pattern-inside: (..., [FromRoute] $T $VAR, ...) => { ... }
  - patterns:
    - pattern-either:
      - pattern: HttpContext.Request.Query
      - pattern: HttpContext.Request.QueryString
      - pattern: HttpContext.Request.Headers
      - pattern: HttpContext.Request.RouteValues
      - pattern: HttpContext.Request.Body
      - pattern: HttpContext.Request.BodyReader
      - pattern: HttpContext.Request.Form
      - pattern: $X.HttpContext.Request.Query
      - pattern: $X.HttpContext.Request.QueryString
      - pattern: $X.HttpContext.Request.Headers
      - pattern: $X.HttpContext.Request.RouteValues
      - pattern: $X.HttpContext.Request.Body
      - pattern: $X.HttpContext.Request.BodyReader
      - pattern: $X.HttpContext.Request.Form
      - pattern: (HttpContext $C).Request.Query
      - pattern: (HttpContext $C).Request.QueryString
      - pattern: (HttpContext $C).Request.Headers
      - pattern: (HttpContext $C).Request.RouteValues
      - pattern: (HttpContext $C).Request.Body
      - pattern: (HttpContext $C).Request.BodyReader
      - pattern: (HttpContext $C).Request.Form
      - pattern: (HttpRequest $R).Query
      - pattern: (HttpRequest $R).QueryString
      - pattern: (HttpRequest $R).Headers
      - pattern: (HttpRequest $R).RouteValues
      - pattern: (HttpRequest $R).Body
      - pattern: (HttpRequest $R).BodyReader
      - pattern: (HttpRequest $R).Form
pattern-propagators:
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern: (StringBuilder $TO).Append(..., $FROM,...)
      - pattern: (StringBuilder $TO).AppendLine(..., $FROM,...)
      - pattern: (StringBuilder $TO).AppendFormat(..., $FROM,...)
      - pattern: (StringBuilder $TO).AppendJoin(..., $FROM,...)
      - pattern: (StringBuilder $TO).Replace(..., $FROM,...)
      - pattern: (StringBuilder $TO).Insert(..., $FROM,...)
      - patterns:
        - pattern-either:
          - pattern: $TO.Append(..., $FROM,...)
          - pattern: $TO.AppendLine(..., $FROM,...)
          - pattern: $TO.AppendFormat(..., $FROM,...)
          - pattern: $TO.AppendJoin(..., $FROM,...)
          - pattern: $TO.Replace(..., $FROM,...)
          - pattern: $TO.Insert(..., $FROM,...)
        - pattern-either:
          - pattern-inside: 'var $TO = new StringBuilder(...);

              ...

              '
          - pattern-inside: '$TO = new StringBuilder(...);

              ...

              '
  to: $TO
pattern-sinks:
- patterns:
  - focus-metavariable: $QUERY
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: new SqlCommand($QUERY, ...)
        - pattern: (SqlCommand $C).CommandText = $QUERY
        - patterns:
          - pattern-either:
            - pattern-inside: '$TYPE $C = new SqlCommand(...);

                ...

                '
            - pattern-inside: 'var $C = new SqlCommand(...);

                ...

                '
            - pattern-inside: using ($TYPE $C = new SqlCommand(...)) {...}
            - pattern-inside: using (var $C = new SqlCommand(...)) {...}
          - pattern: $C.CommandText = $QUERY
      - pattern-inside: 'using System.Data.SqlClient;

          ...

          '
    - patterns:
      - pattern-either:
        - pattern: new OleDbCommand($QUERY, ...)
        - pattern: (OleDbCommand $C).CommandText = $QUERY
        - patterns:
          - pattern-either:
            - pattern-inside: '$TYPE $C = new OleDbCommand(...);

                ...

                '
            - pattern-inside: 'var $C = new OleDbCommand(...);

                ...

                '
            - pattern-inside: using ($TYPE $C = new OleDbCommand(...)) {...}
            - pattern-inside: using (var $C = new OleDbCommand(...)) {...}
          - pattern: $C.CommandText = $QUERY
      - pattern-inside: 'using System.Data.OleDb;

          ...

          '
    - patterns:
      - pattern-either:
        - pattern: new OdbcCommand($QUERY, ...)
        - pattern: (OdbcCommand $C).CommandText = $QUERY
        - patterns:
          - pattern-either:
            - pattern-inside: '$TYPE $C = new OdbcCommand(...);

                ...

                '
            - pattern-inside: 'var $C = new OdbcCommand(...);

                ...

                '
            - pattern-inside: using ($TYPE $C = new OdbcCommand(...)) {...}
            - pattern-inside: using (var $C = new OdbcCommand(...)) {...}
          - pattern: $C.CommandText = $QUERY
      - pattern-inside: 'using System.Data.Odbc;

          ...

          '
    - patterns:
      - focus-metavariable: $QUERY
      - pattern-either:
        - pattern-inside: '$TYPE $C = $CONN.CreateCommand(...);

            ...

            '
        - pattern-inside: 'var $C = $CONN.CreateCommand(...);

            ...

            '
        - pattern-inside: using ($TYPE $C = $CONN.CreateCommand(...)) {...}
        - pattern-inside: using (var $C = $CONN.CreateCommand(...)) {...}
      - pattern: $C.CommandText = $QUERY
pattern-sanitizers:
- patterns:
  - pattern: Convert.$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (ToBase64CharArray|ToBase64String|ToBoolean|ToDateTime|ToDecimal|ToDouble|ToInt16|ToInt32|ToInt64|ToSByte|ToSingle|ToUInt16|ToUInt32|ToUInt64)
- patterns:
  - pattern-either:
    - pattern: $INT.Parse(...)
    - pattern: $INT.TryParse(...)
    - pattern: $INT.TryParseExact(...)
  - metavariable-regex:
      metavariable: $INT
      regex: (Int32|Int128|Int16|Int64|IntPtr|Boolean|Decimal|Double|Guid|DateTime|Single|SByte|UInt128|UInt16|UInt32|UInt64|UIntPtr)
- patterns:
  - pattern-either:
    - pattern: (int $NUM)
    - pattern: (long $NUM)
    - pattern: (float $NUM)
    - pattern: (double $NUM)
    - pattern: (bool $NUM)
    - pattern: (Guid $NUM)
    - pattern: var $X = (int) ...;
    - pattern: var $X = (long) ...;
    - pattern: var $X = (float) ...;
    - pattern: var $X = (double) ...;
    - pattern: var $X = (bool) ...;
    - pattern: var $X = (Guid) ...;
