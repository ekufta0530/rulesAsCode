id: javascript.express.pg.express-pg-sqli.express-pg-sqli
message: Untrusted input might be used to build a database query, which can lead to
  a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. To prevent this vulnerability, use prepared statements
  that do not concatenate user-controllable strings and use parameterized queries
  where SQL commands and user data are strictly separated. Also, consider using an
  object-relational (ORM) framework to operate with safer abstractions.
severity: WARNING
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::source::cookie::express
  - web::source::http-params::express
  - web::source::http-body::express
  - web::source::header::express
  - web::source::url-path-params::express
  - db::sink::sql-or-nosql-query::pg
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://www.npmjs.com/package/pg
  - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  technology:
  - pg
  - express
  - nodejs
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/javascript.express.pg.express-pg-sqli.express-pg-sqli
  shortlink: https://sg.run/4Ko9
  semgrep.dev:
    rule:
      r_id: 28088
      rv_id: 111671
      rule_id: KxUKRg
      version_id: yeTRZ8w
      url: https://semgrep.dev/playground/r/yeTRZ8w/javascript.express.pg.express-pg-sqli.express-pg-sqli
      origin: pro_rules
languages:
- javascript
- typescript
mode: taint
pattern-sources:
- patterns:
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - patterns:
      - pattern-either:
        - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
        - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(get|post|put|head|delete|options)$
  - pattern-either:
    - pattern: $REQ.query
    - pattern: $REQ.body
    - pattern: $REQ.params
    - pattern: $REQ.cookies
    - pattern: $REQ.headers
- patterns:
  - pattern-either:
    - pattern-inside: '({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
        {...}

        '
    - pattern-inside: '({ $REQ }: Request,$RES: Response) => {...}

        '
  - focus-metavariable: $REQ
  - pattern-either:
    - pattern: params
    - pattern: query
    - pattern: cookies
    - pattern: headers
    - pattern: body
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern-inside: 'import $S from "pg"

        ...

        '
    - pattern-inside: 'import { ...,$S,... } from "pg"

        ...

        '
    - pattern-inside: 'import * as $S from "pg"

        ...

        '
    - pattern-inside: '$S =  require("pg")

        ...

        '
  - pattern-either:
    - pattern-inside: '$POOL = new $S(...)

        ...

        '
    - pattern-inside: '$POOL = new $S.$FUNC(...)

        ...

        '
  - pattern: '$POOL. ... .query($QUERY,...)

      '
  - focus-metavariable: $QUERY
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern: parseInt(...)
    - pattern: Number.parseInt(...)
