id: javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
message: If unverified user data can reach the `evaluate` method it can result in
  Server-Side Request Forgery vulnerabilities
metadata:
  owasp:
  - A10:2021 - Server-Side Request Forgery (SSRF)
  cwe:
  - 'CWE-918: Server-Side Request Forgery (SSRF)'
  category: security
  technology:
  - playwright
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  confidence: LOW
  references:
  - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Server-Side Request Forgery (SSRF)
  source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
  shortlink: https://sg.run/EkJB
  semgrep.dev:
    rule:
      r_id: 9337
      rv_id: 109960
      rule_id: JDUyxl
      version_id: xyTKZrn
      url: https://semgrep.dev/playground/r/xyTKZrn/javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
      origin: community
languages:
- javascript
- typescript
severity: WARNING
patterns:
- pattern-inside: 'require(''playwright'');

    ...

    '
- pattern-not-inside: 'var $INPUT = function $FNAME(...){...};

    ...

    '
- pattern-either:
  - pattern: $PAGE.evaluate($INPUT,...)
  - pattern: $PAGE.evaluateHandle($INPUT,...)
  - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
- pattern-not: $PAGE.evaluate("...",...)
- pattern-not: $PAGE.evaluate(function(...){...},...)
- pattern-not: $PAGE.evaluateHandle("...",...)
- pattern-not: $PAGE.evaluateHandle(function(...){...},...)
- pattern-not: $PAGE.evaluateOnNewDocument("...",...)
- pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
