id: python.django.deserialization.tainted-ruamel-django.tainted-ruamel-django
message: 'The application may convert user-controlled data into an object, which can
  lead to an insecure deserialization vulnerability. An attacker can create a malicious
  serialized object, pass it to the application, and take advantage of the deserialization
  process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass
  access control measures. To prevent this vulnerability, leverage data formats such
  as JSON or XML as safer alternatives. If you need to deserialize user input in a
  specific format, consider digitally signing the data before serialization to prevent
  tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  Starting from `ruamel.yaml` version 0.15.0 The default loader (`typ=''rt''`) is
  a direct derivative of the safe loader. Before this version, use the optional argument
  `Loader` with value `SafeLoader` or `CSafeLoader`, or use the `safe_load` function.'
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::ruamel.yaml
  - web::source::cookie::django
  - web::source::http-params::django
  - web::source::http-body::django
  - web::source::header::django
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://portswigger.net/web-security/deserialization
  - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
  - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
  - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
  - https://cwe.mitre.org/data/definitions/502.html
  related_oss_rules:
  - python.lang.security.deserialization.avoid-unsafe-ruamel
  technology:
  - python
  - django
  - yaml
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/python.django.deserialization.tainted-ruamel-django.tainted-ruamel-django
  shortlink: https://sg.run/doJP
  semgrep.dev:
    rule:
      r_id: 44934
      rv_id: 111824
      rule_id: 5rUKyN
      version_id: 2KTz3J6
      url: https://semgrep.dev/playground/r/2KTz3J6/python.django.deserialization.tainted-ruamel-django.tainted-ruamel-django
      origin: pro_rules
languages:
- python
mode: taint
options:
  symbolic_propagation: true
pattern-sources:
- label: USER_INPUT
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-either:
          - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC(...,\
              \ $REQ, ...):\n  ...\n"
          - patterns:
            - pattern-either:
              - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                  \  ...\n"
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n\
                  ...):\n  ...                              \n"
            - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern-inside: "def $VIEW($REQ, ...):\n  ...\n  return django.shortcuts.render($REQ,\
              \ ...)\n"
          - pattern-inside: "def $VIEW($REQ, ...):\n  ...\n  return django.shortcuts.redirect(...)\n"
          - pattern-inside: "def $VIEW($REQ, ...):\n  ...\n  return django.http.HttpResponseRedirect(...)\n"
          - pattern-inside: '$REQ = django.http.HttpRequest()

              ...

              '
      - pattern-either:
        - patterns:
          - pattern: $REQ.$FUNCTION(...)
          - metavariable-regex:
              metavariable: $FUNCTION
              regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
        - patterns:
          - pattern-either:
            - pattern: $REQ.$PROPERTY
            - pattern: $REQ.$PROPERTY[...]
            - pattern: $REQ.$PROPERTY.get(...)
          - metavariable-regex:
              metavariable: $PROPERTY
              regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
    - patterns:
      - pattern-either:
        - pattern-inside: "def $VIEW($REQ, ..., $PARAM, ...):\n  ...\n  return django.shortcuts.render($REQ,\
            \ ...)\n"
        - pattern-inside: "def $VIEW($REQ, ..., $PARAM, ...):\n  ...\n  return django.shortcuts.redirect(...)\n"
        - pattern-inside: "def $VIEW($REQ, ..., $PARAM, ...):\n  ...\n  return django.http.HttpResponseRedirect(...)\n"
      - focus-metavariable: $PARAM
- label: TYP_UNSAFE
  pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
pattern-sinks:
- requires: USER_INPUT
  patterns:
  - pattern: ruamel.yaml.$FUNC($SINK)
  - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.SafeLoader, ...)
  - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.CSafeLoader, ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: ^(load|load_all|round_trip_load)$
- requires: USER_INPUT and TYP_UNSAFE
  patterns:
  - pattern: $YAML.load($SINK)
