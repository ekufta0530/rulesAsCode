id: javascript.express.express-child-process.express-child-process
message: Untrusted input might be injected into a command executed by the application,
  which can lead to a command injection vulnerability. An attacker can execute arbitrary
  commands, potentially gaining complete control of the system. To prevent this vulnerability,
  avoid executing OS commands with user input. If this is unavoidable, validate and
  sanitize the user input, and use safe methods for executing the commands. For more
  information, see [Command injection prevention for JavaScript ](https://semgrep.dev/docs/cheat-sheets/javascript-command-injection/).
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: MEDIUM
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
    Command Injection'')'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::source::cookie::express
  - web::source::http-params::express
  - web::source::http-body::express
  - web::source::header::express
  - web::source::url-path-params::express
  - os::sink::os-command-or-thread:nodejs.child_process
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions
  source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
  technology:
  - javascript
  - express
  - nodejs
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Command Injection
  source: https://semgrep.dev/r/javascript.express.express-child-process.express-child-process
  shortlink: https://sg.run/9p1R
  semgrep.dev:
    rule:
      r_id: 28867
      rv_id: 111665
      rule_id: L1Uk12
      version_id: pZT1LoY
      url: https://semgrep.dev/playground/r/pZT1LoY/javascript.express.express-child-process.express-child-process
      origin: pro_rules
languages:
- javascript
- typescript
mode: taint
options:
  symbolic_propagation: true
pattern-sources:
- patterns:
  - pattern-either:
    - pattern-inside: function ... (...,$REQ, ...) {...}
  - pattern-either:
    - pattern: $REQ.query
    - pattern: $REQ.body
    - pattern: $REQ.params
    - pattern: $REQ.cookies
    - pattern: $REQ.headers
- patterns:
  - pattern-either:
    - pattern-inside: '(...,{ $REQ }: Request,...) => {...}

        '
    - pattern-inside: '(...,{ $REQ }: $EXPRESS.Request,...) => {...}

        '
  - focus-metavariable: $REQ
  - pattern-either:
    - pattern: params
    - pattern: query
    - pattern: cookies
    - pattern: headers
    - pattern: body
pattern-sinks:
- patterns:
  - pattern: child_process.$EXEC($CMD,...)
  - metavariable-regex:
      metavariable: $EXEC
      regex: ^(exec|execSync|spawn|spawnSync)$
  - pattern-not-inside: child_process.$EXEC("...",...)
  - pattern-not-inside: child_process.$EXEC(["...",...],...)
  - pattern-not-inside: '$CMD = "..."

      ...

      '
  - pattern-not-inside: '$CMD = ["...",...]

      ...

      '
  - focus-metavariable: $CMD
- patterns:
  - pattern-either:
    - pattern-inside: '$CP = require("child_process").$EXEC

        ...

        '
    - pattern-inside: '$CP = require("child_process")

        ...

        '
    - pattern-inside: 'import $CP = require("child_process");

        ...

        '
  - metavariable-regex:
      metavariable: $EXEC
      regex: ^(exec|execSync|spawn|spawnSync)$
  - pattern-either:
    - pattern: $CP($CMD,...)
    - pattern: $CP.$EXEC($CMD,...)
  - focus-metavariable: $CMD
  - pattern-not-inside: $CP("...",...)
  - pattern-not-inside: $CP(["...",...],...)
  - pattern-not-inside: $CP.$EXEC("...",...)
  - pattern-not-inside: $CP.$EXEC(["...",...],...)
