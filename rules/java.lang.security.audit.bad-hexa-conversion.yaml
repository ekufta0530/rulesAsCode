id: java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
metadata:
  cwe:
  - 'CWE-704: Incorrect Type Conversion or Cast'
  owasp: A03:2017 - Sensitive Data Exposure
  source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION
  category: security
  technology:
  - java
  references:
  - https://cwe.mitre.org/data/definitions/704.html
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Improper Validation
  source: https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
  shortlink: https://sg.run/1Z7D
  semgrep.dev:
    rule:
      r_id: 9166
      rv_id: 109681
      rule_id: v8Uny0
      version_id: 0bTLlDP
      url: https://semgrep.dev/playground/r/0bTLlDP/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
      origin: community
message: '''Integer.toHexString()'' strips leading zeroes from each byte if read byte-by-byte.
  This mistake weakens the hash value computed since it introduces more collisions.
  Use ''String.format("%02X", ...)'' instead.'
severity: WARNING
languages:
- java
pattern: "$X $METHOD(...) {\n  ...\n  MessageDigest $MD = ...;\n  ...\n  $MD.digest(...);\n\
  \  ...\n  Integer.toHexString(...);\n}"
