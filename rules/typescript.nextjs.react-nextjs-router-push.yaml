id: typescript.nextjs.react-nextjs-router-push.react-nextjs-router-push
message: Untrusted input could be used to tamper with a web page rendering, which
  can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
  when untrusted input executes malicious JavaScript code, leading to issues such
  as account compromise and sensitive information leakage. To prevent this vulnerability,
  validate URLs and their protocol before using them in your codebase.
severity: WARNING
metadata:
  likelihood: HIGH
  impact: MEDIUM
  confidence: HIGH
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
    Scripting'')'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::source::http-params::nextjs
  - web::source::url-path-params::nextjs
  - web::sink::html-webpage::react
  owasp:
  - A07:2017 - Cross-Site Scripting (XSS)
  - A03:2021 - Injection
  references:
  - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
  - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
  - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
  technology:
  - react
  - nextjs
  - browser
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Cross-Site-Scripting (XSS)
  source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-push.react-nextjs-router-push
  shortlink: https://sg.run/KA37
  semgrep.dev:
    rule:
      r_id: 27211
      rv_id: 112050
      rule_id: 3qU4le
      version_id: 3ZTkrNz
      url: https://semgrep.dev/playground/r/3ZTkrNz/typescript.nextjs.react-nextjs-router-push.react-nextjs-router-push
      origin: pro_rules
languages:
- typescript
- javascript
mode: taint
pattern-sources:
- patterns:
  - pattern-either:
    - pattern-inside: 'import { ...,$IMPORT,... } from ''next/router''

        ...

        '
    - pattern-inside: 'import $IMPORT from ''next/router'';

        ...

        '
  - pattern-either:
    - patterns:
      - pattern-inside: '$ROUTER = $IMPORT()

          ...

          '
      - pattern-either:
        - pattern-inside: 'var { ...,$PROPS,... } = $ROUTER.query

            ...

            '
        - pattern-inside: 'const { ...,$PROPS,... } = $ROUTER.query

            ...

            '
        - pattern-inside: 'let { ...,$PROPS,... } = $ROUTER.query

            ...

            '
      - focus-metavariable: $PROPS
    - patterns:
      - pattern-inside: '$ROUTER = $IMPORT()

          ...

          '
      - pattern: "$ROUTER.query.$VALUE \n"
    - patterns:
      - pattern: $IMPORT().query.$VALUE
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern-inside: '$ROUTER.replace($X)

        '
    - pattern-inside: '$ROUTER.replace(`$X`)

        '
    - pattern-inside: '$ROUTER.push(`$X`)

        '
    - pattern-inside: '$ROUTER.push($X)

        '
  - focus-metavariable: $X
pattern-sanitizers:
- patterns:
  - pattern: '`...`

      '
  - pattern-not: '`${$VALUE}...`

      '
- patterns:
  - pattern: '"..." + $ANYTHING

      '
