id: java.servlets.security.servletresponse-writer-xss.servletresponse-writer-xss
message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
  scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes
  malicious JavaScript code, leading to issues such as account compromise and sensitive
  information leakage. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml:
  `Encode.forHtml($VAR)`.'
severity: ERROR
metadata:
  likelihood: HIGH
  impact: MEDIUM
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
    Scripting'')'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::source::cookie::Servlet
  - web::source::http-params::Servlet
  - web::source::http-body::Servlet
  - web::source::header::Servlet
  - web::source::url-path-params::Servlet
  - web::source::form-data::Servlet
  - web::source::session-properties::Servlet
  - web::sink::direct-response::Servlet
  owasp:
  - A07:2017 - Cross-Site Scripting (XSS)
  - A03:2021 - Injection
  references:
  - https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
  - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
  - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Fstored
  - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Freflected
  source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
  technology:
  - java
  - servlets
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Cross-Site-Scripting (XSS)
  source: https://semgrep.dev/r/java.servlets.security.servletresponse-writer-xss.servletresponse-writer-xss
  shortlink: https://sg.run/O0rn
  semgrep.dev:
    rule:
      r_id: 27175
      rv_id: 111598
      rule_id: BYUkXg
      version_id: DkT6YgR
      url: https://semgrep.dev/playground/r/DkT6YgR/java.servlets.security.servletresponse-writer-xss.servletresponse-writer-xss
      origin: pro_rules
languages:
- java
mode: taint
pattern-sources:
- patterns:
  - pattern-either:
    - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
    - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - patterns:
      - pattern-inside: "(javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest\
          \ $REQ).getCookies(...);\n...\nfor (javax.servlet.http.Cookie $COOKIE: $COOKIES)\
          \ {\n  ...\n}\n"
      - pattern: '$COOKIE.getValue(...)

          '
    - patterns:
      - pattern-inside: '$TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);

          ...

          '
      - pattern: '$PARAM = $VALS[$INDEX];

          '
  - pattern-not: "$REQ.getUserPrincipal() \n"
  - pattern-not: "$REQ.getSession(...) \n"
  - pattern-not: "$REQ.getAuthType(...) \n"
  - pattern-not: "$REQ.getMethod(...) \n"
  - pattern-not: "$REQ.getLocales(...) \n"
  - pattern-not: "$REQ.getLocale(...) \n"
  - pattern-not: "$REQ.isUserinRole(...) \n"
  - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
  - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
  - pattern-not: "$REQ.getIntHeader(...) \n"
  - pattern-not: "$REQ.getDateHeader(...) \n"
  - pattern-not: "$REQ.authenticate(...) \n"
  - pattern-not: "$REQ.isUserInRole(...) \n"
  - pattern-not: '$REQ.getAttribute(...)

      '
  - pattern-not: '$REQ.getAttributeNames(...)

      '
  - pattern-not: '$REQ.getAuthType(...)

      '
pattern-sinks:
- pattern: '(PrintWriter $WRITER).write(...);

    '
- pattern: '$RESP.getWriter().write(...);

    '
pattern-sanitizers:
- pattern: Encode.forHtml(...)
- pattern: (PolicyFactory $POLICY).sanitize(...)
- pattern: (AntiSamy $AS).scan(...)
- pattern: Jsoup.clean(...)
- pattern: new Cleaner(...).clean(...)
- pattern: '(Cleaner $CL).clean(...)

    '
