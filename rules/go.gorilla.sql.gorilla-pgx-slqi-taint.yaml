id: go.gorilla.sql.gorilla-pgx-slqi-taint.gorilla-pgx-sqli-taint
message: Untrusted input might be used to build a database query, which can lead to
  a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. Create parameterized queries in pgx by using positional
  parameters (`$1`, `$2`, ...) and adding the values as additional arguments to the
  function call. It is also possible to create prepared statements through the `Prepare`
  function. This function uses the same placeholders for bound parameters.
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - db::search::password::database
  - db::search::password::gorm
  - db::search::password::mysql
  - db::search::password::pg
  - db::search::password::pgx
  - db::sink::sql-or-nosql-query::pgx
  - net::source::network-connection::gorilla
  - web::source::cookie::gorilla
  - web::source::form-data::gorilla
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://github.com/jackc/pgx
  - https://owasp.org/Top10/A03_2021-Injection
  - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
  technology:
  - github.com/gorilla/rpc/v2
  - github.com/gorilla/schema
  - github.com/gorilla/securecookie
  - github.com/gorilla/sessions
  - github.com/gorilla/websocket
  - go-pgx
  - gorilla
  - gorilla/rpc
  - gorilla/schema
  - gorilla/securecookie
  - gorilla/sessions
  - gorilla/websocket
  - pgx
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/go.gorilla.sql.gorilla-pgx-slqi-taint.gorilla-pgx-sqli-taint
  shortlink: https://sg.run/kdoe
  semgrep.dev:
    rule:
      r_id: 59528
      rv_id: 731864
      rule_id: 8GURwd
      version_id: X0Tg0Qx
      url: https://semgrep.dev/playground/r/X0Tg0Qx/go.gorilla.sql.gorilla-pgx-slqi-taint.gorilla-pgx-sqli-taint
      origin: pro_rules
languages:
- go
mode: taint
pattern-sources:
- label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/schema"

      ...

      '
  - pattern-inside: '$DECODER = schema.NewDecoder()

      ...

      '
  - pattern-inside: '$DECODER.Decode(&$TO, ...)

      ...

      '
  - pattern: $TO
- label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/securecookie"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-inside: '$COOKIE = securecookie.New(...)

          ...

          '
      - pattern-inside: '$COOKIE.Decode($NAME, $C, &$VALUE)

          ...

          '
    - pattern-inside: 'securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)

        ...

        '
  - pattern: $VALUE
- label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/sessions"

      ...

      '
  - pattern-inside: '$STORE = sessions.NewCookieStore(...)

      ...

      '
  - pattern-inside: '$SESSION, ... = $STORE.Get(...)

      ...

      '
  - pattern: $SESSION.Values
- by-side-effect: true
  label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/websocket"

      ...

      '
  - pattern-inside: '$UPGRADER = websocket.Upgrader{...}

      ...

      '
  - pattern-inside: '$CONN, ... = $UPGRADER.Upgrade(...)

      ...

      '
  - pattern-either:
    - patterns:
      - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ReadMessage|ReadJSON)$
      - focus-metavariable: $BYTES
    - patterns:
      - pattern-inside: '$TYPE, $READER, $ERR = $CONN.NextReader()

          ...

          '
      - pattern: $READER.Read($VAR)
      - focus-metavariable: $VAR
    - patterns:
      - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
      - focus-metavariable: $READER
- label: IMPORTSQL
  pattern-either:
  - pattern: 'import "database/sql"

      ...

      '
  - pattern: 'import "github.com/go-sql-driver/mysql"

      ...

      '
  - pattern: 'import "gorm.io/driver/mysql"

      ...

      '
  - pattern: 'import "gorm.io/driver/postgres"

      ...

      '
  - pattern: 'import "gorm.io/driver/clickhouse"

      ...

      '
- label: SPRINTF
  patterns:
  - pattern-inside: 'import "fmt"

      ...

      '
  - pattern: fmt.$P("...", $REQ, ...)
  - metavariable-regex:
      metavariable: $P
      regex: ^(Sprint|Sprintf|Sprintln)$
  requires: USERINPUT
- label: CONCAT
  pattern-either:
  - pattern: '"$A" + $B

      '
  - pattern: $A + "$B"
  - pattern: '"$A" += $B

      '
  - pattern: $A += "$B"
  requires: USERINPUT
- label: PREPARE
  patterns:
  - pattern-either:
    - pattern: '($DB : $DBTYPE).Prepare(...)

        '
    - pattern: '($DB : $DBTYPE).SafeQuery(...)

        '
  - metavariable-regex:
      metavariable: $DBTYPE
      regex: ^((\*)?sql.(Conn|DB|Tx))$
  requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
- label: PREPARECONN
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DB := sql.$OPEN(...)

          ...

          '
      - pattern-inside: '$DB, ... := sql.$OPEN(...)

          ...

          '
    - metavariable-regex:
        metavariable: $OPEN
        regex: ^(Open|OpenDB)$
  - pattern-either:
    - pattern: $DB.Prepare(...)
    - pattern: $DB.SafeQuery(...)
  requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
- label: IMPORTPGX
  patterns:
  - pattern-inside: 'import "$IMPORT"

      ...

      '
  - metavariable-regex:
      metavariable: $IMPORT
      regex: (.*jackc\/pgx\/v(4|5).*)
pattern-sinks:
- patterns:
  - pattern: '($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)

      '
  - metavariable-regex:
      metavariable: $CONNTYPE
      regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|Query|QueryFunc|QueryRow)$
  - focus-metavariable: $QUERY
  requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
- patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DB := pgx.$CONNECT(...)

          ...

          '
      - pattern-inside: '$DB, ... := pgx.$CONNECT(...)

          ...

          '
    - metavariable-regex:
        metavariable: $CONNECT
        regex: ^(Connect|NewConnPool|ConnectConfig)$
  - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|Query|QueryFunc|QueryRow)$
  - focus-metavariable: $QUERY
  requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
pattern-sanitizers:
- patterns:
  - pattern: $SANFUNC($QUERY, ...)
  - metavariable-regex:
      metavariable: $SANFUNC
      regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
  - focus-metavariable: $QUERY
  requires: IMPORTPGX
- pattern: '($QUERY : *Query).Sanitize(...)

    '
  requires: IMPORTPGX
- patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DB := pgx.$CONNECT(...)

          ...

          '
      - pattern-inside: '$DB, ... := pgx.$CONNECT(...)

          ...

          '
    - metavariable-regex:
        metavariable: $CONNECT
        regex: ^(Connect|NewConnPool|ConnectConfig)$
  - pattern: $DB.Sanitize(...)
  requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
- patterns:
  - pattern: '($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)

      '
  - focus-metavariable: $QUERY
  requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
- patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DB := pgx.$CONNECT(...)

          ...

          '
      - pattern-inside: '$DB, ... := pgx.$CONNECT(...)

          ...

          '
    - metavariable-regex:
        metavariable: $CONNECT
        regex: ^(Connect|NewConnPool|ConnectConfig)$
  - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
  - focus-metavariable: $QUERY
  requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
