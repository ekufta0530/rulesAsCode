id: go.gorilla.xxe.gorilla-libxml2-xxe-taint.libxml2-xxe-taint
message: The application is using an XML parser that has not been safely configured.
  This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
  input. An attacker can include document type definitions (DTDs) or XIncludes which
  can interact with internal or external hosts. XXE can lead to other vulnerabilities,
  such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side
  request forgery (SSRF), depending on the application configuration. An attacker
  can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack,
  also known as a `Billion Laughs Attack`. The best defense against XXE is to have
  an XML parser that supports disabling DTDs. Limiting the use of external entities
  from the start can prevent the parser from being used to process untrusted XML files.
  Reducing dependencies on external resources is also a good practice for performance
  reasons. It is difficult to guarantee that even a trusted XML file on your server
  or during transmission has not been tampered with by a malicious third-party.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  interfile: true
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-611: Improper Restriction of XML External Entity Reference'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::libxml2
  - net::source::network-connection::gorilla
  - web::source::cookie::gorilla
  - web::source::form-data::gorilla
  - xml::sink::xml-parser
  owasp:
  - A04:2017 - XML External Entities (XXE)
  - A05:2021 - Security Misconfiguration
  references:
  - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
  technology:
  - github.com/gorilla/rpc/v2
  - github.com/gorilla/schema
  - github.com/gorilla/securecookie
  - github.com/gorilla/sessions
  - github.com/gorilla/websocket
  - go
  - gorilla
  - gorilla/rpc
  - gorilla/schema
  - gorilla/securecookie
  - gorilla/sessions
  - gorilla/websocket
  - libxml2
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - XML Injection
  source: https://semgrep.dev/r/go.gorilla.xxe.gorilla-libxml2-xxe-taint.libxml2-xxe-taint
  shortlink: https://sg.run/e7OZ
  semgrep.dev:
    rule:
      r_id: 59532
      rv_id: 731868
      rule_id: 4bU40y
      version_id: yeTAWRq
      url: https://semgrep.dev/playground/r/yeTAWRq/go.gorilla.xxe.gorilla-libxml2-xxe-taint.libxml2-xxe-taint
      origin: pro_rules
languages:
- go
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: 'import "github.com/gorilla/schema"

      ...

      '
  - pattern-inside: '$DECODER = schema.NewDecoder()

      ...

      '
  - pattern-inside: '$DECODER.Decode(&$TO, ...)

      ...

      '
  - pattern: $TO
- patterns:
  - pattern-inside: 'import "github.com/gorilla/securecookie"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-inside: '$COOKIE = securecookie.New(...)

          ...

          '
      - pattern-inside: '$COOKIE.Decode($NAME, $C, &$VALUE)

          ...

          '
    - pattern-inside: 'securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)

        ...

        '
  - pattern: $VALUE
- patterns:
  - pattern-inside: 'import "github.com/gorilla/sessions"

      ...

      '
  - pattern-inside: '$STORE = sessions.NewCookieStore(...)

      ...

      '
  - pattern-inside: '$SESSION, ... = $STORE.Get(...)

      ...

      '
  - pattern: $SESSION.Values
- by-side-effect: true
  patterns:
  - pattern-inside: 'import "github.com/gorilla/websocket"

      ...

      '
  - pattern-inside: '$UPGRADER = websocket.Upgrader{...}

      ...

      '
  - pattern-inside: '$CONN, ... = $UPGRADER.Upgrade(...)

      ...

      '
  - pattern-either:
    - patterns:
      - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ReadMessage|ReadJSON)$
      - focus-metavariable: $BYTES
    - patterns:
      - pattern-inside: '$TYPE, $READER, $ERR = $CONN.NextReader()

          ...

          '
      - pattern: $READER.Read($VAR)
      - focus-metavariable: $VAR
    - patterns:
      - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
      - focus-metavariable: $READER
pattern-sinks:
- patterns:
  - patterns:
    - pattern-inside: 'import "$IMPORT"

        ...

        '
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*lestrrat-go/libxml2.*)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: '$P = parser.New($OPTS)

            ...

            '
        - pattern: $P.$PARSE($INPUT)
      - pattern: parser.New($OPTS).$PARSE($INPUT)
      - pattern: NewCtxt($INPUT, $OPTS)
    - focus-metavariable: $INPUT
    - metavariable-regex:
        metavariable: $PARSE
        regex: ^(Parse|ParseHTML|ParseHTMLReader|ParseHTMLString|ParseReader|ParseString)$
    - metavariable-pattern:
        metavariable: $OPTS
        patterns:
        - pattern-either:
          - pattern: XMLParseNoEnt
          - pattern: parser.XMLParseNoEnt
