id: cpp.lang.security.memory.integer-overflow-allocation.integer-overflow-allocation
message: '`$PTR` is allocated by `$ALLOC`. The size of this allocation is calculated
  from `$SIZE_EXPR`. If this calculation overflows then `$SINK` may overflow the heap
  allocated buffer.'
severity: INFO
metadata:
  likelihood: LOW
  impact: HIGH
  confidence: LOW
  category: security
  subcategory:
  - audit
  cert:
  - C
  - C++
  - L2
  - MEM35-C
  cwe:
  - 'CWE-680: Integer Overflow to Buffer Overflow'
  references:
  - https://wiki.sei.cmu.edu/confluence/display/c/MEM35-C.+Allocate+sufficient+memory+for+an+object
  technology:
  - cpp
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Other
  source: https://semgrep.dev/r/cpp.lang.security.memory.integer-overflow-allocation.integer-overflow-allocation
  shortlink: https://sg.run/wdJ20
  semgrep.dev:
    rule:
      r_id: 114773
      rv_id: 257384
      rule_id: 7KUgBo5
      version_id: 7ZT1zOG
      url: https://semgrep.dev/playground/r/7ZT1zOG/cpp.lang.security.memory.integer-overflow-allocation.integer-overflow-allocation
      origin: pro_rules
languages:
- cpp
- c
min-version: 1.59.0
patterns:
- pattern-either:
  - patterns:
    - pattern-inside: '$SIZE = $SIZE_EXPR;

        ...

        $PTR = $ALLOC(..., $SIZE, ...);

        ...

        '
    - patterns:
      - pattern: $SINK(..., $PTR, ..., $SUB_SIZE)
      - metavariable-regex:
          metavariable: $SINK
          regex: ^(bcopy|bzero|memcpy|memmove|memset)$
    - metavariable-regex:
        metavariable: $ALLOC
        regex: ^.*alloc.*$
    - metavariable-pattern:
        metavariable: $SIZE_EXPR
        patterns:
        - patterns:
          - pattern: <... $SUB_SIZE ...>
          - pattern-either:
            - pattern: <... $LHS + $RHS ...>
            - pattern: <... $LHS - $RHS ...>
            - pattern: <... $LHS * $RHS ...>
