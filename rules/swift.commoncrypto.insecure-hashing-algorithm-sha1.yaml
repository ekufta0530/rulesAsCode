id: swift.commoncrypto.insecure-hashing-algorithm-sha1.insecure-hashing-algorithm-sha1
message: 'The use of the SHA1 hashing algorithm was identified which is considered
  insecure. SHA1 is not collision resistant and is therefore not suitable for cryptographic
  or secure use-cases. Use stronger algorithms such as SHA256, SHA512, or adaptive
  hashing algorithms such as argon2 or bcrypt. **Note**: SHA1 is still considered
  acceptable when used for Message Authentication Purposes, e.g. with HMAC although
  better and stronger algorithms should be strongly considered.'
severity: WARNING
metadata:
  likelihood: LOW
  impact: MEDIUM
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
  functional-categories:
  - crypto::search::hash-algorithm::CommonCrypto
  masvs:
  - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
    are widely considered deprecated for security purposes.'
  owasp:
  - A03:2017 - Sensitive Data Exposure
  - A02:2021 - Cryptographic Failures
  references:
  - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
  technology:
  - ios
  - macos
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Cryptographic Issues
  source: https://semgrep.dev/r/swift.commoncrypto.insecure-hashing-algorithm-sha1.insecure-hashing-algorithm-sha1
  shortlink: https://sg.run/2425
  semgrep.dev:
    rule:
      r_id: 59719
      rv_id: 112002
      rule_id: wdUXLK
      version_id: DkT6YjL
      url: https://semgrep.dev/playground/r/DkT6YjL/swift.commoncrypto.insecure-hashing-algorithm-sha1.insecure-hashing-algorithm-sha1
      origin: pro_rules
languages:
- swift
options:
  symbolic_propagation: true
patterns:
- pattern-either:
  - pattern: CC_SHA1(...)
  - pattern: CC_SHA1_Init(...)
  - pattern: CC_SHA1_Update(...)
  - pattern: CC_SHA1_Finally(...)
  - pattern: Insecure.SHA1.$A(...)
