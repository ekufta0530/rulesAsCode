id: go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
patterns:
- pattern-either:
  - pattern: '$SMTH.MethodByName($NAME,...)

      '
  - pattern: '$SMTH.FieldByName($NAME,...)

      '
- pattern-not: '$SMTH.MethodByName("...",...)

    '
- pattern-not: '$SMTH.FieldByName("...",...)

    '
- pattern-inside: 'import "reflect"

    ...

    '
message: If an attacker can supply values that the application then uses to determine
  which method or field to invoke, the potential exists for the attacker to create
  control flow paths through the application that were not intended by the application
  developers. This attack vector may allow the attacker to bypass authentication or
  access control checks or otherwise cause the application to behave in an unexpected
  manner.
metadata:
  cwe:
  - 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
    Reflection'')'
  owasp:
  - A03:2021 - Injection
  category: security
  technology:
  - go
  confidence: LOW
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Improper Authorization
  source: https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
  shortlink: https://sg.run/R8Xv
  semgrep.dev:
    rule:
      r_id: 10005
      rv_id: 109630
      rule_id: BYUBdJ
      version_id: 5PTdAR2
      url: https://semgrep.dev/playground/r/5PTdAR2/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
      origin: community
severity: WARNING
languages:
- go
