id: go.gorilla.sql.gorilla-pg-sqli-taint.gorilla-pg-sqli-taint
message: 'Untrusted input might be used to build a database query, which can lead
  to a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. To prevent this vulnerability, use prepared statements
  that do not concatenate user-controllable strings and use parameterized queries
  where SQL commands and user data are strictly separated. Also, consider using an
  object-relational (ORM) framework to operate with safer abstractions. When building
  SQL queries in Go, it is possible to adopt prepared statements by using the `Prepare`
  and `PrepareContext` calls with parameterized queries. For more information, see:
  [Prepared statements in Go](https://go.dev/doc/database/prepared-statements).'
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - db::search::password::database
  - db::search::password::gorm
  - db::search::password::mysql
  - db::search::password::pg
  - db::search::password::pgx
  - db::sink::sql-or-nosql-query::pg
  - net::source::network-connection::gorilla
  - web::source::cookie::gorilla
  - web::source::form-data::gorilla
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  - https://pg.uptrace.dev/queries/
  technology:
  - github.com/gorilla/rpc/v2
  - github.com/gorilla/schema
  - github.com/gorilla/securecookie
  - github.com/gorilla/sessions
  - github.com/gorilla/websocket
  - go-pg/pg/v10
  - gorilla
  - gorilla/rpc
  - gorilla/schema
  - gorilla/securecookie
  - gorilla/sessions
  - gorilla/websocket
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/go.gorilla.sql.gorilla-pg-sqli-taint.gorilla-pg-sqli-taint
  shortlink: https://sg.run/Nk2A
  semgrep.dev:
    rule:
      r_id: 59527
      rv_id: 731863
      rule_id: L1UZvw
      version_id: 2KTLozY
      url: https://semgrep.dev/playground/r/2KTLozY/go.gorilla.sql.gorilla-pg-sqli-taint.gorilla-pg-sqli-taint
      origin: pro_rules
languages:
- go
mode: taint
pattern-sources:
- label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/schema"

      ...

      '
  - pattern-inside: '$DECODER = schema.NewDecoder()

      ...

      '
  - pattern-inside: '$DECODER.Decode(&$TO, ...)

      ...

      '
  - pattern: $TO
- label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/securecookie"

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-inside: '$COOKIE = securecookie.New(...)

          ...

          '
      - pattern-inside: '$COOKIE.Decode($NAME, $C, &$VALUE)

          ...

          '
    - pattern-inside: 'securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)

        ...

        '
  - pattern: $VALUE
- label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/sessions"

      ...

      '
  - pattern-inside: '$STORE = sessions.NewCookieStore(...)

      ...

      '
  - pattern-inside: '$SESSION, ... = $STORE.Get(...)

      ...

      '
  - pattern: $SESSION.Values
- by-side-effect: true
  label: USERINPUT
  patterns:
  - pattern-inside: 'import "github.com/gorilla/websocket"

      ...

      '
  - pattern-inside: '$UPGRADER = websocket.Upgrader{...}

      ...

      '
  - pattern-inside: '$CONN, ... = $UPGRADER.Upgrade(...)

      ...

      '
  - pattern-either:
    - patterns:
      - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ReadMessage|ReadJSON)$
      - focus-metavariable: $BYTES
    - patterns:
      - pattern-inside: '$TYPE, $READER, $ERR = $CONN.NextReader()

          ...

          '
      - pattern: $READER.Read($VAR)
      - focus-metavariable: $VAR
    - patterns:
      - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
      - focus-metavariable: $READER
- label: IMPORTSQL
  pattern-either:
  - pattern: 'import "database/sql"

      ...

      '
  - pattern: 'import "github.com/go-sql-driver/mysql"

      ...

      '
  - pattern: 'import "gorm.io/driver/mysql"

      ...

      '
  - pattern: 'import "gorm.io/driver/postgres"

      ...

      '
  - pattern: 'import "gorm.io/driver/clickhouse"

      ...

      '
- label: SPRINTF
  patterns:
  - pattern-inside: 'import "fmt"

      ...

      '
  - pattern: fmt.$P("...", $REQ, ...)
  - metavariable-regex:
      metavariable: $P
      regex: ^(Sprint|Sprintf|Sprintln)$
  requires: USERINPUT
- label: CONCAT
  pattern-either:
  - pattern: '"$A" + $B

      '
  - pattern: $A + "$B"
  - pattern: '"$A" += $B

      '
  - pattern: $A += "$B"
  requires: USERINPUT
- label: PREPARE
  patterns:
  - pattern-either:
    - pattern: '($DB : $DBTYPE).Prepare(...)

        '
    - pattern: '($DB : $DBTYPE).SafeQuery(...)

        '
  - metavariable-regex:
      metavariable: $DBTYPE
      regex: ^((\*)?sql.(Conn|DB|Tx))$
  requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
- label: PREPARECONN
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DB := sql.$OPEN(...)

          ...

          '
      - pattern-inside: '$DB, ... := sql.$OPEN(...)

          ...

          '
    - metavariable-regex:
        metavariable: $OPEN
        regex: ^(Open|OpenDB)$
  - pattern-either:
    - pattern: $DB.Prepare(...)
    - pattern: $DB.SafeQuery(...)
  requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
- label: IMPORTPG
  patterns:
  - pattern-inside: 'import "$IMPORT"

      ...

      '
  - metavariable-regex:
      metavariable: $IMPORT
      regex: ^(.*go\-pg\/pg\/v10\/orm.*)$
pattern-sinks:
- patterns:
  - pattern-either:
    - patterns:
      - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)

          '
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(Exec|ExecOne|Prepare)$
    - patterns:
      - pattern: '($DB : $DBTYPE). ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)

          '
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
    - patterns:
      - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $MODEL, $QUERY, ...)

          '
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(QueryContext|QueryOneContext)$
  - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
  - metavariable-regex:
      metavariable: $DBTYPE
      regex: ^((\*)?pg.(Conn|DB|Tx))$
  - focus-metavariable: $QUERY
  requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
- patterns:
  - patterns:
    - pattern-either:
      - pattern: '$DB := pg.$CONN(...)

          ...

          '
      - pattern: '$DB, $ERR := pg.$CONN(...)

          ...

          '
    - metavariable-regex:
        metavariable: $CONN
        regex: ^(Connect|ParseURL)$
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|ExecOne|Prepare)$
      - patterns:
        - pattern: $DB. ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $MODEL, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(QueryContext|QueryOneContext)$
    - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
  - focus-metavariable: $QUERY
  requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
