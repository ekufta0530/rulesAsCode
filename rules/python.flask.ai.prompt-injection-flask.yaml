id: python.flask.ai.prompt-injection-flask.prompt-injection-flask
message: A prompt is created and user-controlled data reaches that prompt. This can
  lead to prompt injection. Make sure the user inputs are properly segmented from
  the system's in your prompts.
severity: INFO
metadata:
  likelihood: LOW
  impact: MEDIUM
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-75: Failure to Sanitize Special Elements into a Different Plane (Special
    Element Injection)'
  functional-categories:
  - ai::sink::prompt::huggingface
  - ai::sink::prompt::langchain
  - ai::sink::prompt::openai
  - web::source::cookie::flask
  - web::source::form-data::flask
  - web::source::form-data::flask-wtf
  - web::source::form-data::wtforms
  - web::source::header::flask
  - web::source::http-body::flask
  - web::source::http-params::flask
  - web::source::url-path-params::flask
  owasp:
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - ai
  - flask
  - flask-wtf
  - huggingface
  - langchain
  - openai
  - web
  - wtforms
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Other
  source: https://semgrep.dev/r/python.flask.ai.prompt-injection-flask.prompt-injection-flask
  shortlink: https://sg.run/GdzOG
  semgrep.dev:
    rule:
      r_id: 116504
      rv_id: 731970
      rule_id: DbU6w1b
      version_id: rxT2Jod
      url: https://semgrep.dev/playground/r/rxT2Jod/python.flask.ai.prompt-injection-flask.prompt-injection-flask
      origin: pro_rules
languages:
- python
mode: taint
options:
  interfile: true
  symbolic_propagation: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- pattern-either:
  - patterns:
    - pattern: flask.request.$FUNC()
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(from_values|get_data|get_json)$
  - patterns:
    - pattern-either:
      - pattern: flask.request.$PROPERTY
      - pattern: flask.request.$PROPERTY[...]
      - pattern: flask.request.$PROPERTY.get(...)
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
  - patterns:
    - pattern: "@$APP.$ROUTE\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(endpoint)$
    - focus-metavariable: $PARAM
- patterns:
  - pattern: "@$APP.$ROUTE(...)\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
  - metavariable-regex:
      metavariable: $ROUTE
      regex: ^(route|delete|get|patch|post|put)$
  - focus-metavariable: $PARAM
- patterns:
  - pattern-either:
    - pattern-inside: "@$APP.$ROUTE(...)\ndef $FUNC(...):\n  ...\n  $FORM = $FORMCLASS(...)\n\
        \  ...\n  $FORM.validate_on_submit()\n  ...\n"
    - pattern-inside: "@$APP.$ROUTE(...)\ndef $FUNC(...):\n  ...\n  $FORM = $FORMCLASS(...)\n\
        \  ...\n  if $FORM.validate_on_submit():\n    ...\n  ...\n"
  - metavariable-regex:
      metavariable: $ROUTE
      regex: ^(route|delete|get|patch|post|put|endpoint)$
  - pattern: $FORM.$FIELD.data
pattern-propagators:
- from: $DEFAULT
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.get($FIELD, $DEFAULT)
      - pattern: $DICT.setdefault($KEY, $DEFAULT)
  to: $DICT
- from: $FROM_DICT
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$TO_DICT[$KEY]

          ...

          '
      - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$TO_DICT = { ... }

          ...

          '
      - pattern-inside: '$TO_DICT = dict(...)

          ...

          '
      - pattern-inside: '$FROM_DICT[$KEY]

          ...

          '
      - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$FROM_DICT = { ... }

          ...

          '
      - pattern-inside: '$FROM_DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $TO_DICT.update($FROM_DICT)
      - pattern: $TO_DICT | $FROM_DICT
      - pattern: $TO_DICT |= $FROM_DICT
  to: $TO_DICT
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.append($FROM)
      - pattern: $LIST.extend($FROM)
      - pattern: $LIST.insert($INDEX, $FROM)
  to: $LIST
- from: $FROM
  patterns:
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.update(..., $FROM, ...)
      - pattern: $SET.intersection_update(..., $FROM, ...)
      - pattern: $SET.difference_update(..., $FROM, ...)
      - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
      - pattern: $SET.add($FROM)
      - pattern: $SET |= $FROM
      - pattern: $SET &= $FROM
      - pattern: $SET -= $FROM
      - pattern: $SET ^= $FROM
  to: $SET
- from: $FORM
  patterns:
  - pattern: $FORM.populate_obj($OBJ)
  to: $OBJ
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: openai.OpenAI(...).chat.completions.create(..., messages=$SINK, ...)
    - pattern: openai.OpenAI(...).beta.assistants.create(..., instructions=$SINK,
        ...)
    - pattern: openai.OpenAI(...).beta.assistants.create(..., tools=$SINK, ...)
    - pattern: openai.OpenAI(...).beta.threads.create(..., messages=$SINK, ...)
    - pattern: openai.OpenAI(...).beta.threads.runs.create(..., instructions=$SINK,
        ...)
    - pattern: openai.OpenAI(...).beta.threads.runs.create(..., additional_instructions=$SINK,
        ...)
    - pattern: openai.OpenAI(...).beta.threads.messages.create(..., content=$SINK,
        ...)
    - pattern: openai.OpenPI(...).beta.threads.messages.create(..., file_ids=$SINK,
        ...)
  - focus-metavariable: $SINK
- patterns:
  - pattern-either:
    - pattern: huggingface_hub.InferenceApi(...)(..., inputs=$SINK, ...)
    - pattern: huggingface_hub.inference_api.InferenceApi(...)(..., inputs=$SINK,
        ...)
    - pattern: huggingface_hub.InferenceClient(...).conversational($SINK, ...)
    - pattern: huggingface_hub.InferenceClient(...).conversational(..., text=$SINK,
        ...)
    - pattern: huggingface_hub.InferenceClient(...).text_generation($SINK, ...)
    - pattern: huggingface_hub.InferenceClient(...).text_generation(..., prompt=$SINK,
        ...)
  - focus-metavariable: $SINK
- patterns:
  - pattern-either:
    - pattern: langchain.prompts.PromptTemplate.from_template(..., template=$SINK,
        ...)
    - pattern: langchain.prompts.PromptTemplate.from_template(...).format(..., $SINK,
        ...)
    - pattern: langchain.prompts.HumanMessagePromptTemplate.from_template(..., template=$SINK,
        ...)
    - pattern: langchain.prompts.HumanMessagePromptTemplate.from_template(...).format(...,
        $SINK, ...)
    - pattern: langchain.prompts.FewShotPromptTemplate.from_template(..., template=$SINK,
        ...)
    - pattern: langchain.prompts.FewShotPromptTemplate.from_template(...).format(...,
        $SINK, ...)
    - pattern: langchain_core.prompts.ChatPromptTemplate.from_messages(..., messages=$SINK,
        ...)
    - pattern: langchain_core.prompts.ChatPromptTemplate.from_messages(...).format_messages(...,
        $SINK, ...)
    - pattern: langchain_core.messages.HumanMessage($SINK, ...)
    - pattern: langchain_core.messages.HumanMessage(..., content=$SINK, ...)
    - pattern: langchain_core.messages.AIMessage($SINK, ...)
    - pattern: langchain_core.messages.AIMessage(..., content=$SINK, ...)
    - pattern: langchain.memory.ChatMessageHistory(...).add_user_message($SINK, ...)
    - pattern: langchain.memory.ChatMessageHistory(...).add_ai_message($SINK, ...)
  - focus-metavariable: $SINK
pattern-sanitizers:
- patterns:
  - pattern-either:
    - pattern: int(...)
    - pattern: bool(...)
    - pattern: float(...)
    - pattern: complex(...)
    - pattern: oct(...)
    - pattern: hex(...)
    - pattern: bin(...)
    - pattern: round(...)
    - pattern: id(...)
    - pattern: hash(...)
    - pattern: len(...)
    - pattern: type(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$DICT[$KEY]

        ...

        '
    - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

        ...

        '
    - pattern-inside: '$DICT.get($KEY, $DEFAULT)

        ...

        '
    - pattern-inside: '$DICT = { }

        ...

        '
    - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

        ...

        '
    - pattern-inside: '$DICT = dict(...)

        ...

        '
  - pattern-either:
    - pattern: $DICT.clear()
    - pattern: $DICT.len()
- patterns:
  - pattern-either:
    - pattern-inside: '$LIST = [ ... ]

        ...

        '
    - pattern-inside: '$LIST = list(...)

        ...

        '
  - pattern-either:
    - pattern: $LIST.clear()
    - pattern: $LIST.count(...)
    - pattern: $LIST.index(...)
- patterns:
  - pattern-either:
    - pattern-inside: '$SET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$SET = set(...)

        ...

        '
  - pattern-either:
    - pattern: $SET.len()
    - pattern: $SET.clear()
- patterns:
  - pattern-either:
    - pattern-inside: '$SET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$SET = { $ITEM for ... in ...}

        ...

        '
    - pattern-inside: '$SET = set(...)

        ...

        '
    - pattern-inside: '$SET = frozenset(...)

        ...

        '
    - pattern-inside: '$OTHERSET = { $ITEM, ... }

        ...

        '
    - pattern-inside: '$OTHERSET = set(...)

        ...

        '
  - pattern-either:
    - pattern: $SET.isdisjoint($OTHERSET)
    - pattern: $SET.issubset($OTHERSET)
    - pattern: $SET < $OTHERSET
    - pattern: $SET <= $OTHERSET
    - pattern: $SET.issuperset($OTHERSET)
    - pattern: $SET > $OTHERSET
    - pattern: $SET >= $OTHERSET
- patterns:
  - pattern-either:
    - pattern-inside: '$TUPLE = ( $ITEM, ... )

        ...

        '
    - pattern-inside: '$TUPLE = $ITEM, ...

        ...

        '
    - pattern-inside: '$TUPLE = tuple(...)

        ...

        '
  - pattern-either:
    - pattern: $TUPLE.len()
