id: python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
mode: taint
pattern-sinks:
- pattern: 'sqlalchemy.text(...)

    '
pattern-sources:
- patterns:
  - pattern: '$X + $Y

      '
  - metavariable-type:
      metavariable: $X
      type: string
- patterns:
  - pattern: '$X + $Y

      '
  - metavariable-type:
      metavariable: $Y
      type: string
- patterns:
  - pattern: 'f"..."

      '
- patterns:
  - pattern: '$X.format(...)

      '
  - metavariable-type:
      metavariable: $X
      type: string
- patterns:
  - pattern: '$X % $Y

      '
  - metavariable-type:
      metavariable: $X
      type: string
message: sqlalchemy.text passes the constructed SQL statement to the database mostly
  unchanged. This means that the usual SQL injection protections are not applied and
  this function is vulnerable to SQL injection if user input can reach here. Use normal
  SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.
metadata:
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  category: security
  technology:
  - sqlalchemy
  confidence: MEDIUM
  references:
  - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
  shortlink: https://sg.run/yP1O
  semgrep.dev:
    rule:
      r_id: 15824
      rv_id: 253874
      rule_id: r6U2wE
      version_id: 2KTGW4q
      url: https://semgrep.dev/playground/r/2KTGW4q/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
      origin: community
languages:
- python
severity: ERROR
