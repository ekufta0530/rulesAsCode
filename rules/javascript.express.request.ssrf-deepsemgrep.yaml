id: javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep
message: Untrusted input might be used to build an HTTP request, which can lead to
  a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send
  crafted requests from the server side to other internal or external systems. SSRF
  can lead to unauthorized access to sensitive data and, in some cases, allow the
  attacker to control applications or systems that trust the vulnerable service. To
  prevent this vulnerability, avoid allowing user input to craft the base request.
  Instead, treat it as part of the path or query parameter and encode it appropriately.
  When user input is necessary to prepare the HTTP request, perform strict input validation.
  Additionally, whenever possible, use allowlists to only interact with expected,
  trusted domains.
severity: WARNING
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-918: Server-Side Request Forgery (SSRF)'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - web::source::cookie::express
  - web::source::http-params::express
  - web::source::http-body::express
  - web::source::header::express
  - web::source::url-path-params::express
  - net::sink::http-request::request
  owasp:
  - A10:2021 - Server-Side Request Forgery (SSRF)
  references:
  - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  technology:
  - express
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Server-Side Request Forgery (SSRF)
  source: https://semgrep.dev/r/javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep
  shortlink: https://sg.run/Wxn4
  semgrep.dev:
    rule:
      r_id: 43797
      rv_id: 111673
      rule_id: j2Up4D
      version_id: bZTb9pb
      url: https://semgrep.dev/playground/r/bZTb9pb/javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep
      origin: pro_rules
languages:
- javascript
- typescript
mode: taint
options:
  symbolic_propagation: true
pattern-sources:
- label: TAINTED
  patterns:
  - pattern-either:
    - pattern-inside: function ... (...,$REQ, ...) {...}
  - pattern-either:
    - pattern: $REQ.query
    - pattern: $REQ.body
    - pattern: $REQ.params
    - pattern: $REQ.cookies
    - pattern: $REQ.headers
- label: TAINTED
  patterns:
  - pattern-either:
    - pattern-inside: '(...,{..., $REQ,... }: Request,...) => {...}

        '
    - pattern-inside: '(...,{..., $REQ,... }: $EXPRESS.Request,...) => {...}

        '
  - focus-metavariable: $REQ
  - pattern-either:
    - pattern: params
    - pattern: query
    - pattern: cookies
    - pattern: headers
    - pattern: body
- label: CONCAT
  requires: TAINTED
  patterns:
  - pattern-either:
    - pattern: '`...${$X}...`

        '
    - pattern: '$F + $X

        '
  - pattern-not: '`${$X}...`

      '
  - pattern-not: '"https://" + $X

      '
  - pattern-not: '"http://" + $X

      '
  - pattern-not: '"//" + $X

      '
  - pattern-not: '`http://${$X}...`

      '
  - pattern-not: '`https://${$X}...`

      '
  - pattern-not: '`//${$X}...`

      '
  - pattern-not: '$X + $F

      '
  - focus-metavariable: $X
pattern-sinks:
- requires: TAINTED and not CONCAT
  patterns:
  - pattern-either:
    - pattern-inside: '$REQUIRE = require(''request'')

        ...

        '
    - pattern-inside: 'import * as $REQUIRE from ''request''

        ...

        '
    - pattern-inside: 'import $REQUIRE from ''request''

        ...

        '
  - pattern-either:
    - pattern: $REQUIRE.$METHOD($QUERY,...)
  - focus-metavariable: $QUERY
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(get|post|put|patch|del|head|delete)
