id: java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal
message: The application builds a file path from potentially untrusted data, which
  can lead to a path traversal vulnerability. An attacker can manipulate the path
  which the application uses to access files. If the application does not validate
  user input and sanitize file paths, sensitive files such as configuration or user
  data can be accessed, potentially creating or overwriting files. To prevent this
  vulnerability, validate and sanitize any input that is used to create references
  to file paths. Also, enforce strict file access controls. For example, choose privileges
  allowing public-facing applications to access only the required files. In Java,
  you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)`
  to only retrieve the file name from the path.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path Traversal'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - file::sink::file-access::commons-io
  - file::sink::file-access::java.io
  - file::sink::file-access::java.xml
  - file::sink::file-access::spring
  - web::source::cookie::Spring
  - web::source::header::Spring
  - web::source::http-body::Spring
  - web::source::http-params::Spring
  - web::source::url-path-params::Spring
  owasp:
  - A01:2021 - Broken Access Control
  - A05:2017 - Broken Access Control
  references:
  - https://owasp.org/Top10/A01_2021-Broken_Access_Control
  - https://owasp.org/www-community/attacks/Path_Traversal
  - https://portswigger.net/web-security/file-path-traversal
  - https://www.stackhawk.com/blog/spring-path-traversal-guide-examples-and-prevention/
  technology:
  - Spring
  - java
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Path Traversal
  source: https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal
  shortlink: https://sg.run/Pqzq
  semgrep.dev:
    rule:
      r_id: 72945
      rv_id: 735056
      rule_id: yyUr8r
      version_id: ExTqLOx
      url: https://semgrep.dev/playground/r/ExTqLOx/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal
      origin: pro_rules
languages:
- java
mode: taint
options:
  interfile: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- patterns:
  - pattern-either:
    - pattern: $RET $METHOD(..., @$REQ(...) $TYPE $SOURCE, ...) {...}
    - pattern: $RET $METHOD(..., @$REQ $TYPE $SOURCE, ...) {...}
  - metavariable-regex:
      metavariable: $REQ
      regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute|MatrixVariable|RequestPart|RequestAttribute)
  - focus-metavariable: $SOURCE
- patterns:
  - pattern-either:
    - pattern-inside: '@$MAPPING(...)

        $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}

        '
    - pattern-inside: '@$MAPPING

        $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}

        '
  - pattern-either:
    - pattern: $RET $METHOD(..., String $SOURCE, ...) {...}
    - pattern: $RET $METHOD(..., org.springframework.http.HttpEntity<$X> $SOURCE,
        ...) {...}
    - pattern: $RET $METHOD(..., java.io.InputStream $SOURCE, ...) {...}
    - pattern: $RET $METHOD(..., java.io.Reader $SOURCE, ...) {...}
  - metavariable-regex:
      metavariable: $MAPPING
      regex: (ResponseBody|RequestMapping|PatchMapping|GetMapping|DeleteMapping|PutMapping|PostMapping|HttpExchange|GetExchange|PostExchange|PutExchange|PatchExchange|DeleteExchange|ResponseStatus)
  - focus-metavariable: $SOURCE
- patterns:
  - pattern-either:
    - pattern: (org.springframework.web.context.request.WebRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.web.context.request.NativeWebRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.web.context.request.FacesWebRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.web.context.request.ServletWebRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.web.servlet.handler.DispatcherServletWebRequest
        $REQ).$METHOD(...)
    - pattern: (org.springframework.web.context.request.async.AsyncWebRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.web.context.request.async.StandardServletAsyncWebRequest
        $REQ).$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (getHeader|getHeaderNames|getHeaderValues|getParameter|getParameterMap|getParameterNames|getParameterValues|getAttribute|getAttributeNames)
- patterns:
  - pattern-either:
    - pattern: (org.springframework.http.HttpRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.http.client.ClientHttpRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.http.server.ServerHttpRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.http.server.ServletServerHttpRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.web.multipart.support.RequestPartServletServerHttpRequest
        $REQ).$METHOD(...)
    - pattern: (org.springframework.http.server.reactive.ServerHttpRequest $REQ).$METHOD(...)
    - pattern: (org.springframework.http.server.reactive.ServerHttpRequestDecorator
        $REQ).$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (getPath|getQueryParams|getBody|getURI|getHeaders|getCookies)
- patterns:
  - pattern-either:
    - pattern: (javax.servlet.ServletRequest $REQ).$METHOD(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).$METHOD(...)
    - pattern: (jakarta.servlet.ServletRequest $REQ).$METHOD(...)
    - pattern: (jakarta.servlet.http.HttpServletRequest $REQ).$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
pattern-propagators:
- from: $INPUT
  patterns:
  - pattern-either:
    - pattern: String.format($FMT, ..., $INPUT, ...)
    - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
  to: $FMT
- from: $INPUT
  patterns:
  - pattern: (StringBuilder $BUILDER).append($INPUT);
  to: $BUILDER
- from: $F
  patterns:
  - pattern: $X = (java.io.File $F).$ANY(...)
  to: $X
pattern-sinks:
- patterns:
  - focus-metavariable: $FILE
  - pattern-either:
    - pattern: new java.io.File(..., $FILE, ...)
    - pattern: new java.io.FileReader($FILE, ...)
    - pattern: new java.io.FileInputStream($FILE, ...)
    - pattern: new java.io.FileOutputStream($FILE, ...)
    - pattern: new javax.xml.transform.stream.StreamSource($FILE, ...)
    - patterns:
      - pattern-either:
        - pattern: (Class $CLASS).getResourceAsStream($FILE, ...)
        - pattern: (Class $CLASS).getResources($FILE, ...)
        - pattern: (Class $CLASS).getResource($FILE, ...)
        - pattern: (ClassLoader $CLASS).getResourceAsStream($FILE, ...)
        - pattern: (ClassLoader $CLASS).getResources($FILE, ...)
        - pattern: (ClassLoader $CLASS).getResource($FILE, ...)
    - patterns:
      - pattern-either:
        - pattern: $CLASS.getResourceAsStream($FILE, ...)
        - pattern: $CLASS.getResources($FILE, ...)
        - pattern: $CLASS.getResource($FILE, ...)
      - metavariable-regex:
          metavariable: $CLASS
          regex: .*(?i)class.*
- patterns:
  - pattern: ServletUriComponentsBuilder.fromCurrentContextPath(). ... .path($SINK)
  - focus-metavariable: $SINK
pattern-sanitizers:
- pattern: (ChoiceFormat $X).format(...)
- pattern: (DecimalFormat $X).format(...)
- pattern: (java.util.UUID $X)
- pattern: org.apache.commons.io.FilenameUtils.getName(...)
- pattern: "if (<... $FN.startsWith(...) ...>)\n{\n  ...\n}\n...\n"
- pattern: "if (<... $FN.contains(...) ...>)\n{\n  ...\n}\n...\n"
