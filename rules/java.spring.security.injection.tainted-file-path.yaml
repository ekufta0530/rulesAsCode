id: java.spring.security.injection.tainted-file-path.tainted-file-path
languages:
- java
severity: ERROR
message: Detected user input controlling a file path. An attacker could control the
  location of this file, to include going backwards in the directory with '../'. To
  address this, ensure that user-controlled variables in file paths are sanitized.
  You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...)
  to only retrieve the file name from the path.
options:
  interfile: true
metadata:
  cwe:
  - 'CWE-23: Relative Path Traversal'
  owasp:
  - A01:2021 - Broken Access Control
  references:
  - https://owasp.org/www-community/attacks/Path_Traversal
  category: security
  technology:
  - java
  - spring
  subcategory:
  - vuln
  impact: HIGH
  likelihood: MEDIUM
  confidence: HIGH
  interfile: true
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Path Traversal
  source: https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path
  shortlink: https://sg.run/x9o0
  semgrep.dev:
    rule:
      r_id: 22074
      rv_id: 109780
      rule_id: lBUxok
      version_id: DkT6nEd
      url: https://semgrep.dev/playground/r/DkT6nEd/java.spring.security.injection.tainted-file-path.tainted-file-path
      origin: community
mode: taint
pattern-sources:
- patterns:
  - pattern-either:
    - pattern-inside: "$METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n  ...\n}\n"
    - pattern-inside: "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n}\n"
  - metavariable-regex:
      metavariable: $TYPE
      regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
  - metavariable-regex:
      metavariable: $REQ
      regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
  - focus-metavariable: $SOURCE
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: new File(...)
    - pattern: new java.io.File(...)
    - pattern: new FileReader(...)
    - pattern: new java.io.FileReader(...)
    - pattern: new FileInputStream(...)
    - pattern: new java.io.FileInputStream(...)
    - pattern: (Paths $PATHS).get(...)
    - patterns:
      - pattern: '$CLASS.$FUNC(...)

          '
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(getResourceAsStream|getResource)$
    - patterns:
      - pattern-either:
        - pattern: new ClassPathResource($FILE, ...)
        - pattern: ResourceUtils.getFile($FILE, ...)
        - pattern: new FileOutputStream($FILE, ...)
        - pattern: new java.io.FileOutputStream($FILE, ...)
        - pattern: new StreamSource($FILE, ...)
        - pattern: new javax.xml.transform.StreamSource($FILE, ...)
        - pattern: FileUtils.openOutputStream($FILE, ...)
      - focus-metavariable: $FILE
pattern-sanitizers:
- pattern: org.apache.commons.io.FilenameUtils.getName(...)
