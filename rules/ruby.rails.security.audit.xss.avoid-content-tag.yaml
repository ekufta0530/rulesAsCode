id: ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
metadata:
  source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_content_tag.rb
  owasp:
  - A07:2017 - Cross-Site Scripting (XSS)
  - A03:2021 - Injection
  cwe:
  - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
    Scripting'')'
  references:
  - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown
  - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
  category: security
  technology:
  - rails
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: MEDIUM
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Cross-Site-Scripting (XSS)
  source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
  shortlink: https://sg.run/dg8P
  semgrep.dev:
    rule:
      r_id: 9734
      rv_id: 110570
      rule_id: L1U4qz
      version_id: d6TrvjR
      url: https://semgrep.dev/playground/r/d6TrvjR/ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
      origin: community
message: '''content_tag()'' bypasses HTML escaping for some portion of the content.
  If external data can reach here, this exposes your application to cross-site scripting
  (XSS) attacks. Ensure no external data reaches here. If you must do this, create
  your HTML manually and use ''html_safe''. Ensure no external data enters the HTML-safe
  string!'
languages:
- ruby
severity: WARNING
pattern: content_tag(...)
