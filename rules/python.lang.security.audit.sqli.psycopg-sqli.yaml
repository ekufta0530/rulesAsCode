id: python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
languages:
- python
message: 'Detected string concatenation with a non-literal variable in a psycopg2
  Python SQL statement. This could lead to SQL injection if the variable is user-controlled
  and not properly sanitized. In order to prevent SQL injection, use parameterized
  queries or prepared statements instead. You can use prepared statements by creating
  a ''sql.SQL'' string. You can also use the pyformat binding style to create parameterized
  queries. For example: ''cur.execute(SELECT * FROM table WHERE name=%s, user_input)'''
metadata:
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  references:
  - https://www.psycopg.org/docs/sql.html
  category: security
  technology:
  - psycopg
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: HIGH
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
  shortlink: https://sg.run/qrLe
  semgrep.dev:
    rule:
      r_id: 10312
      rv_id: 110426
      rule_id: KxU4Kg
      version_id: ZRTQpQ0
      url: https://semgrep.dev/playground/r/ZRTQpQ0/python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
      origin: community
patterns:
- pattern-either:
  - patterns:
    - pattern: $CUR.$METHOD(...,$QUERY,...)
    - pattern-either:
      - pattern-inside: '$QUERY = $X + $Y

          ...

          '
      - pattern-inside: '$QUERY += $X

          ...

          '
      - pattern-inside: '$QUERY = ''...''.format(...)

          ...

          '
      - pattern-inside: '$QUERY = ''...'' % (...)

          ...

          '
      - pattern-inside: '$QUERY = f''...{$USERINPUT}...''

          ...

          '
    - pattern-not-inside: '$QUERY += "..."

        ...

        '
    - pattern-not-inside: '$QUERY = "..." + "..."

        ...

        '
    - pattern-not-inside: '$QUERY = ''...''.format()

        ...

        '
    - pattern-not-inside: '$QUERY = ''...'' % ()

        ...

        '
  - pattern: $CUR.$METHOD(..., $X + $Y, ...)
  - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
  - pattern: $CUR.$METHOD(..., '...' % (...), ...)
  - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
- pattern-either:
  - pattern-inside: '$CONN = psycopg2.connect(...)

      ...

      $CUR = $CONN.cursor(...)

      ...

      '
  - pattern-inside: "$CONN = psycopg2.connect(...)\n...\nwith $CONN.cursor(...) as\
      \ $CUR:\n  ...\n"
- pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
- pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
- pattern-not: $CUR.$METHOD(..., '...'%(), ...)
- metavariable-regex:
    metavariable: $METHOD
    regex: ^(execute|executemany|mogrify)$
severity: WARNING
