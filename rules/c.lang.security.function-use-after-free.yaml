id: c.lang.security.function-use-after-free.function-use-after-free
patterns:
- pattern-either:
  - pattern: $FUNC(..., <... $VAR ...>, ...)
  - pattern: $FUNC(..., <... $VAR->$ACCESSOR ...>, ...)
  - pattern: $FUNC(..., <... (*$VAR).$ACCESSOR ...>, ...)
  - pattern: $FUNC(..., <... $VAR[$NUM] ...>, ...)
- metavariable-regex:
    metavariable: $FUNC
    regex: (?!^free$)
- pattern-inside: free($VAR); ...
- pattern-not-inside: free($VAR); ... $VAR = NULL; ...
- pattern-not-inside: free($VAR); ... $VAR = malloc(...); ...
message: Variable '$VAR' was passed to a function after being freed. This can lead
  to undefined behavior.
metadata:
  cwe:
  - 'CWE-416: Use After Free'
  references:
  - https://cwe.mitre.org/data/definitions/416.html
  - https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/
  category: security
  technology:
  - c
  confidence: LOW
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - vuln
  likelihood: LOW
  impact: HIGH
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Memory Issues
  source: https://semgrep.dev/r/c.lang.security.function-use-after-free.function-use-after-free
  shortlink: https://sg.run/eWyZ
  semgrep.dev:
    rule:
      r_id: 57376
      rv_id: 257628
      rule_id: WAU9Dz
      version_id: nWT8x8G
      url: https://semgrep.dev/playground/r/nWT8x8G/c.lang.security.function-use-after-free.function-use-after-free
      origin: community
languages:
- c
severity: WARNING
