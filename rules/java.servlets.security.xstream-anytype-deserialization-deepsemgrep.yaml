id: java.servlets.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
message: 'The application may convert user-controlled data into an object, which can
  lead to an insecure deserialization vulnerability. An attacker can create a malicious
  serialized object, pass it to the application, and take advantage of the deserialization
  process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass
  access control measures. To prevent this vulnerability, leverage data formats such
  as JSON or XML as safer alternatives. If you need to deserialize user input in a
  specific format, consider digitally signing the data before serialization to prevent
  tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  We do not recommend deserializing untrusted data with the `XStream` unless you explicitly
  define permissions for types that are allowed to be deserialized by `XStream`.'
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::xstream
  - web::source::cookie::Servlet
  - web::source::header::Servlet
  - web::source::http-body::Servlet
  - web::source::http-params::Servlet
  - web::source::url-path-params::Servlet
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
  - https://x-stream.github.io/security.html
  technology:
  - java
  - servlets
  - xml
  - xstream
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/java.servlets.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
  shortlink: https://sg.run/D3y2
  semgrep.dev:
    rule:
      r_id: 44908
      rv_id: 735031
      rule_id: j2UGQ8
      version_id: qkTWdG4
      url: https://semgrep.dev/playground/r/qkTWdG4/java.servlets.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
      origin: pro_rules
languages:
- java
mode: taint
options:
  interfile: true
  taint_assume_safe_booleans: true
  taint_assume_safe_numbers: true
pattern-sources:
- label: REQ
  patterns:
  - pattern-either:
    - pattern: (ServletRequest $REQ).$METHOD(...)
    - pattern: (HttpServletRequest $REQ).$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
- by-side-effect: true
  label: PERMISSION
  patterns:
  - focus-metavariable: $X
  - pattern-either:
    - pattern: (com.thoughtworks.xstream.XStream $X).addPermission($PERMISSION.ANY)
pattern-propagators:
- from: $INPUT
  patterns:
  - pattern-either:
    - pattern: String.format($FMT, ..., $INPUT, ...)
    - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
  to: $FMT
- from: $INPUT
  patterns:
  - pattern: (StringBuilder $BUILDER).append($INPUT);
  to: $BUILDER
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: (com.thoughtworks.xstream.XStream $STREAM).fromXML(...)
  requires: REQ and PERMISSION
pattern-sanitizers:
- pattern: (ChoiceFormat $X).format(...)
- pattern: (DecimalFormat $X).format(...)
- pattern: (java.util.UUID $X)
