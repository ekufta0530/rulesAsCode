id: typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
message: Overwriting `transformLinkUri` or `transformImageUri` to something insecure,
  or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code
  up to XSS vectors.
metadata:
  cwe:
  - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
    Scripting'')'
  owasp:
  - A07:2017 - Cross-Site Scripting (XSS)
  - A03:2021 - Injection
  references:
  - https://www.npmjs.com/package/react-markdown#security
  category: security
  technology:
  - react
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Cross-Site-Scripting (XSS)
  source: https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
  shortlink: https://sg.run/9qAk
  semgrep.dev:
    rule:
      r_id: 9767
      rv_id: 111107
      rule_id: kxURd4
      version_id: WrTW3Gy
      url: https://semgrep.dev/playground/r/WrTW3Gy/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
      origin: community
languages:
- typescript
- javascript
severity: WARNING
patterns:
- pattern-either:
  - pattern-inside: '$X = require(''react-markdown/with-html'');

      ...

      '
  - pattern-inside: '$X = require(''react-markdown'');

      ...

      '
  - pattern-inside: 'import ''react-markdown/with-html'';

      ...

      '
  - pattern-inside: 'import ''react-markdown'';

      ...

      '
- pattern-either:
  - pattern: '<$EL allowDangerousHtml />

      '
  - pattern: '<$EL escapeHtml={false} />

      '
  - pattern: '<$EL transformLinkUri=... />

      '
  - pattern: '<$EL transformImageUri=... />

      '
