id: go.net.csrf.gorilla-csrf.go-net-http-handlefunc-without-gorilla-csrf-protection.go-net-http-handlefunc-without-gorilla-csrf-protection
message: The application does not appear to verify inbound requests which can lead
  to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based
  authentication, an attacker can trick users into sending authenticated HTTP requests
  without their knowledge from any arbitrary domain they visit. This vulnerability
  can be prevented by getting the CSRF token from the request and including it in
  a response header by including `$W.Header.Set(X-CSRF-Token", csrf.Token($R))` in
  the function before calling `$W.Write()`, or by wrapping the `$FUNC` call with `csrf.Protect(authKey)($FUNC)`
  and using a key retrieved for instance from an environment variable.
severity: WARNING
metadata:
  likelihood: MEDIUM
  impact: MEDIUM
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-352: Cross-Site Request Forgery (CSRF)'
  functional-categories:
  - web::search::csrf-config::gorilla
  - web::search::csrf-config::net/http
  owasp:
  - A01:2021 - Broken Access Control
  - A05:2017 - Broken Access Control
  references:
  - https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
  - https://github.com/gorilla/csrf
  technology:
  - go
  - gorilla
  - go-net/http
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Cross-Site Request Forgery (CSRF)
  source: https://semgrep.dev/r/go.net.csrf.gorilla-csrf.go-net-http-handlefunc-without-gorilla-csrf-protection.go-net-http-handlefunc-without-gorilla-csrf-protection
  shortlink: https://sg.run/0v0B
  semgrep.dev:
    rule:
      r_id: 36754
      rv_id: 111498
      rule_id: GdUB9k
      version_id: WrTW3AO
      url: https://semgrep.dev/playground/r/WrTW3AO/go.net.csrf.gorilla-csrf.go-net-http-handlefunc-without-gorilla-csrf-protection.go-net-http-handlefunc-without-gorilla-csrf-protection
      origin: pro_rules
languages:
- go
options:
  symbolic_propagation: true
patterns:
- patterns:
  - pattern-inside: 'import "github.com/gorilla/csrf"

      ...

      '
  - pattern-inside: 'import "net/http"

      ...

      '
  - pattern-inside: '...

      func $FUNC($W http.ResponseWriter, $R *http.Request) { $...BODY }

      ...

      '
  - metavariable-pattern:
      metavariable: $...BODY
      patterns:
      - pattern-not: '...

          $W.Header().Set("...", csrf.Token(...))

          ...

          '
  - pattern-either:
    - patterns:
      - pattern: $HTTP.HandleFunc($ADDR, ..., <... $FUNC ...>)
      - metavariable-regex:
          metavariable: $HTTP
          regex: ^(http)$
    - pattern: '($HTTP : http.ServeMux).HandleFunc($ADDR, ..., <... $FUNC ...>)

        '
    - pattern: '($HTTP : *http.ServeMux).HandleFunc($ADDR, ..., <... $FUNC ...>)

        '
    - patterns:
      - pattern-inside: '$HTTP := http.NewServeMux()

          ...

          '
      - pattern: $HTTP.HandleFunc($ADDR, ..., <... $FUNC ...>)
  - pattern-not: $HTTP.HandleFunc($ADDR, ..., <... csrf.Protect(...)( <... $FUNC ...>)
      ...>)
  - focus-metavariable: $FUNC
