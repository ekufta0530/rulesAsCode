id: python.django.deserialization.tainted-shelve-django.tainted-shelve-django
message: 'The application may convert user-controlled data into an object, which can
  lead to an insecure deserialization vulnerability. An attacker can create a malicious
  serialized object, pass it to the application, and take advantage of the deserialization
  process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass
  access control measures. To prevent this vulnerability, leverage data formats such
  as JSON or XML as safer alternatives. If you need to deserialize user input in a
  specific format, consider digitally signing the data before serialization to prevent
  tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  The `shelve` module uses `pickle` and should not be used with data from untrusted
  sources.'
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::lang
  - web::source::cookie::django
  - web::source::http-params::django
  - web::source::http-body::django
  - web::source::header::django
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://portswigger.net/web-security/deserialization
  - https://docs.python.org/3/library/shelve.html
  - https://docs.python.org/3/library/pickle.html
  - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
  related_oss_rules:
  - python.aws-lambda.security.tainted-pickle-deserialization
  - python.lang.security.deserialization.avoid-shelve
  technology:
  - python
  - django
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/python.django.deserialization.tainted-shelve-django.tainted-shelve-django
  shortlink: https://sg.run/ZAK7
  semgrep.dev:
    rule:
      r_id: 44935
      rv_id: 111825
      rule_id: GdUbDP
      version_id: X0TQ26o
      url: https://semgrep.dev/playground/r/X0TQ26o/python.django.deserialization.tainted-shelve-django.tainted-shelve-django
      origin: pro_rules
languages:
- python
mode: taint
options:
  symbolic_propagation: true
pattern-sources:
- patterns:
  - pattern-either:
    - pattern-either:
      - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC(...,\
          \ $REQ, ...):\n  ...\n"
      - patterns:
        - pattern-either:
          - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
              \  ...\n"
          - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n\
              ...):\n  ...                              \n"
        - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
        - metavariable-regex:
            metavariable: $METHOD
            regex: (get|post|put|patch|delete|head)
    - pattern-either:
      - pattern-inside: "def $VIEW($REQ, ...):\n  ...\n  return django.shortcuts.render($REQ,\
          \ ...)\n"
      - pattern-inside: "def $VIEW($REQ, ...):\n  ...\n  return django.shortcuts.redirect(...)\n"
      - pattern-inside: "def $VIEW($REQ, ...):\n  ...\n  return django.http.HttpResponseRedirect(...)\n"
      - pattern-inside: '$REQ = django.http.HttpRequest()

          ...

          '
  - pattern-either:
    - patterns:
      - pattern: $REQ.$FUNCTION(...)
      - metavariable-regex:
          metavariable: $FUNCTION
          regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
    - patterns:
      - pattern-either:
        - pattern: $REQ.$PROPERTY
        - pattern: $REQ.$PROPERTY[...]
        - pattern: $REQ.$PROPERTY.get(...)
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
- patterns:
  - pattern-either:
    - pattern-inside: "def $VIEW($REQ, ..., $PARAM, ...):\n  ...\n  return django.shortcuts.render($REQ,\
        \ ...)\n"
    - pattern-inside: "def $VIEW($REQ, ..., $PARAM, ...):\n  ...\n  return django.shortcuts.redirect(...)\n"
    - pattern-inside: "def $VIEW($REQ, ..., $PARAM, ...):\n  ...\n  return django.http.HttpResponseRedirect(...)\n"
  - focus-metavariable: $PARAM
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: shelve.open($SINK, ...)
    - pattern: shelve.DbfilenameShelf($SINK, ...)
  - focus-metavariable: $SINK
