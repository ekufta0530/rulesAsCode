id: java.lang.security.audit.el-injection.el-injection
metadata:
  cwe:
  - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
  owasp:
  - A03:2021 - Injection
  source-rule-url: https://find-sec-bugs.github.io/bugs.htm#EL_INJECTION
  category: security
  technology:
  - java
  references:
  - https://owasp.org/Top10/A03_2021-Injection
  cwe2022-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: HIGH
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Code Injection
  source: https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection
  shortlink: https://sg.run/x1wp
  semgrep.dev:
    rule:
      r_id: 9174
      rv_id: 109714
      rule_id: gxU1Np
      version_id: xyTKZO1
      url: https://semgrep.dev/playground/r/xyTKZO1/java.lang.security.audit.el-injection.el-injection
      origin: community
message: An expression is built with a dynamic value. The source of the value(s) should
  be verified to avoid that unfiltered values fall into this risky code evaluation.
severity: WARNING
languages:
- java
patterns:
- pattern-either:
  - pattern: "class $CLASS {\n  ...\n  ExpressionFactory $EF;\n  ...\n  $X $METHOD(...)\
      \ {\n    ...\n    $EF.createValueExpression($CTX,$INPUT,...);\n    ...\n  }\n\
      \  ...\n}\n"
  - pattern: "class $CLASS {\n  ...\n  ExpressionFactory $EF = ...;\n  ...\n  $X $METHOD(...)\
      \ {\n    ...\n    $EF.createValueExpression($CTX,$INPUT,...);\n    ...\n  }\n\
      \  ...\n}\n"
  - pattern: "$X $METHOD(...) {\n  ...\n  ExpressionFactory $EF = ...;\n  ...\n  $EF.createValueExpression($CTX,$INPUT,...);\n\
      \  ...\n}\n"
  - pattern: "$X $METHOD(...,ExpressionFactory $EF,...) {\n  ...\n  $EF.createValueExpression($CTX,$INPUT,...);\n\
      \  ...\n}\n"
  - pattern: "class $CLASS {\n  ...\n  ExpressionFactory $EF;\n  ...\n  $X $METHOD(...)\
      \ {\n    ...\n    $EF.createMethodExpression($CTX,$INPUT,...);\n    ...\n  }\n\
      \  ...\n}\n"
  - pattern: "class $CLASS {\n  ...\n  ExpressionFactory $EF = ...;\n  ...\n  $X $METHOD(...)\
      \ {\n    ...\n    $EF.createMethodExpression($CTX,$INPUT,...);\n    ...\n  }\n\
      \  ...\n}\n"
  - pattern: "$X $METHOD(...) {\n  ...\n  ExpressionFactory $EF = ...;\n  ...\n  $EF.createMethodExpression($CTX,$INPUT,...);\n\
      \  ...\n}\n"
  - pattern: "$X $METHOD(...,ExpressionFactory $EF,...) {\n  ...\n  $EF.createMethodExpression($CTX,$INPUT,...);\n\
      \  ...\n}\n"
  - pattern: "$X $METHOD(String $INPUT, ...) {\n  ...\n  $OBJECT.buildConstraintViolationWithTemplate($INPUT,\
      \ ...);\n  ...\n}\n"
- pattern-not: "$X $METHOD(...) {\n  ...\n  $EF.createValueExpression($CTX,\"...\"\
    ,...);\n  ...\n}\n"
- pattern-not: "$X $METHOD(...) {\n  ...\n  String $S = \"...\";\n  ...\n  $EF.createValueExpression($CTX,$S,...);\n\
    \  ...\n}\n"
- pattern-not: "$X $METHOD(...) {\n  ...\n  $EF.createMethodExpression($CTX,\"...\"\
    ,...);\n  ...\n}\n"
- pattern-not: "$X $METHOD(...) {\n  ...\n  String $S = \"...\";\n  ...\n  $EF.createMethodExpression($CTX,$S,...);\n\
    \  ...\n}\n"
