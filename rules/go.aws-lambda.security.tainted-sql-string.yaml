id: go.aws-lambda.security.tainted-sql-string.tainted-sql-string
languages:
- go
severity: ERROR
message: Detected user input used to manually construct a SQL string. This is usually
  bad practice because manual construction could accidentally result in a SQL injection.
  An attacker could use a SQL injection to steal or modify contents of the database.
  Instead, use a parameterized query which is available by default in most database
  engines. Alternatively, consider using an object-relational mapper (ORM) such as
  Sequelize which will protect your queries.
metadata:
  references:
  - https://owasp.org/www-community/attacks/SQL_Injection
  category: security
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  technology:
  - aws-lambda
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - vuln
  likelihood: HIGH
  impact: MEDIUM
  confidence: MEDIUM
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/go.aws-lambda.security.tainted-sql-string.tainted-sql-string
  shortlink: https://sg.run/vX3Y
  semgrep.dev:
    rule:
      r_id: 18233
      rv_id: 109574
      rule_id: 0oUwqg
      version_id: GxTv6Kk
      url: https://semgrep.dev/playground/r/GxTv6Kk/go.aws-lambda.security.tainted-sql-string.tainted-sql-string
      origin: community
mode: taint
pattern-sources:
- patterns:
  - pattern-either:
    - pattern-inside: 'func $HANDLER($CTX $CTXTYPE, $EVENT $TYPE, ...) {...}

        ...

        lambda.Start($HANDLER, ...)

        '
    - patterns:
      - pattern-inside: 'func $HANDLER($EVENT $TYPE) {...}

          ...

          lambda.Start($HANDLER, ...)

          '
      - pattern-not-inside: 'func $HANDLER($EVENT context.Context) {...}

          ...

          lambda.Start($HANDLER, ...)

          '
  - focus-metavariable: $EVENT
pattern-sinks:
- patterns:
  - pattern-either:
    - patterns:
      - pattern: '"$SQLSTR" + ...

          '
      - metavariable-regex:
          metavariable: $SQLSTR
          regex: (?i)(\s*select|\s*delete|\s*insert|\s*create|\s*update|\s*alter|\s*drop).*
    - patterns:
      - pattern-either:
        - pattern: fmt.Fprintf($F, "$SQLSTR", ...)
        - pattern: fmt.Sprintf("$SQLSTR", ...)
        - pattern: fmt.Printf("$SQLSTR", ...)
      - metavariable-regex:
          metavariable: $SQLSTR
          regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*%(v|s|q).*
  - pattern-not-inside: 'log.$PRINT(...)

      '
pattern-sanitizers:
- pattern: strconv.Atoi(...)
