id: cpp.lang.security.strings.alloc-strlen.alloc-strlen
message: '`strlen(...)` returns the number of characters in a string, excluding the
  NUL terminator. If a string is later copied into this allocated buffer, it will
  trigger memory corruption.'
severity: WARNING
metadata:
  likelihood: LOW
  impact: HIGH
  confidence: MEDIUM
  category: security
  subcategory:
  - vuln
  cert:
  - C
  - C++
  - L1
  - STR31-C
  cwe:
  - 'CWE-131: Incorrect Calculation of Buffer Size'
  functional-categories:
  - memory::sink::buffer-overflow
  references:
  - https://wiki.sei.cmu.edu/confluence/display/c/STR31-C.+Guarantee+that+storage+for+strings+has+sufficient+space+for+character+data+and+the+null+terminator
  technology:
  - cpp
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Other
  source: https://semgrep.dev/r/cpp.lang.security.strings.alloc-strlen.alloc-strlen
  shortlink: https://sg.run/nJNlZ
  semgrep.dev:
    rule:
      r_id: 114880
      rv_id: 257491
      rule_id: 4bUR9EX
      version_id: 44TARyA
      url: https://semgrep.dev/playground/r/44TARyA/cpp.lang.security.strings.alloc-strlen.alloc-strlen
      origin: pro_rules
languages:
- cpp
- c
min-version: 1.59.0
patterns:
- pattern-either:
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        aligned_alloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        aligned_alloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        calloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        calloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        malloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        malloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        realloc(0, $SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        realloc(0, $SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        reallocf(0, $SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        reallocf(0, $SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        std::aligned_alloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        std::aligned_alloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        std::calloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        std::calloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        std::malloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        std::malloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        std::realloc(0, $SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        std::realloc(0, $SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        valloc($SINK_LEN);

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        valloc($SINK_LEN);

        '
    - metavariable-comparison:
        comparison: str($LEN) == str($SINK_LEN)
        metavariable: $SINK_LEN
    - focus-metavariable: $SINK_LEN
  - pattern: aligned_alloc(strlen(...))
  - pattern: calloc(strlen(...))
  - pattern: malloc(strlen(...))
  - pattern: realloc(0, strlen(...))
  - pattern: reallocf(0, strlen(...))
  - pattern: std::aligned_alloc(strlen(...))
  - pattern: std::calloc(strlen(...))
  - pattern: std::malloc(strlen(...))
  - pattern: std::realloc(0, strlen(...))
  - pattern: valloc(strlen(...))
  - patterns:
    - pattern: '$LEN = strlen(...);

        ...

        new $CHAR[$LEN];

        '
    - pattern-not-inside: '$LEN = strlen(...);

        ...

        <... $LEN ...>;

        ...

        new $CHAR[$LEN];

        '
    - metavariable-regex:
        metavariable: $CHAR
        regex: ^(unsigned\s*|signed\s*)?(u_char|char|uint8_t)$
  - patterns:
    - pattern: new $CHAR[strlen(...)]
    - metavariable-regex:
        metavariable: $CHAR
        regex: ^(unsigned\s*|signed\s*)?(u_char|char|uint8_t)$
