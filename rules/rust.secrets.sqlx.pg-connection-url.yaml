id: rust.secrets.sqlx.pg-connection-url.pg-connection-url
message: A secret is hard-coded in the application. Secrets stored in source code,
  such as credentials, identifiers, and other types of sensitive data, can be leaked
  and used by internal or external malicious actors. It is recommended to rotate the
  secret and retrieve them from a secure secret vault or Hardware Security Module
  (HSM), alternatively environment variables can be used if allowed by your company
  policy.
severity: WARNING
metadata:
  likelihood: LOW
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-798: Use of Hard-coded Credentials'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  owasp:
  - A07:2021 - Identification and Authentication Failures
  references:
  - https://docs.rs/sqlx/latest/sqlx/
  - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
  technology:
  - pg
  - postgres
  - rust
  - sqlx
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - Hard-coded Secrets
  source: https://semgrep.dev/r/rust.secrets.sqlx.pg-connection-url.pg-connection-url
  shortlink: https://sg.run/OXOe
  semgrep.dev:
    rule:
      r_id: 62531
      rv_id: 732010
      rule_id: lBUG68
      version_id: jQTQ0v0
      url: https://semgrep.dev/playground/r/jQTQ0v0/rust.secrets.sqlx.pg-connection-url.pg-connection-url
      origin: pro_rules
languages:
- rust
mode: taint
pattern-sources:
- pattern-either:
  - patterns:
    - pattern-inside: '"$URL"

        '
    - metavariable-regex:
        metavariable: $URL
        regex: (.*postgres.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)[^{}]*@.*
  - patterns:
    - pattern-inside: '"$STR"

        '
    - metavariable-regex:
        metavariable: $STR
        regex: .*password=["']?[^{}'"%\s]+.*
pattern-sinks:
- pattern-either:
  - patterns:
    - pattern-either:
      - pattern: sqlx::PgConnection::connect(...)
      - pattern: sqlx::postgres::PgConnection::connect(...)
      - pattern: sqlx::postgres::PgConnectOptions::from_str(...)
      - pattern: sqlx::postgres::PgConnectOptions::from_url(...)
      - pattern: sqlx::PgPool::connect(...)
      - pattern: sqlx::PgPool::connect_lazy(...)
      - pattern: sqlx::postgres::PgPool::connect(...)
      - pattern: sqlx::postgres::PgPool::connect_lazy(...)
      - pattern: sqlx::postgres::PgPoolOptions::new(). ... .connect(...)
      - pattern: sqlx::postgres::PgPoolOptions::new(). ... .connect_lazy(...)
      - patterns:
        - pattern-either:
          - pattern: $S.connect(...)
          - pattern: $S.connect_lazy(...)
        - pattern-either:
          - pattern-inside: 'let $S = sqlx::postgres::PgPoolOptions::new();

              ...

              '
          - pattern-inside: 'let $S = sqlx::postgres::PgPoolOptions::new(). ...;

              ...

              '
      - patterns:
        - focus-metavariable: $STR
        - pattern-either:
          - pattern-inside: 'let $X: sqlx::postgres::PgConnectOptions = $STR.parse().
              ...;

              '
          - pattern-inside: 'let $X: sqlx::postgres::PgConnectOptions = $STR.parse()?;

              '
  - patterns:
    - pattern-either:
      - pattern: sqlx::AnyConnection::connect(...)
      - pattern: sqlx::any::AnyConnectOptions::from_str(...)
      - pattern: sqlx::any::AnyConnectOptions::from_url(...)
      - pattern: sqlx::Pool::connect(...)
      - pattern: sqlx::Pool::connect_lazy(...)
      - pattern: sqlx::any::AnyPoolOptions::new(). ... .connect(...)
      - pattern: sqlx::any::AnyPoolOptions::new(). ... .connect_lazy(...)
      - patterns:
        - pattern-either:
          - pattern: $S.connect(...)
          - pattern: $S.connect_lazy(...)
        - pattern-either:
          - pattern-inside: 'let $S = sqlx::any::AnyPoolOptions::new();

              ...

              '
          - pattern-inside: 'let $S = sqlx::any::AnyPoolOptions::new(). ...;

              ...

              '
      - patterns:
        - focus-metavariable: $STR
        - pattern-either:
          - pattern-inside: 'let $X: sqlx::any::AnyConnectOptions = $STR.parse().
              ...;

              '
          - pattern-inside: 'let $X: sqlx::any::AnyConnectOptions = $STR.parse()?;

              '
