id: csharp.dotnet.security.audit.ldap-injection.ldap-injection
message: LDAP queries are constructed dynamically on user-controlled input. This vulnerability
  in code could lead to an arbitrary LDAP query execution.
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: MEDIUM
  confidence: MEDIUM
  category: security
  cwe:
  - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
    Injection'')'
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://owasp.org/Top10/A03_2021-Injection/
  - https://cwe.mitre.org/data/definitions/90
  - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example
  subcategory:
  - vuln
  technology:
  - .net
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - LDAP Injection
  source: https://semgrep.dev/r/csharp.dotnet.security.audit.ldap-injection.ldap-injection
  shortlink: https://sg.run/GJ9z
  semgrep.dev:
    rule:
      r_id: 27692
      rv_id: 109173
      rule_id: 2ZUv3R
      version_id: BjTXrJe
      url: https://semgrep.dev/playground/r/BjTXrJe/csharp.dotnet.security.audit.ldap-injection.ldap-injection
      origin: community
languages:
- csharp
mode: taint
options:
  taint_unify_mvars: true
pattern-sources:
- patterns:
  - focus-metavariable: $INPUT
  - pattern-inside: $T $M($INPUT,...) {...}
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: $S.Filter = ... + $INPUT + ...
    - pattern: $S.Filter = String.Format(...,$INPUT)
    - pattern: $S.Filter = String.Concat(...,$INPUT)
pattern-sanitizers:
- pattern-either:
  - pattern: Regex.Replace($INPUT, ...)
  - pattern: $ENCODER.LdapFilterEncode($INPUT)
  - pattern: $ENCODER.LdapDistinguishedNameEncode($INPUT)
