id: python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
message: The object is passed strictly to jwt.encode(...) Make sure that sensitive
  information is not exposed through JWT token payload.
severity: WARNING
metadata:
  owasp:
  - A02:2017 - Broken Authentication
  - A04:2021 - Insecure Design
  cwe:
  - 'CWE-522: Insufficiently Protected Credentials'
  source-rule-url: https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  category: security
  technology:
  - jwt
  references:
  - https://owasp.org/Top10/A04_2021-Insecure_Design
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: LOW
  confidence: LOW
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Cryptographic Issues
  source: https://semgrep.dev/r/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
  shortlink: https://sg.run/ox8R
  semgrep.dev:
    rule:
      r_id: 9560
      rv_id: 110288
      rule_id: 9AU1zW
      version_id: K3Tvjy9
      url: https://semgrep.dev/playground/r/K3Tvjy9/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
      origin: community
languages:
- python
patterns:
- pattern-inside: "def $FUNC(...,$INPUT,...):\n  ...\n"
- pattern: jwt.encode($INPUT,...)
