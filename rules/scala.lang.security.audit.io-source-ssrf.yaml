id: scala.lang.security.audit.io-source-ssrf.io-source-ssrf
patterns:
- pattern-either:
  - pattern: Source.fromURL($URL,...)
  - pattern: Source.fromURI($URL,...)
- pattern-inside: 'import scala.io.$SOURCE

    ...

    '
- pattern-either:
  - pattern-inside: "def $FUNC(..., $URL: $T, ...) = $A {\n  ...\n}\n"
  - pattern-inside: "def $FUNC(..., $URL: $T, ...) = {\n  ...\n}\n"
message: A parameter being passed directly into `fromURL` most likely lead to SSRF.
  This could allow an attacker to send data to their own server, potentially exposing
  sensitive data sent with this request. They could also probe internal servers or
  other resources that the server runnig this code can access. Do not allow arbitrary
  hosts. Instead, create an allowlist for approved hosts hardcode the correct host.
metadata:
  cwe:
  - 'CWE-918: Server-Side Request Forgery (SSRF)'
  owasp:
  - A10:2021 - Server-Side Request Forgery (SSRF)
  references:
  - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  - https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource
  category: security
  technology:
  - scala
  confidence: MEDIUM
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - audit
  likelihood: LOW
  impact: HIGH
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Server-Side Request Forgery (SSRF)
  source: https://semgrep.dev/r/scala.lang.security.audit.io-source-ssrf.io-source-ssrf
  shortlink: https://sg.run/Qbz4
  semgrep.dev:
    rule:
      r_id: 18486
      rv_id: 110630
      rule_id: GdUDOZ
      version_id: ExTjAQE
      url: https://semgrep.dev/playground/r/ExTjAQE/scala.lang.security.audit.io-source-ssrf.io-source-ssrf
      origin: community
languages:
- scala
severity: WARNING
