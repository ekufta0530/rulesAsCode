id: rust.rocket.sql.diesel-taint.diesel-taint
message: Untrusted input might be used to build a database query, which can lead to
  a SQL injection vulnerability. An attacker can execute malicious SQL statements
  and gain unauthorized access to sensitive data, modify, delete data, or execute
  arbitrary system commands. To prevent this vulnerability, use prepared statements
  that do not concatenate user-controllable strings and use parameterized queries
  where SQL commands and user data are strictly separated. Also, consider using an
  object-relational (ORM) framework to operate with safer abstractions.
severity: ERROR
metadata:
  likelihood: HIGH
  impact: HIGH
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  cwe2020-top25: true
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - db::sink::sql-or-nosql-query::diesel
  - db::sink::sql-or-nosql-query::rocket_db_pools
  - web::source::cookie::rocket
  - web::source::form-data::rocket
  - web::source::header::rocket
  - web::source::http-body::rocket
  - web::source::http-params::rocket
  - web::source::url-path-params::rocket
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  references:
  - https://docs.rs/diesel/latest/diesel/
  - https://owasp.org/Top10/A03_2021-Injection
  technology:
  - diesel
  - mysql
  - postgres
  - rocket
  - rust
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/rust.rocket.sql.diesel-taint.diesel-taint
  shortlink: https://sg.run/DW2G
  semgrep.dev:
    rule:
      r_id: 63208
      rv_id: 229351
      rule_id: 8GUw6o
      version_id: LjT7ZpL
      url: https://semgrep.dev/playground/r/LjT7ZpL/rust.rocket.sql.diesel-taint.diesel-taint
      origin: pro_rules
languages:
- rust
mode: taint
pattern-sources:
- label: INPUT
  pattern-either:
  - patterns:
    - pattern: $PARAM
    - pattern-either:
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : rocket::request::Form<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : rocket::http::Cookies,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &rocket::http::CookieJar<'$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : rocket::serde::json::Json<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : String, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &str, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &RawStr, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &OsStr, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : OsString, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<String>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&str>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&RawStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&OsStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<OsString>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<rocket::request::Form<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<rocket::http::Cookies>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&rocket::http::CookieJar<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<rocket::serde::json::Json<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<String>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&str>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&RawStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&OsStr>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<OsString>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<String>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&str>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&RawStr>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&OsStr>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<OsString>>,\
          \ ...) {\n  ...\n}\n"
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|put|post|delete|head|patch|options)$
  - patterns:
    - pattern: $PARAM
    - pattern-either:
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : $TYPE, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : $TYPE<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : $TYPE<'$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &$TYPE, ...)\
          \ {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &$TYPE<$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : &$TYPE<'$T>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Vec<&$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&$TYPE>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&$TYPE<$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<&$TYPE<'$T>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<$TYPE>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<$TYPE<$T>>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<$TYPE<'$T>>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&$TYPE>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&$TYPE<$T>>>,\
          \ ...) {\n  ...\n}\n"
      - pattern-inside: "#[$METHOD($...ROUTE)]\nfn $FUNC(..., $PARAM : Option<Vec<&$TYPE<'$T>>>,\
          \ ...) {\n  ...\n}\n"
    - pattern-inside: 'struct $TYPE { ... };

        ...

        '
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|put|post|delete|head|patch|options)$
- label: REQUEST
  patterns:
  - pattern-either:
    - pattern-inside: "fn $FUNC(..., $REQ : &'r rocket::Request<'_>, ...) {\n  ...\n\
        }\n"
    - pattern-inside: "fn $FUNC(..., $REQ : &'r rocket::request::Request<'_>, ...)\
        \ {\n  ...\n}\n"
    - pattern-inside: "fn $FUNC(..., $REQ : &rocket::Request, ...) {\n  ...\n}\n"
    - pattern-inside: "fn $FUNC(..., $REQ : &rocket::request::Request, ...) {\n  ...\n\
        }\n"
- label: REQ_INPUT
  patterns:
  - pattern-either:
    - pattern: $R.path()
    - pattern: $R.query()
    - pattern: $R.map_path()
    - pattern: $R.clear_query()
    - pattern: $R.cookies()
    - pattern: $R.headers()
    - pattern: $R.query_value
- label: CONCAT
  patterns:
  - pattern-either:
    - pattern: '"..." + ...

        '
    - pattern: '... + "..."'
    - pattern: $STR.push_str(...)
    - pattern: format!(...)
    - pattern: std::fmt::format(...)
pattern-propagators:
- from: $FROM
  patterns:
  - pattern: $TO.push_str($FROM)
  to: $TO
- from: $FROM
  patterns:
  - patterns:
    - pattern: $TO.$FUNC(..., $FROM)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(insert_str|replace_range)$
  to: $TO
- from: $FROM
  patterns:
  - patterns:
    - pattern: $FROM.$FUNC(&$TO)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
  to: $TO
- from: $FROM
  patterns:
  - pattern: $TO = $FROM.into()
  to: $TO
- from: $FROM
  patterns:
  - pattern: $TO = std::from_utf8($FROM)
  to: $TO
- from: $FROM
  patterns:
  - pattern: "let $TO = if let $SOME = $FROM {\n  ...\n} else {\n  ...\n};\n"
  to: $TO
pattern-sinks:
- patterns:
  - focus-metavariable: $QUERY
  - pattern-either:
    - pattern: diesel::sql_query($QUERY, ...)
    - pattern: rocket_db_pools::diesel::sql_query($QUERY, ...)
    - pattern: '($QB: QueryBuilder<$T>).push_sql($QUERY,...)

        '
    - pattern: '($QB: diesel::pg::PgQueryBuilder).push_sql($QUERY,...)

        '
    - pattern: '($QB: diesel::mysql::MysqlQueryBuilder).push_sql($QUERY,...)

        '
    - pattern: '($QB: diesel::sqlite::query_builder::SqliteQueryBuilder).push_sql($QUERY,...)

        '
    - pattern: '($QB: rocket_db_pools::diesel::pg::PgQueryBuilder).push_sql($QUERY,...)

        '
    - pattern: '($QB: rocket_db_pools::diesel::mysql::MysqlQueryBuilder).push_sql($QUERY,...)

        '
    - pattern: '($QB: rocket_db_pools::diesel::sqlite::query_builder::SqliteQueryBuilder).push_sql($QUERY,...)

        '
    - patterns:
      - pattern: $QB.push_sql($QUERY,...)
      - pattern-either:
        - pattern-inside: 'let $QB = diesel::pg::PgQueryBuilder::new(...);

            ...

            '
        - pattern-inside: 'let $QB = diesel::mysql::MysqlQueryBuilder::new(...);

            ...

            '
        - pattern-inside: 'let $QB = diesel::sqlite::query_builder::SqliteQueryBuilder::new(...);

            ...

            '
        - pattern-inside: 'let $QB = rocket_db_pools::diesel::pg::PgQueryBuilder::new(...);

            ...

            '
        - pattern-inside: 'let $QB = rocket_db_pools::diesel::mysql::MysqlQueryBuilder::new(...);

            ...

            '
        - pattern-inside: 'let $QB = rocket_db_pools::diesel::sqlite::query_builder::SqliteQueryBuilder::new(...);

            ...

            '
  requires: (INPUT and CONCAT) or (REQUEST and REQ_INPUT and CONCAT)
