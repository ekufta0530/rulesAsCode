id: python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
mode: taint
options:
  symbolic_propagation: true
pattern-sources:
- patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: flask.request.form.get(...)
        - pattern: flask.request.form[...]
        - pattern: flask.request.args.get(...)
        - pattern: flask.request.args[...]
        - pattern: flask.request.values.get(...)
        - pattern: flask.request.values[...]
        - pattern: flask.request.cookies.get(...)
        - pattern: flask.request.cookies[...]
        - pattern: flask.request.stream
        - pattern: flask.request.headers.get(...)
        - pattern: flask.request.headers[...]
        - pattern: flask.request.data
        - pattern: flask.request.full_path
        - pattern: flask.request.url
        - pattern: flask.request.json
        - pattern: flask.request.get_json()
        - pattern: flask.request.view_args.get(...)
        - pattern: flask.request.view_args[...]
        - patterns:
          - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n \
              \ ...\n"
          - focus-metavariable: $ROUTEVAR
    - patterns:
      - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
      - pattern-either:
        - pattern: request.$PROPERTY.get(...)
        - pattern: request.$PROPERTY[...]
    - patterns:
      - pattern-either:
        - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ,\
            \ ...):\n  ...\n"
        - patterns:
          - pattern-either:
            - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                \  ...\n"
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\
                \ ...):\n  ...                              \n"
          - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern: $REQ.POST.get(...)
        - pattern: $REQ.POST[...]
        - pattern: $REQ.FILES.get(...)
        - pattern: $REQ.FILES[...]
        - pattern: $REQ.DATA.get(...)
        - pattern: $REQ.DATA[...]
        - pattern: $REQ.QUERY_PARAMS.get(...)
        - pattern: $REQ.QUERY_PARAMS[...]
        - pattern: $REQ.data.get(...)
        - pattern: $REQ.data[...]
        - pattern: $REQ.query_params.get(...)
        - pattern: $REQ.query_params[...]
        - pattern: $REQ.content_type
        - pattern: $REQ.content_type
        - pattern: $REQ.stream
        - pattern: $REQ.stream
    - patterns:
      - pattern-either:
        - pattern-inside: "class $SERVER(..., http.server.BaseHTTPRequestHandler,\
            \ ...):\n  ...\n"
        - pattern-inside: "class $SERVER(..., http.server.StreamRequestHandler, ...):\n\
            \  ...\n"
        - pattern-inside: "class $SERVER(..., http.server.DatagramRequestHandler,\
            \ ...):\n  ...\n"
      - pattern-either:
        - pattern: self.requestline
        - pattern: self.path
        - pattern: self.headers[...]
        - pattern: self.headers.get(...)
        - pattern: self.rfile
    - patterns:
      - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
      - pattern: $REQ.$ANYTHING
      - pattern-not: $REQ.dbsession
pattern-sinks:
- patterns:
  - pattern-either:
    - pattern: '_testcapi.run_in_subinterp($PAYLOAD, ...)

        '
    - pattern: 'test.support.run_in_subinterp($PAYLOAD, ...)

        '
  - focus-metavariable: $PAYLOAD
  - pattern-not: '_testcapi.run_in_subinterp("...", ...)

      '
  - pattern-not: 'test.support.run_in_subinterp("...", ...)

      '
message: Found user controlled content in `run_in_subinterp`. This is dangerous because
  it allows a malicious actor to run arbitrary Python code.
metadata:
  cwe:
  - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (''Eval
    Injection'')'
  owasp:
  - A03:2021 - Injection
  references:
  - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
  category: security
  technology:
  - python
  confidence: MEDIUM
  subcategory:
  - vuln
  likelihood: HIGH
  impact: HIGH
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - Code Injection
  source: https://semgrep.dev/r/python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
  shortlink: https://sg.run/wLpY
  semgrep.dev:
    rule:
      r_id: 27273
      rv_id: 110439
      rule_id: GdUkxR
      version_id: GxTv8v9
      url: https://semgrep.dev/playground/r/GxTv8v9/python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
      origin: community
severity: WARNING
languages:
- python
