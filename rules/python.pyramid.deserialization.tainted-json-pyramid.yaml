id: python.pyramid.deserialization.tainted-json-pyramid.tainted-json-pyramid
message: 'The application may convert user-controlled data into an object, which can
  lead to an insecure deserialization vulnerability. An attacker can create a malicious
  serialized object, pass it to the application, and take advantage of the deserialization
  process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass
  access control measures. To prevent this vulnerability, leverage data formats such
  as JSON or XML as safer alternatives. If you need to deserialize user input in a
  specific format, consider digitally signing the data before serialization to prevent
  tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  Even for a data-only serialization format such as JSON, a malicious string may cause
  the decoder to consume considerable CPU and memory resources. Limiting the size
  of data to be parsed is recommended.'
severity: ERROR
metadata:
  likelihood: MEDIUM
  impact: MEDIUM
  confidence: HIGH
  category: security
  subcategory:
  - vuln
  cwe:
  - 'CWE-502: Deserialization of Untrusted Data'
  cwe2021-top25: true
  cwe2022-top25: true
  functional-categories:
  - deserialization::sink::load-object::lang
  - web::source::cookie::pyramid
  - web::source::http-params::pyramid
  - web::source::http-body::pyramid
  - web::source::header::pyramid
  owasp:
  - A08:2017 - Insecure Deserialization
  - A08:2021 - Software and Data Integrity Failures
  references:
  - https://portswigger.net/web-security/deserialization
  - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
  - https://docs.python.org/3/library/json.html
  - https://docs.python.org/3/library/pickle.html
  - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
  technology:
  - python
  - pyramid
  - json
  license: Copyright 2023 Semgrep, Inc.
  vulnerability_class:
  - 'Insecure Deserialization '
  source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-json-pyramid.tainted-json-pyramid
  shortlink: https://sg.run/oQy7
  semgrep.dev:
    rule:
      r_id: 44960
      rv_id: 111887
      rule_id: oqUGBD
      version_id: 7ZTgn92
      url: https://semgrep.dev/playground/r/7ZTgn92/python.pyramid.deserialization.tainted-json-pyramid.tainted-json-pyramid
      origin: pro_rules
languages:
- python
mode: taint
pattern-sources:
- patterns:
  - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
  - pattern-either:
    - patterns:
      - pattern: $REQ.$FUNCTION(...)
      - metavariable-regex:
          metavariable: $FUNCTION
          regex: ^(as_bytes|make_tempfile)$
    - patterns:
      - pattern-either:
        - pattern: $REQ.$PROPERTY
        - pattern: $REQ.$PROPERTY[...]
        - pattern: $REQ.$PROPERTY.get(...)
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
pattern-sinks:
- patterns:
  - focus-metavariable: $SINK
  - pattern-either:
    - pattern: json.load($SINK, ...)
    - pattern: json.loads($SINK, ...)
    - patterns:
      - pattern-either:
        - pattern: $DEC.decode($SINK)
        - pattern: $DEC.raw_decode($SINK)
      - pattern-inside: '$DEC = json.JSONDecoder()

          ...

          '
