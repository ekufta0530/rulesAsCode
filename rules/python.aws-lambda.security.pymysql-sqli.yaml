id: python.aws-lambda.security.pymysql-sqli.pymysql-sqli
languages:
- python
message: 'Detected SQL statement that is tainted by `event` object. This could lead
  to SQL injection if the variable is user-controlled and not properly sanitized.
  In order to prevent SQL injection, use parameterized queries or prepared statements
  instead. You can use parameterized statements like so: `cursor.execute(''SELECT
  * FROM projects WHERE status = %s'', (''active''))`'
mode: taint
metadata:
  references:
  - https://pypi.org/project/PyMySQL/#id4
  category: security
  owasp:
  - A01:2017 - Injection
  - A03:2021 - Injection
  cwe:
  - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (''SQL
    Injection'')'
  technology:
  - aws-lambda
  - pymysql
  cwe2022-top25: true
  cwe2021-top25: true
  subcategory:
  - vuln
  likelihood: HIGH
  impact: MEDIUM
  confidence: MEDIUM
  license: Commons Clause License Condition v1.0[LGPL-2.1-only]
  vulnerability_class:
  - SQL Injection
  source: https://semgrep.dev/r/python.aws-lambda.security.pymysql-sqli.pymysql-sqli
  shortlink: https://sg.run/reve
  semgrep.dev:
    rule:
      r_id: 18269
      rv_id: 110136
      rule_id: JDUlel
      version_id: GxTv6Q7
      url: https://semgrep.dev/playground/r/GxTv6Q7/python.aws-lambda.security.pymysql-sqli.pymysql-sqli
      origin: community
pattern-sinks:
- patterns:
  - focus-metavariable: $QUERY
  - pattern: $CURSOR.execute($QUERY,...)
  - pattern-either:
    - pattern-inside: 'import pymysql

        ...

        '
    - pattern-inside: 'import pymysql.cursors

        ...

        '
pattern-sources:
- patterns:
  - pattern: event
  - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
severity: WARNING
