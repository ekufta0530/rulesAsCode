rules:
- id: dgryski.semgrep-go.anon-struct-args.anonymous-struct-args
  patterns:
  - pattern-either:
    - pattern: func $FUNC(..., $NAME *struct { ... }, ...)
    - pattern: func $FUNC(..., $NAME struct { ... }, ...)
    - pattern: func ($T $TYPE) $FUNC(..., $NAME *struct { ... }, ...)
    - pattern: func ($T $TYPE) $FUNC(..., $NAME struct { ... }, ...)
  message: Odd use of anonymous structs for function arguments
  languages:
  - go
  severity: ERROR
  metadata:
    license: MIT
    source: https://semgrep.dev/r/dgryski.semgrep-go.anon-struct-args.anonymous-struct-args
    shortlink: https://sg.run/gLyo
    semgrep.dev:
      rule:
        r_id: 8685
        rv_id: 11972
        rule_id: lBU9eo
        version_id: qkTbWj
        url: https://semgrep.dev/playground/r/qkTbWj/dgryski.semgrep-go.anon-struct-args.anonymous-struct-args
        origin: community
- id: go.lang.security.injection.open-redirect.open-redirect
  languages:
  - go
  severity: WARNING
  message: An HTTP redirect was found to be crafted from user-input `$REQUEST`. This
    can lead to open redirect vulnerabilities, potentially allowing attackers to redirect
    users to malicious web sites. It is recommend where possible to not allow user-input
    to craft the redirect URL. When user-input is necessary to craft the request,
    it is recommended to follow OWASP best practices to restrict the URL to domains
    in an allowlist.
  options:
    interfile: true
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    references:
    - https://knowledge-base.secureflag.com/vulnerabilities/unvalidated_redirects___forwards/open_redirect_go_lang.html
    category: security
    technology:
    - go
    confidence: HIGH
    description: An HTTP redirect was found to be crafted from user-input leading
      to an open redirect vulnerability
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    vulnerability_class:
    - Open Redirect
    source: https://semgrep.dev/r/go.lang.security.injection.open-redirect.open-redirect
    shortlink: https://sg.run/2ZW45
    semgrep.dev:
      rule:
        r_id: 113619
        rv_id: 254642
        rule_id: DbU6RlN
        version_id: 9lTeD84
        url: https://semgrep.dev/playground/r/9lTeD84/go.lang.security.injection.open-redirect.open-redirect
        origin: community
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQUEST : *http.Request).$ANYTHING
      - pattern: |
          ($REQUEST : http.Request).$ANYTHING
    - metavariable-regex:
        metavariable: $ANYTHING
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$
  - label: CLEAN
    requires: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          "$URLSTR" + $INPUT
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$URLSTR", $INPUT, ...)
          - pattern: fmt.Sprintf("$URLSTR", $INPUT, ...)
          - pattern: fmt.Printf("$URLSTR", $INPUT, ...)
    - metavariable-regex:
        metavariable: $URLSTR
        regex: .*//[a-zA-Z0-10]+\..*
  pattern-sinks:
  - requires: INPUT and not CLEAN
    patterns:
    - pattern: http.Redirect($W, $REQ, $URL, ...)
    - focus-metavariable: $URL
- id: html.correctness.https-equiv.https-equiv
  metadata:
    category: correctness
    technology:
    - html
    references:
    - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/html.correctness.https-equiv.https-equiv
    shortlink: https://sg.run/X5RdA
    semgrep.dev:
      rule:
        r_id: 113620
        rv_id: 254644
        rule_id: WAUWqBQ
        version_id: rxT0PBn
        url: https://semgrep.dev/playground/r/rxT0PBn/html.correctness.https-equiv.https-equiv
        origin: community
  message: The correct attribute name for this meta tag is `http-equiv`, not `https-equiv`.
  severity: ERROR
  languages:
  - html
  pattern-either:
  - pattern: <meta ... https-equiv=...>
  fix-regex:
    regex: https-equiv=
    replacement: http-equiv=