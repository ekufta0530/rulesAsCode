rules:
- id: java.spring.security.spring-tainted-xmldecoder.spring-tainted-xmldecoder
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) or XIncludes which
    can interact with internal or external hosts. XXE can lead to other vulnerabilities,
    such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side
    request forgery (SSRF), depending on the application configuration. An attacker
    can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS)
    attack, also known as a `Billion Laughs Attack`. The best defense against XXE
    is to have an XML parser that supports disabling DTDs. Limiting the use of external
    entities from the start can prevent the parser from being used to process untrusted
    XML files. Reducing dependencies on external resources is also a good practice
    for performance reasons. It is difficult to guarantee that even a trusted XML
    file on your server or during transmission has not been tampered with by a malicious
    third-party. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - web::source::cookie::Spring
    - web::source::header::Spring
    - web::source::http-body::Spring
    - web::source::http-params::Spring
    - web::source::url-path-params::Spring
    - xml::sink::xml-parser::java.beans
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    technology:
    - Spring
    - java
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - XML Injection
    source: https://semgrep.dev/r/java.spring.security.spring-tainted-xmldecoder.spring-tainted-xmldecoder
    shortlink: https://sg.run/vogA
    semgrep.dev:
      rule:
        r_id: 43777
        rv_id: 742815
        rule_id: PeUKXY
        version_id: 2KTL8yP
        url: https://semgrep.dev/playground/r/2KTL8yP/java.spring.security.spring-tainted-xmldecoder.spring-tainted-xmldecoder
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $RET $METHOD(..., @$REQ(...) $TYPE $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., @$REQ $TYPE $SOURCE, ...) {...}
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute|MatrixVariable|RequestPart|RequestAttribute)
    - focus-metavariable: $SOURCE
  - patterns:
    - pattern-either:
      - pattern-inside: |
          @$MAPPING(...)
          $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}
      - pattern-inside: |
          @$MAPPING
          $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}
    - pattern-either:
      - pattern: $RET $METHOD(..., String $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., org.springframework.http.HttpEntity<$X> $SOURCE,
          ...) {...}
      - pattern: $RET $METHOD(..., java.io.InputStream $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., java.io.Reader $SOURCE, ...) {...}
    - metavariable-regex:
        metavariable: $MAPPING
        regex: (ResponseBody|RequestMapping|PatchMapping|GetMapping|DeleteMapping|PutMapping|PostMapping|HttpExchange|GetExchange|PostExchange|PutExchange|PatchExchange|DeleteExchange|ResponseStatus)
    - focus-metavariable: $SOURCE
  - patterns:
    - pattern-either:
      - pattern: (org.springframework.web.context.request.WebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.NativeWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.FacesWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.ServletWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.servlet.handler.DispatcherServletWebRequest
          $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.async.AsyncWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.async.StandardServletAsyncWebRequest
          $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getHeader|getHeaderNames|getHeaderValues|getParameter|getParameterMap|getParameterNames|getParameterValues|getAttribute|getAttributeNames)
  - patterns:
    - pattern-either:
      - pattern: (org.springframework.http.HttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.client.ClientHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.ServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.ServletServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.multipart.support.RequestPartServletServerHttpRequest
          $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.reactive.ServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.reactive.ServerHttpRequestDecorator
          $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getPath|getQueryParams|getBody|getURI|getHeaders|getCookies)
  - patterns:
    - pattern-either:
      - pattern: (javax.servlet.ServletRequest $REQ).$METHOD(...)
      - pattern: (javax.servlet.http.HttpServletRequest $REQ).$METHOD(...)
      - pattern: (jakarta.servlet.ServletRequest $REQ).$METHOD(...)
      - pattern: (jakarta.servlet.http.HttpServletRequest $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString|getPathInfo)
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  pattern-sinks:
  - patterns:
    - focus-metavariable: $IN
    - pattern: $XML = new java.beans.XMLDecoder($IN, ...);
    - pattern-inside: |
        ...
        $VAR = $XML.readObject();
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
