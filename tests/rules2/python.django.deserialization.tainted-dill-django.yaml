rules:
- id: python.django.deserialization.tainted-dill-django.tainted-dill-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `dill` module allows arbitrary user defined classes and functions to be serialized.
    We do not recommend using it for unpickling data from untrusted sources. For deserializing
    data from untrusted sources we recommend using YAML or JSON libraries with built-in
    protections.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - deserialization::sink::load-object::dill
    - web::source::cookie::django
    - web::source::http-params::django
    - web::source::http-body::django
    - web::source::header::django
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pypi.org/project/dill/
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related-oss-rules:
    - python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
    technology:
    - python
    - django
    - rest_framework
    - dill
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/python.django.deserialization.tainted-dill-django.tainted-dill-django
    shortlink: https://sg.run/rQe6
    semgrep.dev:
      rule:
        r_id: 44925
        rv_id: 111815
        rule_id: 7KUJxg
        version_id: 0bTLeP1
        url: https://semgrep.dev/playground/r/0bTLeP1/python.django.deserialization.tainted-dill-django.tainted-dill-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n\
                ...):\n  ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: dill.Unpickler($SINK, ...)
      - pattern-either:
        - pattern: dill.load($SINK, ...)
        - pattern: dill.loads($SINK, ...)
        - pattern: dill.load_module(..., filename=$SINK, ...)
        - pattern: dill.load_module_asdict(..., filename=$SINK, ...)
        - pattern: dill.temp.load($SINK, ...)
        - pattern: dill.temp.load_source($SINK, ...)
        - pattern: dill.temp.loadIO($SINK, ...)
        - pattern: dill.temp.loadIO_source($SINK, ...)
