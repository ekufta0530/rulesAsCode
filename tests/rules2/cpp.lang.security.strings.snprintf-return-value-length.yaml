rules:
- id: cpp.lang.security.strings.snprintf-return-value-length.snprintf-return-value-length
  message: The return value of `snprintf` is the number of characters that would be
    written, excluding the NUL terminator. The return value must be validated before
    using it as a buffer index or buffer length.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cert:
    - ARR30-C
    - C
    - C++
    - L2
    cwe:
    - 'CWE-787: Out-of-bounds Write'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - memory::sink::buffer-overflow
    references:
    - https://cwe.mitre.org/data/definitions/787.html
    - https://wiki.sei.cmu.edu/confluence/display/c/ARR30-C.+Do+not+form+or+use+out-of-bounds+pointers+or+array+subscripts
    technology:
    - cpp
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/cpp.lang.security.strings.snprintf-return-value-length.snprintf-return-value-length
    shortlink: https://sg.run/gx88x
    semgrep.dev:
      rule:
        r_id: 114885
        rv_id: 269854
        rule_id: ReUDppD
        version_id: gETAgE6
        url: https://semgrep.dev/playground/r/gETAgE6/cpp.lang.security.strings.snprintf-return-value-length.snprintf-return-value-length
        origin: pro_rules
  languages:
  - cpp
  - c
  mode: taint
  min-version: 1.59.0
  options:
    interfile: true
  pattern-sources:
  - patterns:
    - pattern: snprintf($DEST, $SIZE, "$FORMAT", ...)
    - metavariable-pattern:
        metavariable: $DEST
        patterns:
        - patterns:
          - pattern-not: 'NULL'
          - pattern-not: '0'
    - metavariable-pattern:
        metavariable: $SIZE
        patterns:
        - pattern-not: '0'
    - metavariable-regex:
        metavariable: $FORMAT
        regex: ^(%l?s.*|.*[^%]%l?s.*)$
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: $BUFFER[$LEN] = $VALUE
        - pattern: bcmp($B1, $B2, $LEN)
        - pattern: bcopy($SRC, $DST, $LEN)
        - pattern: bzero($S, $LEN)
        - pattern: memccpy($DST, $SRC, $C, $LEN)
        - pattern: memchr($S, $C, $LEN)
        - pattern: memcmp($S1, $S2, $LEN)
        - pattern: memcpy($DST, $SRC, $LEN)
        - pattern: memccpy($DST, $SRC, $C, $LEN)
        - pattern: memmove($DST, $SRC, $LEN)
        - pattern: memset($DST, $SRC, $LEN)
        - pattern: stpncpy($DST, $SRC, $LEN)
        - pattern: strlcpy($DST, $SRC, $LEN)
        - pattern: strlcat($DST, $SRC, $LEN)
        - pattern: strncasecmp_l($S1, $S2, $LEN, ...)
        - pattern: strncasecmp($LEFT, $RIGHT, $LEN)
        - pattern: strncat($DST, $SRC, $LEN)
        - pattern: strncmp($LEFT, $RIGHT, $LEN)
        - pattern: strncpy($DST, $SRC, $LEN)
        - pattern: strnlen($STR, $LEN)
        - pattern: strerror_r($ERRNUM, $STRERRBUF, $BUFLEN)
        - pattern: strnstr($HAYSTACK, $NEEDLE, $LEN)
      - focus-metavariable: $LEN
    - patterns:
      - pattern: '&$BUFFER[$LEN]'
      - pattern-not-inside: snprintf(...)
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for(; ; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($INIT; ; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1; ; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2; ; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2, $VAR3 = $EXPR3; ; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for(; $COND; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($INIT; $COND; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1; $COND; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2; $COND; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2, $VAR3 = $EXPR3; $COND; <... --$LEN ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for(; ; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($INIT; ; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1; ; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2; ; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2, $VAR3 = $EXPR3; ; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for(; $COND; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($INIT; $COND; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1; $COND; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2; $COND; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
    - patterns:
      - pattern: |
          for($TY $VAR1 = $EXPR1, $VAR2 = $EXPR2, $VAR3 = $EXPR3; $COND; <... $LEN-- ...>) {
            ...
          }
      - focus-metavariable: $LEN
  pattern-sanitizers:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $LEN > $RHS
      - pattern: $LHS > $LEN
      - pattern: $LEN >= $RHS
      - pattern: $LHS >= $LEN
      - pattern: $LEN < $RHS
      - pattern: $LHS < $LEN
      - pattern: $LEN <= $RHS
      - pattern: $LHS <= $LEN
    - focus-metavariable: $LEN
