rules:
- id: python.flask.regex.tainted-regex-stdlib-flask.tainted-regex-stdlib-flask
  message: The regular expression identified appears vulnerable to Regular Expression
    Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker
    controllable, this vulnerability can lead to systems being non-responsive or may
    crash due to ReDoS. Where possible, re-write the regex so as not to leverage backtracking
    or use a library that offers default protection against ReDoS.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    functional-categories:
    - regex::sink::regex::libxml2
    - regex::sink::regex::re
    - regex::sink::regex::regex
    - regex::sink::regex::stdlib
    - regex::sink::regex::stdlib2
    - regex::sink::regex::stdlib3
    - web::source::cookie::flask
    - web::source::form-data::flask
    - web::source::form-data::flask-wtf
    - web::source::form-data::wtforms
    - web::source::header::flask
    - web::source::http-body::flask
    - web::source::http-params::flask
    - web::source::url-path-params::flask
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    - https://www.regular-expressions.info/catastrophic.html
    technology:
    - flask
    - flask-wtf
    - libxml2
    - re
    - regex
    - stdlib
    - stdlib2
    - stdlib3
    - web
    - wtforms
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Denial-of-Service (DoS)
    source: https://semgrep.dev/r/python.flask.regex.tainted-regex-stdlib-flask.tainted-regex-stdlib-flask
    shortlink: https://sg.run/r6wyP
    semgrep.dev:
      rule:
        r_id: 116525
        rv_id: 524352
        rule_id: wdU9WlD
        version_id: 2KTKKjb
        url: https://semgrep.dev/playground/r/2KTKKjb/python.flask.regex.tainted-regex-stdlib-flask.tainted-regex-stdlib-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    interfile: true
    symbolic_propagation: true
  pattern-sources:
  - label: USER_INPUT
    pattern-either:
    - patterns:
      - pattern: flask.request.$FUNC()
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(from_values|get_data|get_json)$
    - patterns:
      - pattern-either:
        - pattern: flask.request.$PROPERTY
        - pattern: flask.request.$PROPERTY[...]
        - pattern: flask.request.$PROPERTY.get(...)
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
    - patterns:
      - pattern: |
          @$APP.$ROUTE
          def $FUNC(..., $PARAM, ...):
            ...
      - metavariable-regex:
          metavariable: $ROUTE
          regex: ^(endpoint)$
      - focus-metavariable: $PARAM
  - label: USER_INPUT
    patterns:
    - pattern: |
        @$APP.$ROUTE(...)
        def $FUNC(..., $PARAM, ...):
          ...
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(route|delete|get|patch|post|put)$
    - focus-metavariable: $PARAM
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          @$APP.$ROUTE(...)
          def $FUNC(...):
            ...
            $FORM = $FORMCLASS(...)
            ...
            $FORM.validate_on_submit()
            ...
      - pattern-inside: |
          @$APP.$ROUTE(...)
          def $FUNC(...):
            ...
            $FORM = $FORMCLASS(...)
            ...
            if $FORM.validate_on_submit():
              ...
            ...
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(route|delete|get|patch|post|put|endpoint)$
    - pattern: $FORM.$FIELD.data
  - label: REGEX_PATTERN
    pattern-either:
    - pattern: regex._compile(...)
    - pattern: regex.compile(...)
    - pattern: re.compile(...)
    - pattern: re.Pattern(...)
    - pattern: regex.Pattern(...)
    - pattern: regex.finditer(...)
    - pattern: regex.splititer(...)
    requires: USER_INPUT
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DICT[$KEY]
            ...
        - pattern-inside: |
            $DICT.get($KEY, $DEFAULT)
            ...
        - pattern-inside: |
            $DICT = { ... }
            ...
        - pattern-inside: |
            $DICT = dict(...)
            ...
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $TO_DICT[$KEY]
            ...
        - pattern-inside: |
            $TO_DICT.get($KEY, $DEFAULT)
            ...
        - pattern-inside: |
            $TO_DICT = { ... }
            ...
        - pattern-inside: |
            $TO_DICT = dict(...)
            ...
        - pattern-inside: |
            $FROM_DICT[$KEY]
            ...
        - pattern-inside: |
            $FROM_DICT.get($KEY, $DEFAULT)
            ...
        - pattern-inside: |
            $FROM_DICT = { ... }
            ...
        - pattern-inside: |
            $FROM_DICT = dict(...)
            ...
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $LIST = [ ... ]
            ...
        - pattern-inside: |
            $LIST = list(...)
            ...
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SET = { $ITEM, ... }
            ...
        - pattern-inside: |
            $SET = set(...)
            ...
        - pattern-inside: |
            $OTHERSET = { $ITEM, ... }
            ...
        - pattern-inside: |
            $OTHERSET = set(...)
            ...
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern: re.match($PATTERN, ...)
        - pattern: re.search($PATTERN, ...)
        - pattern: re.sub($PATTERN, ...)
        - pattern: re.subn($PATTERN, ...)
        - pattern: re.split($PATTERN, ...)
        - pattern: re.findall($PATTERN, ...)
        - pattern: re.template($PATTERN, ...)
      - pattern-either:
        - pattern: regex.match($PATTERN, ...)
        - pattern: regex.search($PATTERN, ...)
        - pattern: regex.sub($PATTERN, ...)
        - pattern: regex.subn($PATTERN, ...)
        - pattern: regex.subf($PATTERN, ...)
        - pattern: regex.subfn($PATTERN, ...)
        - pattern: regex.split($PATTERN, ...)
        - pattern: regex.findall($PATTERN, ...)
        - pattern: regex.template($PATTERN, ...)
      - pattern-either:
        - pattern: re.match(..., pattern=$PATTERN, ...)
        - pattern: re.search(..., pattern=$PATTERN, ...)
        - pattern: re.sub(..., pattern=$PATTERN, ...)
        - pattern: re.subn(..., pattern=$PATTERN, ...)
        - pattern: re.split(..., pattern=$PATTERN, ...)
        - pattern: re.findall(..., pattern=$PATTERN, ...)
        - pattern: re.template(..., pattern=$PATTERN, ...)
      - pattern-either:
        - pattern: regex.match(..., pattern=$PATTERN, ...)
        - pattern: regex.search(..., pattern=$PATTERN, ...)
        - pattern: regex.sub(..., pattern=$PATTERN, ...)
        - pattern: regex.subn(..., pattern=$PATTERN, ...)
        - pattern: regex.subf(..., pattern=$PATTERN, ...)
        - pattern: regex.subfn(..., pattern=$PATTERN, ...)
        - pattern: regex.split(..., pattern=$PATTERN, ...)
        - pattern: regex.findall(..., pattern=$PATTERN, ...)
        - pattern: regex.template(..., pattern=$PATTERN, ...)
    - focus-metavariable: $PATTERN
    requires: USER_INPUT
  - pattern: libxml2.regexpCompile(...)
    requires: USER_INPUT
  - pattern-either:
    - pattern: $PATTERN.search(...)
    - pattern: $PATTERN.match(...)
    - pattern: $PATTERN.scan(...)
    - pattern: $PATTERN.findall(...)
    - pattern: $PATTERN.sub(...)
    - pattern: $PATTERN.subf(...)
    - pattern: $PATTERN.subn(...)
    - pattern: $PATTERN.subfn(...)
    - pattern: $PATTERN.split(...)
    requires: USER_INPUT and REGEX_PATTERN
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $DICT[$KEY]
          ...
      - pattern-inside: |
          $DICT = { $KEY: $VALUE for ... in ...}
          ...
      - pattern-inside: |
          $DICT.get($KEY, $DEFAULT)
          ...
      - pattern-inside: |
          $DICT = { }
          ...
      - pattern-inside: |
          $DICT = { $KEY: $VALUE, ... }
          ...
      - pattern-inside: |
          $DICT = dict(...)
          ...
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $LIST = [ ... ]
          ...
      - pattern-inside: |
          $LIST = list(...)
          ...
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SET = { $ITEM, ... }
          ...
      - pattern-inside: |
          $SET = set(...)
          ...
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SET = { $ITEM, ... }
          ...
      - pattern-inside: |
          $SET = { $ITEM for ... in ...}
          ...
      - pattern-inside: |
          $SET = set(...)
          ...
      - pattern-inside: |
          $SET = frozenset(...)
          ...
      - pattern-inside: |
          $OTHERSET = { $ITEM, ... }
          ...
      - pattern-inside: |
          $OTHERSET = set(...)
          ...
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $TUPLE = ( $ITEM, ... )
          ...
      - pattern-inside: |
          $TUPLE = $ITEM, ...
          ...
      - pattern-inside: |
          $TUPLE = tuple(...)
          ...
    - pattern-either:
      - pattern: $TUPLE.len()
