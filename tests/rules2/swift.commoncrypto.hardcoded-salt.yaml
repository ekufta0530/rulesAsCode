rules:
- id: swift.commoncrypto.hardcoded-salt.hardcoded-salt
  message: Cryptographic operations were identified that leverage a hardcoded salt/nonce.
    A salt does not need to remain secret, but should be random, generated from cryptographically
    secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random
    data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-323: Nonces should be used for the present occasion and only once.'
    functional-categories:
    - crypto::search::randomness::CommonCrypto
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://developer.apple.com/documentation/security/randomization_services
    technology:
    - ios
    - macos
    - secrets
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/swift.commoncrypto.hardcoded-salt.hardcoded-salt
    shortlink: https://sg.run/A6E4
    semgrep.dev:
      rule:
        r_id: 59706
        rv_id: 111989
        rule_id: oqUqDx
        version_id: LjTqA3E
        url: https://semgrep.dev/playground/r/LjTqA3E/swift.commoncrypto.hardcoded-salt.hardcoded-salt
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          "...".data(...)
      - pattern: |
          Data(bytes:[$Y,...])
      - pattern: |
          Data(base64Encoded: "...")
      - patterns:
        - pattern-inside: $SALTDATA = [$Y,...] ...
        - pattern: |
            Data(bytes: $SALTDATA)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $X, ...)
      - pattern: |
          $OBJ.hkdfDerivedSymmetricKey(...,salt: $X,...)
      - pattern: |
          ChaChaPoly.seal(...,nonce: $X,...)
      - pattern: |
          AES.GCM.seal(..., nonce: $X, ...)
    - focus-metavariable: $X
