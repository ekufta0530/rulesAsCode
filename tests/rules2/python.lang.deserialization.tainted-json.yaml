rules:
- id: python.lang.deserialization.tainted-json.tainted-json
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Even for a data-only serialization format such as JSON, a malicious string may
    cause the decoder to consume considerable CPU and memory resources. Limiting the
    size of data to be parsed is recommended.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - deserialization::sink::load-object::lang
    - web::source::cookie::lang
    - web::source::http-params::lang
    - web::source::http-body::lang
    - web::source::header::lang
    - web::source::url-path-params::lang
    - web::source::form-data::lang
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/json.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - http
    - json
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-json.tainted-json
    shortlink: https://sg.run/G0gB
    semgrep.dev:
      rule:
        r_id: 44948
        rv_id: 111842
        rule_id: GdUbDO
        version_id: ExTjA0G
        url: https://semgrep.dev/playground/r/ExTjA0G/python.lang.deserialization.tainted-json.tainted-json
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: json.load($SINK, ...)
      - pattern: json.loads($SINK, ...)
      - patterns:
        - pattern-either:
          - pattern: $DEC.decode($SINK)
          - pattern: $DEC.raw_decode($SINK)
        - pattern-inside: |
            $DEC = json.JSONDecoder()
            ...
