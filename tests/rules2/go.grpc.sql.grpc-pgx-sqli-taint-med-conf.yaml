rules:
- id: go.grpc.sql.grpc-pgx-sqli-taint-med-conf.grpc-pgx-sqli-taint-med-conf
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Create parameterized queries in pgx by using positional
    parameters (`$1`, `$2`, ...) and adding the values as additional arguments to
    the function call. It is also possible to create prepared statements through the
    `Prepare` function. This function uses the same placeholders for bound parameters.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - db::search::password::database
    - db::search::password::gorm
    - db::search::password::mysql
    - db::search::password::pg
    - db::search::password::pgx
    - db::sink::sql-or-nosql-query::pgx
    - net::source::remote-procedure-call::grpc
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/jackc/pgx
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    technology:
    - go
    - go-pgx
    - grpc
    - grpc-go
    - pgx
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - SQL Injection
    source: https://semgrep.dev/r/go.grpc.sql.grpc-pgx-sqli-taint-med-conf.grpc-pgx-sqli-taint-med-conf
    shortlink: https://sg.run/yK17
    semgrep.dev:
      rule:
        r_id: 58424
        rv_id: 731872
        rule_id: 5rUWL1
        version_id: kbT6ydZ
        url: https://semgrep.dev/playground/r/kbT6ydZ/go.grpc.sql.grpc-pgx-sqli-taint-med-conf.grpc-pgx-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: IMPORTPGX
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*jackc\/pgx\/v(4|5).*)
  pattern-sinks:
  - patterns:
    - pattern: |
        ($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $CONNTYPE
        regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and (USERINPUT or CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
  pattern-sanitizers:
  - patterns:
    - pattern: $SANFUNC($QUERY, ...)
    - metavariable-regex:
        metavariable: $SANFUNC
        regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX
  - pattern: |
      ($QUERY : *Query).Sanitize(...)
    requires: IMPORTPGX
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB.Sanitize(...)
    requires: IMPORTPGX
  - patterns:
    - pattern: |
        ($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
