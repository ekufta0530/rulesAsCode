rules:
- id: typescript.react.react-href-prop.react-href-prop
  message: Untrusted input could be used to tamper with a web page rendering, which
    can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
    when untrusted input executes malicious JavaScript code, leading to issues such
    as account compromise and sensitive information leakage. To prevent this vulnerability,
    validate URLs and their protocol before using them in your codebase.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: LOW
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - web::source::http-params::react
    - web::source::url-path-params::react
    - web::sink::html-webpage::react
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
    technology:
    - react
    - browser
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Cross-Site-Scripting (XSS)
    source: https://semgrep.dev/r/typescript.react.react-href-prop.react-href-prop
    shortlink: https://sg.run/2WK0
    semgrep.dev:
      rule:
        r_id: 27219
        rv_id: 112058
        rule_id: BYUkxg
        version_id: BjTXpP0
        url: https://semgrep.dev/playground/r/BjTXpP0/typescript.react.react-href-prop.react-href-prop
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          var { ..., $PROP,... } = this.props
          ...
      - pattern-inside: |
          let { ..., $PROP,... } = this.props
          ...
      - pattern-inside: |
          const { ..., $PROP,... } = this.props
          ...
    - focus-metavariable: $PROP
  pattern-sinks:
  - patterns:
    - pattern-not-inside: |
        <Buttons .../>
    - pattern-not-inside: |
        <Button .../>
    - pattern-not-inside: |
        <AnchorButton .../>
    - pattern-not-inside: |
        <$EL ... href={$FUNC($X)}></$EL>
    - pattern-either:
      - pattern-inside: |
          <$EL ... href={$X}></$EL>
      - pattern-inside: |
          <$EL ... href={`${$X}...`}></$EL>
    - pattern: $SINK + $ANYTHING
    - focus-metavariable: $SINK
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..." + $SOURCE
        - pattern-not: |
            `...${...}...`
        metavariable: $SINK
  - patterns:
    - pattern-not-inside: |
        <Buttons .../>
    - pattern-not-inside: |
        <Button .../>
    - pattern-not-inside: |
        <AnchorButton .../>
    - pattern-not-inside: |
        <$EL ... href={$FUNC($X)}></$EL>
    - pattern-either:
      - pattern-inside: |
          <$EL ... href={$PROP}></$EL>
      - pattern-inside: |
          <$EL ... href={`${$PROP}...`}></$EL>
    - focus-metavariable: $PROP
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            $FOO + $VALUE
        - pattern-not: |
            "..." + $VALUE
        - pattern-not: |
            `...${...}...`
        metavariable: $PROP
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: |
          $A ? $VAL1 : $VAL2
      - pattern: |
          $A ? $VAL2 : $VAL1
    - metavariable-pattern:
        patterns:
        - pattern: |
            `${...}...`
        - pattern-not: |
            "..."
        - pattern-not: |
            "..." + $V
        - pattern-not: |
            `...${...}...`
        metavariable: $VAL1
    - focus-metavariable: $VAL1
  - patterns:
    - pattern: validateUrl(...)
    - pattern: getSanitizedUrl(...)
  - patterns:
    - pattern: |
        `...${$X}...`
    - pattern-not: |
        `${$X}...`
    - focus-metavariable: $X
  - patterns:
    - pattern: |
        "..." + $VALUE
  - patterns:
    - pattern-inside: "if (<... $SOURCE.startsWith(\"$REGEX\") ...>) { \n    ... \n\
        \ }\n"
  - patterns:
    - pattern-inside: |
        $X = [{...}];
        ...
    - pattern: $X.map(...)
