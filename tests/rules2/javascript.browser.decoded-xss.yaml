rules:
- id: javascript.browser.decoded-xss.decoded-xss
  message: Untrusted input could be used to tamper with a web page rendering, which
    can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
    when untrusted input executes malicious JavaScript code, leading to issues such
    as account compromise and sensitive information leakage. Validate the user input,
    perform contextual output encoding, or sanitize the input. A popular library used
    to prevent XSS is DOMPurify. You can also use libraries and frameworks such as
    Angular, Vue, and React, which offer secure defaults when rendering input.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - web::source::url-path-params::WebAPI
    - web::sink::html-webpage::WebAPI
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - browser
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Cross-Site-Scripting (XSS)
    source: https://semgrep.dev/r/javascript.browser.decoded-xss.decoded-xss
    shortlink: https://sg.run/4oql
    semgrep.dev:
      rule:
        r_id: 43788
        rv_id: 111656
        rule_id: qNUrdW
        version_id: WrTW39D
        url: https://semgrep.dev/playground/r/WrTW39D/javascript.browser.decoded-xss.decoded-xss
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern: location.hash
      - pattern: $THIS. ... .location.hash
      - pattern: location.pathname
      - pattern: $THIS. ... .location.pathname
      - pattern: $THIS. ... .location.href
      - pattern: location.href
      - pattern: location.search
      - pattern: $THIS. ... .location.search
      - pattern: $THIS. ... .document.baseURI
      - pattern: document.baseURI
      - pattern: $THIS. ... .document.documentURI
      - pattern: document.documentURI
  - label: DECODE
    requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: |
          decodeURIComponent($X)
      - pattern: |
          decodeURI($X)
      - pattern: |
          unescape($X)
    - focus-metavariable: $X
  pattern-sinks:
  - requires: DECODE
    patterns:
    - pattern-either:
      - pattern: $ELEMENT. ... .innerHTML = $X
      - pattern: $ELEMENT. ... .outerHTML = $X
      - pattern: document.write($X)
      - pattern: $THIS. ... .document.write($X)
      - pattern: document.writeln($X)
      - pattern: $THIS. ... .document.writeln($X)
      - pattern: $THIS. ... .insertAdjacentHTML(...,$X)
    - focus-metavariable: $X
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
