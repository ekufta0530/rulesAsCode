rules:
- id: javascript.express.express-sqlite-sqli.express-sqlite-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - web::source::cookie::express
    - web::source::http-params::express
    - web::source::http-body::express
    - web::source::header::express
    - web::source::url-path-params::express
    - db::sink::sql-or-nosql-query::sqlite
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.sqlitetutorial.net/sqlite-nodejs/
    technology:
    - express
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - SQL Injection
    source: https://semgrep.dev/r/javascript.express.express-sqlite-sqli.express-sqlite-sqli
    shortlink: https://sg.run/76lG
    semgrep.dev:
      rule:
        r_id: 52938
        rv_id: 111667
        rule_id: 6JUl86
        version_id: X0TQ2Eb
        url: https://semgrep.dev/playground/r/X0TQ2Eb/javascript.express.express-sqlite-sqli.express-sqlite-sqli
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{ $REQ }: Request,...) => {...}
      - pattern-inside: |
          (...,{ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $WRAPPER = require('$IMPORT')
            ...
        - pattern-inside: |
            $WRAPPER = require('$IMPORT'). ...
            ...
        - pattern-inside: |
            import { ...,$WRAPPER,... } from '$IMPORT'
            ...
        - pattern-inside: |
            import * as $WRAPPER from '$IMPORT'
            ...
        - pattern-inside: |
            import $WRAPPER from '$IMPORT'
            ...
      - metavariable-regex:
          metavariable: $IMPORT
          regex: ^(sqlite|sqlite\d)$
    - pattern-either:
      - pattern-inside: |
          $WRAPPER. ... .then(async ($BASE) => {
                ...
                $DB = $BASE;
                ...
            })
          ...
      - pattern-inside: |
          $DB = new $WRAPPER.Database(...);
          ...
    - pattern: |
        $DB.$FUNC($PATTERN, ...);
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(get|all|each)$
    - focus-metavariable: $PATTERN
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: escape(...)
      - pattern: String(...)
      - pattern: $VALUE. ... .toString()
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
      - pattern: $TYPE. ... .isValid(...)
      - pattern: $TYPE. ... .ObjectId(...)
      - pattern: $TYPE. ... .ObjectID(...)
      - pattern: ObjectID(...)
      - pattern: ObjectId(...)
      - pattern: new $TYPE. ... .isValid(...)
      - pattern: new $TYPE. ... .ObjectId(...)
      - pattern: new $TYPE. ... .ObjectID(...)
      - pattern: new ObjectId(...)
      - pattern: new ObjectID(...)
  - patterns:
    - pattern: $THIS. ... .$HASH(...)
    - metavariable-regex:
        metavariable: $HASH
        regex: (hash|md5|sha1|sha256)
