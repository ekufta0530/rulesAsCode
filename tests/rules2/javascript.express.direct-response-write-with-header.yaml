rules:
- id: javascript.express.direct-response-write-with-header.direct-response-write-with-header
  message: Untrusted input could be used to tamper with a web page rendering, which
    can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
    when untrusted input executes malicious JavaScript code, leading to issues such
    as account compromise and sensitive information leakage. Use 'resp.render()' to
    render safely escaped HTML. Validate the user input, perform contextual output
    encoding, or sanitize the input. A popular library used to prevent XSS is DOMPurify.
    You can also use libraries and frameworks such as Angular, Vue, and React, which
    offer secure defaults when rendering input.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - web::source::http-params::express
    - web::source::http-body::express
    - web::source::url-path-params::express
    - web::sink::direct-response::express
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - express
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Cross-Site-Scripting (XSS)
    source: https://semgrep.dev/r/javascript.express.direct-response-write-with-header.direct-response-write-with-header
    shortlink: https://sg.run/0B3j
    semgrep.dev:
      rule:
        r_id: 28154
        rv_id: 111664
        rule_id: v8U0KP
        version_id: zyTKDd2
        url: https://semgrep.dev/playground/r/zyTKDd2/javascript.express.direct-response-write-with-header.direct-response-write-with-header
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function ... ($REQ, $RES) {
              ...
              $RES.$SET('Content-Type', 'text/html')
              ...
          }
      - pattern-inside: |
          function ... ($REQ, $RES, $NEXT) {
              ...
              $RES.$SET('Content-Type', 'text/html')
          }
      - pattern-inside: |
          function ... ($REQ, $RES) {
              ...
              $RES.$SET('content-type', 'text/html')
              ...
          }
      - pattern-inside: |
          function ... ($REQ, $RES, $NEXT) {
              ...
              $RES.$SET('content-type', 'text/html')
          }
      - pattern-inside: |
          function ... ($REQ, $RES) {
              ...
              $RES.set('.html')
              ...
          }
      - pattern-inside: |
          function ... ($REQ, $RES, $NEXT) {
              ...
              $RES.set('text/html')
              ...
          }
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.set('text/html')
                  ...
              })
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.set('.html')
                  ...
              })
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.$SET('Content-Type', 'text/html')
                  ...
              })
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.$SET('content-type', 'text/html')
                  ...
              })
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {
              ...
              $RES.$SET('content-type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {
              ...
              $RES.$SET('Content-Type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {
              ...
              $RES.set('.html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.set('text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.$SET('content-type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.$SET('Content-Type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.set('.html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.set('text/html')
              ...
          }
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.write($ARG)
      - pattern: $RES.send($ARG)
    - focus-metavariable: $ARG
