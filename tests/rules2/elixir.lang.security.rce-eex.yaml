rules:
- id: elixir.lang.security.rce-eex.rce-eex
  message: 'Untrusted input might be injected into a evaluation statement executed
    by the application, which can lead to a remote code execution. An attacker can
    execute arbitrary Elixir code, potentially gaining complete control of the system.
    To prevent this vulnerability, avoid evaluating Elixir code with user input through
    the `EEx.eval_*` functions. If this is unavoidable, validate and sanitize the
    input, and use safe methods for executing the commands. '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection/
    technology:
    - elixir
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Code Injection
    source: https://semgrep.dev/r/elixir.lang.security.rce-eex.rce-eex
    shortlink: https://sg.run/WAvWz
    semgrep.dev:
      rule:
        r_id: 114609
        rv_id: 256999
        rule_id: eqU0erN
        version_id: l4TrQG7
        url: https://semgrep.dev/playground/r/l4TrQG7/elixir.lang.security.rce-eex.rce-eex
        origin: pro_rules
  languages:
  - elixir
  min-version: 1.59.0
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          EEx.$FUNC($INPUT)
      - pattern-not: |
          EEx.$FUNC("...")
    - patterns:
      - pattern: |
          EEx.$FUNC("...", ..., $ARG : $INPUT, ...)
      - metavariable-pattern:
          metavariable: $INPUT
          patterns:
          - pattern: |
              $X
          - pattern-not: |
              "..."
  - focus-metavariable: $INPUT
  - metavariable-regex:
      metavariable: $FUNC
      regex: ^(eval_string|eval_file)$
