rules:
- id: kotlin.jjwt.jjwt-none-alg.jjwt-none-alg
  message: Detected use of the `none` algorithm in a JWT token. The `none` algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the `none` algorithm. Instead, use an algorithm such as `HS256`.
  severity: INFO
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    functional-categories:
    - crypto::search::asymmetric-algorithm::jjwt
    owasp:
    - A02:2021 - Cryptographic Failures
    - A03:2017 - Sensitive Data Exposure
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    technology:
    - jwt
    - kotlin
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Cryptographic Issues
    source: https://semgrep.dev/r/kotlin.jjwt.jjwt-none-alg.jjwt-none-alg
    shortlink: https://sg.run/4J6L
    semgrep.dev:
      rule:
        r_id: 59544
        rv_id: 731935
        rule_id: qNU68x
        version_id: 5PTp2kX
        url: https://semgrep.dev/playground/r/5PTp2kX/kotlin.jjwt.jjwt-none-alg.jjwt-none-alg
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import io.*
            ...
        - pattern-inside: |
            import io.jsonwebtoken
            ...
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: jsonwebtoken.Jwts.builder()
            - pattern-not-inside: $JWTS = jsonwebtoken.Jwts.builder()
          - patterns:
            - pattern: $TOKEN = jsonwebtoken.Jwts.builder()
            - pattern-not-inside: |
                ...
                $TOKEN. ... .signWith(...)
        - pattern-not-inside: $JWTS. ... .signWith(...)
        - pattern-not-inside: |
            $JWTS. ... .apply {
              ...
              signWith(...)
              ...
            }
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import io.jsonwebtoken.*
            ...
        - pattern-inside: |
            import io.jsonwebtoken.Jwts
            ...
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: Jwts.builder()
            - pattern-not-inside: $JWTS = Jwts.builder()
          - patterns:
            - pattern: $TOKEN = Jwts.builder()
            - pattern-not-inside: |
                ...
                $TOKEN. ... .signWith(...)
        - pattern-not-inside: $JWTS. ... .signWith(...)
        - pattern-not-inside: |
            $JWTS. ... .apply {
              ...
              signWith(...)
              ...
            }
