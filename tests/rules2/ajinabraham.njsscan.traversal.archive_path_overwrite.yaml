rules:
- id: ajinabraham.njsscan.traversal.archive_path_overwrite.tar_path_overwrite
  patterns:
  - pattern-inside: |
      $X = require('tar-stream')
      ...
  - pattern-not-inside: |
      $Y.pipe($UNZIP.Parse(...)).on('entry', function $FUNC(...) {
          ...
      }, ...)
  - pattern-inside: |
      $EXTRACT.on('entry', function $FUNC(...) {
        ...
      }, ...)
  - pattern-not: |
      if ($FILENAME.indexOf('..'))
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-either:
    - pattern: |
        $FS.createWriteStream($FIL, ...)
    - pattern: |
        $FS.writeFile($FIL, ...)
    - pattern: |
        $FS.writeFileSync($FIL, ...)
  message: Insecure TAR archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp-web: a5
    cwe: cwe-22
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/ajinabraham.njsscan.traversal.archive_path_overwrite.tar_path_overwrite
    shortlink: https://sg.run/WxEg
    semgrep.dev:
      rule:
        r_id: 43697
        rv_id: 78301
        rule_id: 10UnAZ
        version_id: kbToe0
        url: https://semgrep.dev/playground/r/kbToe0/ajinabraham.njsscan.traversal.archive_path_overwrite.tar_path_overwrite
        origin: community
