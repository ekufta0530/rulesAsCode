rules:
- id: csharp.dotnet-core.ssrf.httpclient-taint-format-grpc.httpclient-taint-format-grpc
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::sink::http-request
    - net::source::remote-procedure-call::gRPC
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - .NET
    - csharp
    - dotnet
    - grpc
    - http
    - httpclient
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Server-Side Request Forgery (SSRF)
    source: https://semgrep.dev/r/csharp.dotnet-core.ssrf.httpclient-taint-format-grpc.httpclient-taint-format-grpc
    shortlink: https://sg.run/JAzw
    semgrep.dev:
      rule:
        r_id: 72346
        rv_id: 229193
        rule_id: OrUbQv
        version_id: bZTRpEG
        url: https://semgrep.dev/playground/r/bZTRpEG/csharp.dotnet-core.ssrf.httpclient-taint-format-grpc.httpclient-taint-format-grpc
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  options:
    interfile: true
  pattern-sources:
  - label: REQ
    patterns:
    - pattern-inside: |
        using Grpc.Core;
        ...
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern-inside: |
          public $TYPE $NAME($T $REQ, ServerCallContext $CTX) {
            ...
          }
      - pattern-inside: |
          public $TYPE $NAME($T $REQ, $ST $STREAM, ServerCallContext $CTX) {
            ...
          }
  - label: FORMAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: String.Format("$REGEX", ..., $X, ...)
      - pattern: string.Format("$REGEX", ..., $X, ...)
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^(http://|https://|//)?\{.*
    requires: REQ
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: (StringBuilder $TO).Append(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendLine(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendFormat(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendJoin(..., $FROM,...)
        - pattern: (StringBuilder $TO).Replace(..., $FROM,...)
        - pattern: (StringBuilder $TO).Insert(..., $FROM,...)
        - patterns:
          - pattern-either:
            - pattern: $TO.Append(..., $FROM,...)
            - pattern: $TO.AppendLine(..., $FROM,...)
            - pattern: $TO.AppendFormat(..., $FROM,...)
            - pattern: $TO.AppendJoin(..., $FROM,...)
            - pattern: $TO.Replace(..., $FROM,...)
            - pattern: $TO.Insert(..., $FROM,...)
          - pattern-either:
            - pattern-inside: |
                var $TO = new StringBuilder(...);
                ...
            - pattern-inside: |
                $TO = new StringBuilder(...);
                ...
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $URL
    - pattern-inside: |
        using System.Net.Http;
        ...
    - pattern-either:
      - pattern: (HttpClient $C).GetAsync($URL, ...)
      - pattern: (HttpClient $C).GetByteArrayAsync($URL, ...)
      - pattern: (HttpClient $C).GetStreamAsync($URL, ...)
      - pattern: (HttpClient $C).GetStringAsync($URL, ...)
      - pattern: (HttpClient $C).PatchAsync($URL, ...)
      - pattern: (HttpClient $C).PostAsync($URL, ...)
      - pattern: (HttpClient $C).PutAsync($URL, ...)
      - pattern: new Uri($URL, ...)
      - pattern: new HttpRequestMessage($X, $URL, ...)
    requires: FORMAT
