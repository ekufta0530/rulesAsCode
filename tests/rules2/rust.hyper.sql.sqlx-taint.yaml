rules:
- id: rust.hyper.sql.sqlx-taint.sqlx-taint
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - db::sink::sql-or-nosql-query::rocket_db_pools
    - db::sink::sql-or-nosql-query::sqlx
    - web::source::header::hyper
    - web::source::http-body::hyper
    - web::source::http-params::hyper
    - web::source::url-path-params::hyper
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.rs/sqlx/latest/sqlx/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - hyper
    - mysql
    - postgres
    - rust
    - sqlx
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - SQL Injection
    source: https://semgrep.dev/r/rust.hyper.sql.sqlx-taint.sqlx-taint
    shortlink: https://sg.run/Gq16
    semgrep.dev:
      rule:
        r_id: 63204
        rv_id: 229345
        rule_id: nJUvEw
        version_id: vdT1e3o
        url: https://semgrep.dev/playground/r/vdT1e3o/rust.hyper.sql.sqlx-taint.sqlx-taint
        origin: pro_rules
  languages:
  - rust
  mode: taint
  pattern-sources:
  - label: REQUEST
    patterns:
    - pattern: $REQ
    - pattern-either:
      - pattern-inside: |
          fn $FN_NAME(..., $REQ: hyper::Request<hyper::body::Incoming>, ...) {
            ...
          }
      - pattern-inside: |
          fn $FN_NAME(..., $REQ: hyper::Request<hyper::body::Body>, ...) {
            ...
          }
      - pattern-inside: |
          fn $FN_NAME(..., $REQ: hyper::Request<hyper::Body>, ...) {
            ...
          }
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: $R.body()
      - pattern: $R.body_mut()
      - pattern: $R.into_body()
      - pattern: $R.headers
      - pattern: $R.headers_mut()
      - pattern: $R.query()
      - pattern: $R.path()
      - pattern: $R.path_and_query()
      - pattern: $R.collect()
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "..." + ...
      - pattern: '... + "..."'
      - pattern: $STR.push_str(...)
      - pattern: format!(...)
      - pattern: std::fmt::format(...)
  pattern-propagators:
  - from: $FROM
    patterns:
    - pattern: $TO.push_str($FROM)
    to: $TO
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $TO.$FUNC(..., $FROM)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(insert_str|replace_range)$
    to: $TO
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  - from: $FROM
    patterns:
    - pattern: $TO = $FROM.into()
    to: $TO
  - from: $FROM
    patterns:
    - pattern: $TO = std::from_utf8($FROM)
    to: $TO
  - from: $FROM
    patterns:
    - pattern: |
        let $TO = if let $SOME = $FROM {
          ...
        } else {
          ...
        };
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: sqlx::query($QUERY,...)
      - pattern: sqlx::query_with($QUERY,...)
      - pattern: sqlx::query_as($QUERY,...)
      - pattern: sqlx::query_as_with($QUERY,...)
      - pattern: sqlx::query_scalar($QUERY,...)
      - pattern: sqlx::query_scalar_with($QUERY,...)
      - pattern: sqlx::QueryBuilder::new($QUERY,...)
      - pattern: |
          ($QB: sqlx::QueryBuilder<$T>).push($QUERY,...)
      - patterns:
        - pattern-either:
          - pattern: $Q.push($QUERY,...)
          - pattern: $Q. ... .push($QUERY,...)
        - pattern-either:
          - pattern-inside: |
              let $Q = sqlx::QueryBuilder::new(...);
              ...
          - pattern-inside: |
              let $Q = sqlx::QueryBuilder::new(...). ...;
              ...
      - pattern: |
          ($P: sqlx::Pool<$T>).prepare($QUERY,...)
      - pattern: |
          ($P: sqlx::Pool<$T>).prepare_with($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::Pool<$T>).prepare($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::Pool<$T>).prepare_with($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::PoolConnection<$T>).prepare($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::PoolConnection<$T>).prepare_with($QUERY,...)
      - pattern: |
          ($C: sqlx::Connection).prepare($QUERY,...)
      - pattern: |
          ($C: sqlx::Connection).prepare_with($QUERY,...)
      - pattern: |
          ($C: rocket_db_pools::Connection<$T>).prepare($QUERY,...)
      - pattern: |
          ($C: rocket_db_pools::Connection<$T>).prepare_with($QUERY,...)
    requires: REQUEST and USER_INPUT and CONCAT
