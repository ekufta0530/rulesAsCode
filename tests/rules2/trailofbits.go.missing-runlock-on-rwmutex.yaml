rules:
- id: trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
  message: Missing `RUnlock` on an `RWMutex` (`$T` variable) lock before returning
    from a function
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Missing `RUnlock` on an `RWMutex` lock before returning from a function
    references:
    - https://pkg.go.dev/sync#RWMutex
    - https://blog.trailofbits.com/2020/06/09/how-to-check-if-a-mutex-is-locked-in-go/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
    shortlink: https://sg.run/9r40
    semgrep.dev:
      rule:
        r_id: 14223
        rv_id: 733070
        rule_id: 8GUzNK
        version_id: YDTAKBW
        url: https://semgrep.dev/playground/r/YDTAKBW/trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
        origin: community
  patterns:
  - pattern-either:
    - pattern: panic(...)
    - pattern: return ...
  - metavariable-pattern:
      metavariable: $T
      patterns:
      - pattern: |
          ($T : sync.RWMutex)
  - pattern-inside: |
      $T.RLock()
      ...
  - pattern-not-inside: |
      $T.RUnlock()
      ...
  - pattern-not-inside: |
      defer $T.RUnlock()
      ...
  - pattern-not-inside: |
      defer func(...) {
        ...
        $T.RUnlock()
        ...
      }(...)
      ...
  - pattern-not-inside: "$FOO(..., ..., func(...) { \n    ... \n})\n"
  - pattern-not-inside: |
      return func(...) {
          ...
          $T.RUnlock()
          ...
      }
