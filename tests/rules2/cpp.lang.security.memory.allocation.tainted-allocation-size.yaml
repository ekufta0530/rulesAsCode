rules:
- id: cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size
  message: Externally controlled data influences the size of an allocation. This can
    usually lead to overflow or underflow and later trigger an out of bounds conditions.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cert:
    - ARR32-C
    - C
    - C++
    - L1
    - L2
    - MEM05-C
    - MEM35-C
    cwe:
    - 'CWE-125: Out-of-bounds Read'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - memory::sink::buffer-overflow
    - os::source::console
    - os::source::environment
    - web::source::http-body
    references:
    - https://wiki.sei.cmu.edu/confluence/display/c/MEM05-C.+Avoid+large+stack+allocations
    - https://wiki.sei.cmu.edu/confluence/display/c/MEM35-C.+Allocate+sufficient+memory+for+an+object
    - https://www.securecoding.cert.org/confluence/display/c/ARR32-C.+Ensure+size+arguments+for+variable+length+arrays+are+in+a+valid+range
    technology:
    - cpp
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Memory Issues
    source: https://semgrep.dev/r/cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size
    shortlink: https://sg.run/bwzge
    semgrep.dev:
      rule:
        r_id: 114770
        rv_id: 257381
        rule_id: ZqUQ2NW
        version_id: ZRT74w1
        url: https://semgrep.dev/playground/r/ZRT74w1/cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size
        origin: pro_rules
  languages:
  - cpp
  - c
  mode: taint
  min-version: 1.59.0
  pattern-sources:
  - label: USER_CONTROLLED
    patterns:
    - pattern: |
        int main(int $ARGC, $ARGV_TY $ARGV, $ENVP_TY $ENVP) {
          ...
        }
    - focus-metavariable: $ENVP
  - label: USER_CONTROLLED
    patterns:
    - pattern: |
        int main(int $ARGC, $ARGV_TY $ARGV, ...) {
          ...
        }
    - focus-metavariable: $ARGV
  - label: USER_CONTROLLED
    pattern-either:
    - pattern: getenv(...)
    - pattern: std::getenv(...)
    - pattern: readline()
  - by-side-effect: only
    label: USER_CONTROLLED
    patterns:
    - pattern-either:
      - pattern: gets($SRC)
      - pattern: fread($SRC, ...)
      - pattern: fgets($SRC, ...)
      - pattern: getline($SRC, ...)
      - pattern: getdelim($SRC, ...)
      - pattern: read($S_OR_FP, $SRC, ...)
      - pattern: msgrcv($QID, $SRC, ...)
    - focus-metavariable: $SRC
  - label: USER_CONTROLLED
    pattern: gets(...)
  - by-side-effect: only
    label: USER_CONTROLLED
    patterns:
    - pattern-either:
      - pattern: $X.get($SRC, ...)
      - pattern: $X.getline($SRC, ...)
      - pattern: $X.read($SRC, ...)
      - pattern: $X.readsome($SRC, ...)
    - metavariable-type:
        metavariable: $X
        types:
        - basic_ifstream<$TYPE>
        - std::basic_ifstream<$TYPE>
        - ifstream
        - std::ifstream
        - wifstream
        - std::wifstream
        - basic_ofstream<$TYPE>
        - std::basic_ofstream<$TYPE>
        - ofstream
        - std::ofstream
        - wofstream
        - std::wofstream
        - basic_fstream<$TYPE>
        - std::basic_fstream<$TYPE>
        - fstream
        - std::fstream
        - wfstream
        - std::wfstream
        - basic_filebuf<$TYPE>
        - std::basic_filebuf<$TYPE>
        - filebuf
        - std::filebuf
        - wfilebuf
        - std::wfilebuf
    - focus-metavariable: $SRC
  - by-side-effect: only
    label: USER_CONTROLLED
    patterns:
    - pattern-either:
      - pattern: recv($S, $SRC, ...)
      - pattern: recvfrom($S, $SRC, ...)
      - pattern: recvmsg($S, $SRC, ...)
      - patterns:
        - pattern: curl_easy_setopt($CURL, CURLOPT_WRITEDATA, $SRC)
        - pattern-not: curl_easy_setopt($CURL, CURLOPT_WRITEDATA, $CURL)
    - focus-metavariable: $SRC
  - label: USER_CONTROLLED
    pattern: mysql_fetch_row(...)
  - by-side-effect: only
    label: USER_CONTROLLED
    patterns:
    - pattern: mysql_fetch_row_nonblocking($RESULT, &$ROW)
    - focus-metavariable: $ROW
  - label: USER_CONTROLLED
    patterns:
    - pattern: $WT->body()
    - metavariable-type:
        metavariable: $WT
        types:
        - Wt::Http::Message*
        - Http::Message*
        - Wt::Mail::Message*
        - Mail::Message*
  - label: SCALAR
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern: ($SCALAR_TYPE)$RHS
            - pattern: $SCALAR_TYPE($RHS)
          - metavariable-regex:
              metavariable: $SCALAR_TYPE
              regex: ^((unsigned |signed )?(u|u_)?(int|long|short)?(long)?|u?int(_fast|_least)?(16|32|64|128|max|ptr)_t|size_t|ptrdiff_t|__int(16|32|64|128))$
        - pattern: $LHS + $RHS
        - pattern: $LHS - $RHS
        - pattern: $LHS * $RHS
        - pattern: $LHS << $RHS
        - pattern: $LHS >> $RHS
        - pattern: $LHS % $RHS
        - pattern: min($LHS, $RHS)
        - pattern: max($LHS, $RHS)
        - pattern: MIN($LHS, $RHS)
        - pattern: MAX($LHS, $RHS)
        - pattern: atoi($RHS)
        - pattern: atol($RHS)
        - pattern: atof($RHS)
        - pattern: atoll($RHS)
        - patterns:
          - pattern: $STRING_TO_SCALAR($RHS, ...)
          - metavariable-regex:
              metavariable: $STRING_TO_SCALAR
              regex: ^(w?c?str?ou?(l|i)l?)$
          - focus-metavariable: $RHS
      - focus-metavariable:
        - $RHS
        - $LHS
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: malloc(<... $SRC ...>)
      - pattern: calloc($BUF, <... $SRC ...>)
      - pattern: realloc($BUF, <... $SRC ...>)
      - pattern: alloca($SRC)
      - pattern: $TYPE $STACK_BUFFER[$SRC];
      - pattern: $TYPE $STACK_BUFFER[$SRC] = ...;
      - pattern: vector<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: vector<$TY>(<... $SRC ...>, ...)
      - pattern: std::vector<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: std::vector<$TY>(<... $SRC ...>, ...)
      - pattern: deque<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: deque<$TY>(<... $SRC ...>, ...)
      - pattern: std::deque<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: std::deque<$TY>(<... $SRC ...>, ...)
      - pattern: list<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: list<$TY>(<... $SRC ...>, ...)
      - pattern: std::list<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: std::list<$TY>(<... $SRC ...>, ...)
      - pattern: forward_list<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: forward_list<$TY>(<... $SRC ...>, ...)
      - pattern: std::forward_list<$TY> $LOCAL_VAR{<... $SRC ...>, ...};
      - pattern: std::forward_list<$TY>(<... $SRC ...>, ...)
      - patterns:
        - pattern-either:
          - pattern: $STL_STRING $LOCAL_VAR{<... $SRC ...>, $CH};
          - pattern: $STL_STRING(<... $SRC ...>, $CH);
        - metavariable-pattern:
            metavariable: $STL_STRING
            patterns:
            - pattern-either:
              - pattern: string
              - pattern: std::string
              - pattern: wstring
              - pattern: std::wstring
              - pattern: u8string
              - pattern: std::u8string
              - pattern: u16string
              - pattern: std::u16string
              - pattern: u32string
              - pattern: std::u32string
              - pattern: std::pmr::string
              - pattern: std::pmr::wstring
              - pattern: std::pmr::u8string
              - pattern: std::pmr::u16string
              - pattern: std::pmr::u32string
    - focus-metavariable: $SRC
    requires: USER_CONTROLLED and SCALAR
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: sizeof(...)
