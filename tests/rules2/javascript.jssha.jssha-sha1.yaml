rules:
- id: javascript.jssha.jssha-sha1.jssha-sha1
  message: The SHA1 hashing algorithm is considered to be weak. If this is used in
    any sensitive operation such as password hashing, or is used to ensure data integrity
    (collision sensitive) then you should use a stronger hashing algorithm. For passwords,
    consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider
    using `SHA-256`.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    functional-categories:
    - crypto::search::hash-algorithm::jssha
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    technology:
    - node.js
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Cryptographic Issues
    source: https://semgrep.dev/r/javascript.jssha.jssha-sha1.jssha-sha1
    shortlink: https://sg.run/ERyN
    semgrep.dev:
      rule:
        r_id: 46837
        rv_id: 111676
        rule_id: OrULl4
        version_id: w8T9DXJ
        url: https://semgrep.dev/playground/r/w8T9DXJ/javascript.jssha.jssha-sha1.jssha-sha1
        origin: pro_rules
  languages:
  - js
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require("jssha")
        ...
    - pattern-inside: |
        $X = require("jssha/sha1")
        ...
    - pattern-inside: |
        $X = require("jssha/dist/sha1")
        ...
    - pattern-inside: |
        import $X from "jssha"
        ...
  - pattern: new $X("SHA-1",...)
