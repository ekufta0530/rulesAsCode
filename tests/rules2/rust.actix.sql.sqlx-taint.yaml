rules:
- id: rust.actix.sql.sqlx-taint.sqlx-taint
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - db::sink::sql-or-nosql-query::rocket_db_pools
    - db::sink::sql-or-nosql-query::sqlx
    - web::source::cookie::actix_web
    - web::source::header::actix_web
    - web::source::http-body::actix_web
    - web::source::http-params::actix_web
    - web::source::url-path-params::actix_web
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.rs/sqlx/latest/sqlx/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - actix
    - mysql
    - postgres
    - rust
    - sqlx
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - SQL Injection
    source: https://semgrep.dev/r/rust.actix.sql.sqlx-taint.sqlx-taint
    shortlink: https://sg.run/07NB
    semgrep.dev:
      rule:
        r_id: 63198
        rv_id: 229337
        rule_id: x8UkEj
        version_id: rxT0d8D
        url: https://semgrep.dev/playground/r/rxT0d8D/rust.actix.sql.sqlx-taint.sqlx-taint
        origin: pro_rules
  languages:
  - rust
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern: $SOURCE
    - pattern-not-inside: |
        fn $NAME(..., $SOURCE: actix_web::HttpRequest, ...) {
          ...
        }
    - pattern-not-inside: |
        fn $NAME(..., $SOURCE: actix_web::web::Data<$T>, ...) {
          ...
        }
    - pattern-either:
      - pattern-inside: |
          #[actix_web::$METHOD($X)]
          fn $NAME(..., $SOURCE: $TYPE, ...) {
            ...
          }
      - pattern-inside: |
          fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_web::Either<$L,$R> {
            ...
          }
      - pattern-inside: |
          fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_web::Result<$RES> {
            ...
          }
      - pattern-inside: |
          fn $NAME(..., $SOURCE: actix_web::web::Path<$T>, ...) {
            ...
          }
      - pattern-either:
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_web::Responder {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> (actix_web::Responder, $S) {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Option<actix_web::Responder> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Result<actix_web::Responder, $ERR> {
              ...
            }
      - pattern-either:
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_web::HttpResponse {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> (actix_web::HttpResponse, $S) {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Option<actix_web::HttpResponse> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Result<actix_web::HttpResponse, $ERR> {
              ...
            }
      - pattern-either:
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_web::web::Json<$T> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> (actix_web::web::Json<$T>, $S) {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Option<actix_web::web::Json<$T>> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Result<actix_web::web::Json<$T>, $ERR> {
              ...
            }
      - pattern-either:
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_web::CustomizeResponder<$T> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> (actix_web::CustomizeResponder<$T>, $S) {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Option<actix_web::CustomizeResponder<$T>> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Result<actix_web::CustomizeResponder<$T>, $ERR> {
              ...
            }
      - pattern-either:
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> actix_files::NamedFile {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> (actix_files::NamedFile, $S) {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Option<actix_files::NamedFile> {
              ...
            }
        - pattern-inside: |
            fn $NAME(..., $SOURCE: $TYPE, ...) -> Result<actix_files::NamedFile, $ERR> {
              ...
            }
  - label: REQUEST
    patterns:
    - pattern: $REQ
    - pattern-inside: |
        fn $NAME(..., $REQ: actix_web::HttpRequest, ...) {
          ...
        }
  - label: REQ_INPUT
    patterns:
    - pattern-either:
      - pattern: $R.headers()
      - pattern: $R.headers_mut()
      - pattern: $R.path()
      - pattern: $R.query_string()
      - pattern: $R.cookies()
      - pattern: $R.cookie(...)
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "..." + ...
      - pattern: '... + "..."'
      - pattern: $STR.push_str(...)
      - pattern: format!(...)
      - pattern: std::fmt::format(...)
  pattern-propagators:
  - from: $FROM
    patterns:
    - pattern: $TO.push_str($FROM)
    to: $TO
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $TO.$FUNC(..., $FROM)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(insert_str|replace_range)$
    to: $TO
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  - from: $FROM
    patterns:
    - pattern: $TO = $FROM.into()
    to: $TO
  - from: $FROM
    patterns:
    - pattern: $TO = std::from_utf8($FROM)
    to: $TO
  - from: $FROM
    patterns:
    - pattern: |
        let $TO = if let $SOME = $FROM {
          ...
        } else {
          ...
        };
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: sqlx::query($QUERY,...)
      - pattern: sqlx::query_with($QUERY,...)
      - pattern: sqlx::query_as($QUERY,...)
      - pattern: sqlx::query_as_with($QUERY,...)
      - pattern: sqlx::query_scalar($QUERY,...)
      - pattern: sqlx::query_scalar_with($QUERY,...)
      - pattern: sqlx::QueryBuilder::new($QUERY,...)
      - pattern: |
          ($QB: sqlx::QueryBuilder<$T>).push($QUERY,...)
      - patterns:
        - pattern-either:
          - pattern: $Q.push($QUERY,...)
          - pattern: $Q. ... .push($QUERY,...)
        - pattern-either:
          - pattern-inside: |
              let $Q = sqlx::QueryBuilder::new(...);
              ...
          - pattern-inside: |
              let $Q = sqlx::QueryBuilder::new(...). ...;
              ...
      - pattern: |
          ($P: sqlx::Pool<$T>).prepare($QUERY,...)
      - pattern: |
          ($P: sqlx::Pool<$T>).prepare_with($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::Pool<$T>).prepare($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::Pool<$T>).prepare_with($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::PoolConnection<$T>).prepare($QUERY,...)
      - pattern: |
          ($P: sqlx::pool::PoolConnection<$T>).prepare_with($QUERY,...)
      - pattern: |
          ($C: sqlx::Connection).prepare($QUERY,...)
      - pattern: |
          ($C: sqlx::Connection).prepare_with($QUERY,...)
      - pattern: |
          ($C: rocket_db_pools::Connection<$T>).prepare($QUERY,...)
      - pattern: |
          ($C: rocket_db_pools::Connection<$T>).prepare_with($QUERY,...)
    requires: (INPUT and CONCAT) or (REQUEST and REQ_INPUT and CONCAT)
