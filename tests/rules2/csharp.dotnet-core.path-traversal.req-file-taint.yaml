rules:
- id: csharp.dotnet-core.path-traversal.req-file-taint.req-file-taint
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: LOW
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - file::sink::file-access::file
    - web::source::header::ASP.NET
    - web::source::http-body::ASP.NET
    - web::source::http-params::ASP.NET
    - web::source::url-path-params::ASP.NET
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - .NET
    - api
    - csharp
    - dotnet
    - file
    - mvc
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Path Traversal
    source: https://semgrep.dev/r/csharp.dotnet-core.path-traversal.req-file-taint.req-file-taint
    shortlink: https://sg.run/jPYA
    semgrep.dev:
      rule:
        r_id: 72921
        rv_id: 731853
        rule_id: lBU0b6
        version_id: WrTNAWW
        url: https://semgrep.dev/playground/r/WrTNAWW/csharp.dotnet-core.path-traversal.req-file-taint.req-file-taint
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  options:
    interfile: true
  pattern-sources:
  - label: REQ
    pattern-either:
    - patterns:
      - pattern-inside: |
          using Microsoft.AspNetCore.Mvc;
          ...
      - pattern: |
          public $TYPE $NAME(..., $X $VAR,...) {
            ...
          }
      - pattern-not: |
          [NonAction]
          public $TYPE $NAME(..., $X $VAR,...) {
            ...
          }
      - pattern-not: |
          public $TYPE $NAME(..., [FromServices] $X $VAR, ...){
            ...
          }
      - focus-metavariable: $VAR
      - metavariable-pattern:
          metavariable: $X
          patterns:
          - pattern-not-regex: (int|long|float|double|bool|Guid)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $CN : Controller {...}
            - pattern-inside: |
                class $CN : ControllerBase {...}
          - pattern-not-inside: |
              [NonController]
              class $CN : $T {...}
        - patterns:
          - pattern-inside: class $CN {...}
          - pattern-not-inside: |
              [NonController]
              class $CN {...}
          - metavariable-regex:
              metavariable: $CN
              regex: .*Controller
        - pattern-inside: |
            [Controller]
            class $CN {...}
        - pattern-inside: |
            [ApiController]
            class $CN {...}
    - patterns:
      - pattern-inside: |
          using Microsoft.AspNetCore.Mvc;
          ...
      - focus-metavariable: $VAR
      - pattern-either:
        - pattern-inside: $TYPE $NAME(..., [FromBody] $T $VAR, ...) { ... }
        - pattern-inside: $TYPE $NAME(..., [FromForm] $T $VAR, ...) { ... }
        - pattern-inside: $TYPE $NAME(..., [FromHeader] $T $VAR, ...) { ... }
        - pattern-inside: $TYPE $NAME(..., [FromQuery] $T $VAR, ...) { ... }
        - pattern-inside: $TYPE $NAME(..., [FromRoute] $T $VAR, ...) { ... }
        - pattern-inside: (..., [FromBody] $T $VAR, ...) => { ... }
        - pattern-inside: (..., [FromForm] $T $VAR, ...) => { ... }
        - pattern-inside: (..., [FromHeader] $T $VAR, ...) => { ... }
        - pattern-inside: (..., [FromQuery] $T $VAR, ...) => { ... }
        - pattern-inside: (..., [FromRoute] $T $VAR, ...) => { ... }
    - patterns:
      - pattern-either:
        - pattern: HttpContext.Request.Query
        - pattern: HttpContext.Request.QueryString
        - pattern: HttpContext.Request.Headers
        - pattern: HttpContext.Request.RouteValues
        - pattern: HttpContext.Request.Body
        - pattern: HttpContext.Request.BodyReader
        - pattern: HttpContext.Request.Form
        - pattern: $X.HttpContext.Request.Query
        - pattern: $X.HttpContext.Request.QueryString
        - pattern: $X.HttpContext.Request.Headers
        - pattern: $X.HttpContext.Request.RouteValues
        - pattern: $X.HttpContext.Request.Body
        - pattern: $X.HttpContext.Request.BodyReader
        - pattern: $X.HttpContext.Request.Form
        - pattern: (HttpContext $C).Request.Query
        - pattern: (HttpContext $C).Request.QueryString
        - pattern: (HttpContext $C).Request.Headers
        - pattern: (HttpContext $C).Request.RouteValues
        - pattern: (HttpContext $C).Request.Body
        - pattern: (HttpContext $C).Request.BodyReader
        - pattern: (HttpContext $C).Request.Form
        - pattern: (HttpRequest $R).Query
        - pattern: (HttpRequest $R).QueryString
        - pattern: (HttpRequest $R).Headers
        - pattern: (HttpRequest $R).RouteValues
        - pattern: (HttpRequest $R).Body
        - pattern: (HttpRequest $R).BodyReader
        - pattern: (HttpRequest $R).Form
  - label: REQ
    patterns:
    - focus-metavariable: $VAR
    - metavariable-pattern:
        metavariable: $T
        patterns:
        - pattern-not-regex: (int|long|float|double|bool|Guid)
    - pattern-either:
      - pattern-inside: IActionResult $FN(..., $T $VAR, ...) {...}
      - pattern-inside: Task<IActionResult> $FN(..., $T $VAR, ...) {...}
      - pattern-inside: ActionResult<$TYPE> $FN(..., $T $VAR, ...) {...}
      - pattern-inside: Task<ActionResult<$TYPE>> $FN(..., $T $VAR, ...) {...}
      - pattern-inside: $X.MapGet($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapPost($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapPut($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapDelete($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapPatch($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapMethods($ROUTE, $M, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.Map($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapFallback($ROUTE, (..., $T $VAR, ...) => {...})
  - label: COMBINE
    patterns:
    - focus-metavariable: $A
    - pattern-either:
      - pattern: Path.Combine(...,$A,...)
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "..." + ...
      - pattern: '... + "..."'
      - pattern: $"..."
      - pattern: String.Format(...)
      - pattern: string.Format(...)
      - pattern: String.Concat(...)
      - pattern: string.Concat(...)
      - pattern: String.Concat<$T>(...)
      - pattern: string.Concat<$T>(...)
      - pattern: String.Join(...)
      - pattern: string.Join(...)
      - pattern: String.Join<$T>(...)
      - pattern: string.Join<$T>(...)
      - pattern: new String(...)
      - pattern: new string(...)
      - pattern: new StringBuilder(...)
      - pattern: (StringBuilder $S).Append(...)
      - pattern: (StringBuilder $S).AppendLine(...)
      - pattern: (StringBuilder $S).AppendFormat(...)
      - pattern: (StringBuilder $S).AppendJoin(...)
      - pattern: (StringBuilder $S).Replace(...)
      - pattern: (StringBuilder $S).Insert(...)
      - patterns:
        - pattern-either:
          - pattern: $S.Append(...)
          - pattern: $S.AppendLine(...)
          - pattern: $S.AppendFormat(...)
          - pattern: $S.AppendJoin(...)
          - pattern: $S.Replace(...)
          - pattern: $S.Insert(...)
        - pattern-either:
          - pattern-inside: |
              var $S = new StringBuilder(...);
              ...
          - pattern-inside: |
              $S = new StringBuilder(...);
              ...
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: (StringBuilder $TO).Append(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendLine(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendFormat(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendJoin(..., $FROM,...)
        - pattern: (StringBuilder $TO).Replace(..., $FROM,...)
        - pattern: (StringBuilder $TO).Insert(..., $FROM,...)
        - patterns:
          - pattern-either:
            - pattern: $TO.Append(..., $FROM,...)
            - pattern: $TO.AppendLine(..., $FROM,...)
            - pattern: $TO.AppendFormat(..., $FROM,...)
            - pattern: $TO.AppendJoin(..., $FROM,...)
            - pattern: $TO.Replace(..., $FROM,...)
            - pattern: $TO.Insert(..., $FROM,...)
          - pattern-either:
            - pattern-inside: |
                var $TO = new StringBuilder(...);
                ...
            - pattern-inside: |
                $TO = new StringBuilder(...);
                ...
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $PATH
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: File.$METHOD($PATH,...)
          - pattern: System.IO.File.$METHOD($PATH,...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: (?i)^(read|write|open|create)
      - pattern: new FileStream($PATH, ...)
    requires: REQ and not COMBINE and not CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: Path.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (GetFileName|GetExtension)
  - patterns:
    - pattern: $X
    - pattern-inside: |
        if(<... Path.$METHOD($X) ...>){
          ...
        }
        ...
    - metavariable-regex:
        metavariable: $METHOD
        regex: (GetFileName|GetExtension)
