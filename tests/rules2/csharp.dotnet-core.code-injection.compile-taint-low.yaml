rules:
- id: csharp.dotnet-core.code-injection.compile-taint-low.compile-taint-low
  message: The application might dynamically evaluate untrusted input, which can lead
    to a code injection vulnerability. An attacker can execute arbitrary code, potentially
    gaining complete control of the system. To prevent this vulnerability, avoid executing
    code containing user input. If this is unavoidable, validate and sanitize the
    input, and use safe alternatives for evaluating user input.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: LOW
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    cwe2020-top25: true
    cwe2022-top25: true
    functional-categories:
    - code::sink::eval
    - web::source::header::ASP.NET
    - web::source::http-body::ASP.NET
    - web::source::http-params::ASP.NET
    - web::source::url-path-params::ASP.NET
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - .NET
    - api
    - compiler
    - csharp
    - dotnet
    - mvc
    - roslyn
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Code Injection
    source: https://semgrep.dev/r/csharp.dotnet-core.code-injection.compile-taint-low.compile-taint-low
    shortlink: https://sg.run/pB5k
    semgrep.dev:
      rule:
        r_id: 72562
        rv_id: 229171
        rule_id: PeUyEB
        version_id: GxTjNlJ
        url: https://semgrep.dev/playground/r/GxTjNlJ/csharp.dotnet-core.code-injection.compile-taint-low.compile-taint-low
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  options:
    interfile: true
  pattern-sources:
  - patterns:
    - focus-metavariable: $VAR
    - metavariable-pattern:
        metavariable: $T
        patterns:
        - pattern-not-regex: (int|long|float|double|bool|Guid)
    - pattern-either:
      - pattern-inside: IActionResult $FN(..., $T $VAR, ...) {...}
      - pattern-inside: Task<IActionResult> $FN(..., $T $VAR, ...) {...}
      - pattern-inside: ActionResult<$TYPE> $FN(..., $T $VAR, ...) {...}
      - pattern-inside: Task<ActionResult<$TYPE>> $FN(..., $T $VAR, ...) {...}
      - pattern-inside: $X.MapGet($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapPost($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapPut($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapDelete($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapPatch($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapMethods($ROUTE, $M, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.Map($ROUTE, (..., $T $VAR, ...) => {...})
      - pattern-inside: $X.MapFallback($ROUTE, (..., $T $VAR, ...) => {...})
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: (StringBuilder $TO).Append(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendLine(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendFormat(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendJoin(..., $FROM,...)
        - pattern: (StringBuilder $TO).Replace(..., $FROM,...)
        - pattern: (StringBuilder $TO).Insert(..., $FROM,...)
        - patterns:
          - pattern-either:
            - pattern: $TO.Append(..., $FROM,...)
            - pattern: $TO.AppendLine(..., $FROM,...)
            - pattern: $TO.AppendFormat(..., $FROM,...)
            - pattern: $TO.AppendJoin(..., $FROM,...)
            - pattern: $TO.Replace(..., $FROM,...)
            - pattern: $TO.Insert(..., $FROM,...)
          - pattern-either:
            - pattern-inside: |
                var $TO = new StringBuilder(...);
                ...
            - pattern-inside: |
                $TO = new StringBuilder(...);
                ...
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CODE
    - pattern-inside: |
        using Microsoft.CodeAnalysis.CSharp.Scripting;
        ...
    - pattern-either:
      - pattern: CSharpScript.Create<$T>($CODE, ...)
      - pattern: CSharpScript.Create($CODE, ...)
      - pattern: CSharpScript.RunAsync<$T>($CODE,...)
      - pattern: CSharpScript.RunAsync($CODE, ...)
      - pattern: CSharpScript.EvaluateAsync<$T>($CODE, ...)
      - pattern: CSharpScript.EvaluateAsync($CODE, ...)
  pattern-sanitizers:
  - patterns:
    - pattern: Convert.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (ToBase64CharArray|ToBase64String|ToBoolean|ToDateTime|ToDecimal|ToDouble|ToInt16|ToInt32|ToInt64|ToSByte|ToSingle|ToUInt16|ToUInt32|ToUInt64)
  - patterns:
    - pattern-either:
      - pattern: $INT.Parse(...)
      - pattern: $INT.TryParse(...)
      - pattern: $INT.TryParseExact(...)
    - metavariable-regex:
        metavariable: $INT
        regex: (Int32|Int128|Int16|Int64|IntPtr|Boolean|Decimal|Double|Guid|DateTime|Single|SByte|UInt128|UInt16|UInt32|UInt64|UIntPtr)
  - patterns:
    - pattern-either:
      - pattern: (int $NUM)
      - pattern: (long $NUM)
      - pattern: (float $NUM)
      - pattern: (double $NUM)
      - pattern: (bool $NUM)
      - pattern: (Guid $NUM)
      - pattern: var $X = (int) ...;
      - pattern: var $X = (long) ...;
      - pattern: var $X = (float) ...;
      - pattern: var $X = (double) ...;
      - pattern: var $X = (bool) ...;
      - pattern: var $X = (Guid) ...;
