rules:
- id: java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `ObjectInputStream`.
    If you must, you can try overriding the `ObjectInputStream#resolveClass()` method
    or using a safe replacement for the generic `readObject()` method.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - deserialization::sink::load-object::apache.commons
    - deserialization::sink::load-object::java.io
    - web::source::cookie::Servlet
    - web::source::header::Servlet
    - web::source::http-body::Servlet
    - web::source::http-params::Servlet
    - web::source::url-path-params::Servlet
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    technology:
    - java
    - servlets
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets
    shortlink: https://sg.run/ZJjw
    semgrep.dev:
      rule:
        r_id: 46835
        rv_id: 742793
        rule_id: wdUgly
        version_id: gETJKjj
        url: https://semgrep.dev/playground/r/gETJKjj/java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (ServletRequest $REQ).$METHOD(...)
      - pattern: (HttpServletRequest $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString|getPathInfo)
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  pattern-sinks:
  - patterns:
    - focus-metavariable: $IN
    - pattern-either:
      - pattern: new ObjectInputStream($IN, ...)
      - pattern: new java.io.ObjectInputStream($IN, ...)
      - pattern: new org.apache.commons.io.input.ClassLoaderObjectInputStream($CL,
          $IN, ...)
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
