rules:
- id: java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution
  message: User data flows into a script engine or another means of dynamic code evaluation.
    This is unsafe and could lead to code injection or arbitrary code execution as
    a result. Avoid inputting user data into code execution or use proper sandboxing
    if user code evaluation is necessary.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    functional-categories:
    - expression-lang::sink::expression::commons-jexl
    - expression-lang::sink::expression::javax.el
    - expression-lang::sink::expression::javax.script
    - expression-lang::sink::expression::velocity
    - web::source::cookie::Spring
    - web::source::header::Spring
    - web::source::http-body::Spring
    - web::source::http-params::Spring
    - web::source::url-path-params::Spring
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://0xn3va.gitbook.io/cheat-sheets/framework/spring/spel-injection
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - Spring
    - java
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Code Injection
    source: https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution
    shortlink: https://sg.run/OjZB
    semgrep.dev:
      rule:
        r_id: 43775
        rv_id: 742813
        rule_id: 3qUgzv
        version_id: zyTnzoy
        url: https://semgrep.dev/playground/r/zyTnzoy/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $RET $METHOD(..., @$REQ(...) $TYPE $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., @$REQ $TYPE $SOURCE, ...) {...}
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute|MatrixVariable|RequestPart|RequestAttribute)
    - focus-metavariable: $SOURCE
  - patterns:
    - pattern-either:
      - pattern-inside: |
          @$MAPPING(...)
          $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}
      - pattern-inside: |
          @$MAPPING
          $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}
    - pattern-either:
      - pattern: $RET $METHOD(..., String $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., org.springframework.http.HttpEntity<$X> $SOURCE,
          ...) {...}
      - pattern: $RET $METHOD(..., java.io.InputStream $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., java.io.Reader $SOURCE, ...) {...}
    - metavariable-regex:
        metavariable: $MAPPING
        regex: (ResponseBody|RequestMapping|PatchMapping|GetMapping|DeleteMapping|PutMapping|PostMapping|HttpExchange|GetExchange|PostExchange|PutExchange|PatchExchange|DeleteExchange|ResponseStatus)
    - focus-metavariable: $SOURCE
  - patterns:
    - pattern-either:
      - pattern: (org.springframework.web.context.request.WebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.NativeWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.FacesWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.ServletWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.servlet.handler.DispatcherServletWebRequest
          $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.async.AsyncWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.async.StandardServletAsyncWebRequest
          $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getHeader|getHeaderNames|getHeaderValues|getParameter|getParameterMap|getParameterNames|getParameterValues|getAttribute|getAttributeNames)
  - patterns:
    - pattern-either:
      - pattern: (org.springframework.http.HttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.client.ClientHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.ServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.ServletServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.multipart.support.RequestPartServletServerHttpRequest
          $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.reactive.ServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.reactive.ServerHttpRequestDecorator
          $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getPath|getQueryParams|getBody|getURI|getHeaders|getCookies)
  - patterns:
    - pattern-either:
      - pattern: (javax.servlet.ServletRequest $REQ).$METHOD(...)
      - pattern: (javax.servlet.http.HttpServletRequest $REQ).$METHOD(...)
      - pattern: (jakarta.servlet.ServletRequest $REQ).$METHOD(...)
      - pattern: (jakarta.servlet.http.HttpServletRequest $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString|getPathInfo)
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SCRIPT
    - pattern-either:
      - pattern: (ScriptEngine $ENGINE).eval($SCRIPT, ...)
      - pattern: (ExpressionFactory $FACTORY).createMethodExpression($CONTEXT, $SCRIPT,
          ...)
      - pattern: (ExpressionFactory $FACTORY).createValueExpression($CONTEXT, $SCRIPT,
          ...)
      - pattern: (ExpressionParser $PARSER).parseExpression($SCRIPT, ...)
      - pattern: Velocity.evaluate($CONTEXT, $WRITER, $LOGTAG, $SCRIPT)
      - pattern: (JexlEngine $JEXL).createExpression($SCRIPT, ...)
      - patterns:
        - pattern-either:
          - pattern: (ExpressionParser $PARSER).parseExpression($SCRIPT, ...). ...
              .$FUNCS(...)
          - pattern: (ExpressionFactory $FACTORY).createValueExpression($CONTEXT,
              $SCRIPT, ...). ... .$FUNCS(...)
        - metavariable-regex:
            metavariable: $FUNCS
            regex: (getValue|getType|getValueReference)
      - patterns:
        - pattern: MVEL.$FUNCS($SCRIPT, ...)
        - metavariable-regex:
            metavariable: $FUNCS
            regex: (eval|evalToString|compileExpression|compileSetExpression)
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
