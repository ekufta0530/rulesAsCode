rules:
- id: rust.rocket.ssrf.reqwest-taint.reqwest-taint
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::sink::http-request::actix_web
    - net::sink::http-request::reqwest
    - web::source::cookie::rocket
    - web::source::form-data::rocket
    - web::source::header::rocket
    - web::source::http-body::rocket
    - web::source::http-params::rocket
    - web::source::url-path-params::rocket
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://docs.rs/reqwest/latest/reqwest/
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - http
    - reqwest
    - rocket
    - rust
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Server-Side Request Forgery (SSRF)
    source: https://semgrep.dev/r/rust.rocket.ssrf.reqwest-taint.reqwest-taint
    shortlink: https://sg.run/pekJ
    semgrep.dev:
      rule:
        r_id: 66118
        rv_id: 229355
        rule_id: j2UXRd
        version_id: 3ZTlqxG
        url: https://semgrep.dev/playground/r/3ZTlqxG/rust.rocket.ssrf.reqwest-taint.reqwest-taint
        origin: pro_rules
  languages:
  - rust
  mode: taint
  pattern-sources:
  - label: INPUT
    pattern-either:
    - patterns:
      - pattern: $PARAM
      - pattern-either:
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : rocket::request::Form<$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : rocket::http::Cookies, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &rocket::http::CookieJar<'$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : rocket::serde::json::Json<$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : String, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &str, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &RawStr, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &OsStr, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : OsString, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<String>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<&str>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<&RawStr>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<&OsStr>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<OsString>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<rocket::request::Form<$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<rocket::http::Cookies>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&rocket::http::CookieJar<'$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<rocket::serde::json::Json<$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<String>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&str>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&RawStr>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&OsStr>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<OsString>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<String>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<&str>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<&RawStr>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<&OsStr>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<OsString>>, ...) {
              ...
            }
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(get|put|post|delete|head|patch|options)$
    - patterns:
      - pattern: $PARAM
      - pattern-either:
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : $TYPE, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : $TYPE<$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : $TYPE<'$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &$TYPE, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &$TYPE<$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : &$TYPE<'$T>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<$TYPE>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<$TYPE<$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<$TYPE<'$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<&$TYPE>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<&$TYPE<$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Vec<&$TYPE<'$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<$TYPE>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<$TYPE<$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<$TYPE<'$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&$TYPE>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&$TYPE<$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<&$TYPE<'$T>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<$TYPE>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<$TYPE<$T>>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<$TYPE<'$T>>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<&$TYPE>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<&$TYPE<$T>>>, ...) {
              ...
            }
        - pattern-inside: |
            #[$METHOD($...ROUTE)]
            fn $FUNC(..., $PARAM : Option<Vec<&$TYPE<'$T>>>, ...) {
              ...
            }
      - pattern-inside: |
          struct $TYPE { ... };
          ...
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(get|put|post|delete|head|patch|options)$
  - label: REQUEST
    patterns:
    - pattern-either:
      - pattern-inside: |
          fn $FUNC(..., $REQ : &'r rocket::Request<'_>, ...) {
            ...
          }
      - pattern-inside: |
          fn $FUNC(..., $REQ : &'r rocket::request::Request<'_>, ...) {
            ...
          }
      - pattern-inside: |
          fn $FUNC(..., $REQ : &rocket::Request, ...) {
            ...
          }
      - pattern-inside: |
          fn $FUNC(..., $REQ : &rocket::request::Request, ...) {
            ...
          }
  - label: REQ_INPUT
    patterns:
    - pattern-either:
      - pattern: $R.path()
      - pattern: $R.query()
      - pattern: $R.map_path()
      - pattern: $R.clear_query()
      - pattern: $R.cookies()
      - pattern: $R.headers()
      - pattern: $R.query_value
    requires: REQUEST
  - label: CONCAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: $F + $X
      - pattern: format!($F, $X, ...)
    - pattern-not: $X + $F
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: String::from("https://") + $X
    - pattern-not: String::from("http://") + $X
    - pattern-not: String::from("//") + $X
  - label: FORMAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: format!("$REGEX", $X)
      - pattern: std::fmt::format("$REGEX", ..., $X ,...)
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^(http://|https://|//)\{.*
    requires: INPUT or REQ_INPUT
  pattern-propagators:
  - from: $FROM
    patterns:
    - pattern: $TO.push_str($FROM)
    to: $TO
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $TO.$FUNC(..., $FROM)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(insert_str|replace_range)$
    to: $TO
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  - from: $FROM
    patterns:
    - pattern: $TO = $FROM.into()
    to: $TO
  - from: $FROM
    patterns:
    - pattern: $TO = std::from_utf8($FROM)
    to: $TO
  - from: $FROM
    patterns:
    - pattern: |
        let $TO = if let $SOME = $FROM {
          ...
        } else {
          ...
        };
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: reqwest::get($QUERY,...)
      - patterns:
        - pattern-either:
          - pattern: $CLIENT.delete($QUERY,...)
          - pattern: $CLIENT.get($QUERY,...)
          - pattern: $CLIENT.post($QUERY,...)
          - pattern: $CLIENT.head($QUERY,...)
          - pattern: $CLIENT.patch($QUERY,...)
          - pattern: $CLIENT.put($QUERY,...)
          - pattern: $CLIENT.request($M,$QUERY,...)
        - pattern-inside: |
            let $CLIENT = reqwest::Client::new(...);
            ...
      - pattern: |
          ($CLIENT: reqwest::Client).delete($QUERY,...)
      - pattern: |
          ($CLIENT: reqwest::Client).get($QUERY,...)
      - pattern: |
          ($CLIENT: reqwest::Client).post($QUERY,...)
      - pattern: |
          ($CLIENT: reqwest::Client).head($QUERY,...)
      - pattern: |
          ($CLIENT: reqwest::Client).patch($QUERY,...)
      - pattern: |
          ($CLIENT: reqwest::Client).put($QUERY,...)
      - pattern: |
          ($CLIENT: reqwest::Client).request($M,$QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).delete($QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).get($QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).post($QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).head($QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).patch($QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).put($QUERY,...)
      - pattern: |
          ($CLIENT: actix_web::web::Data<reqwest::Client>).request($M,$QUERY,...)
    requires: FORMAT or (INPUT and not CONCAT) or (REQ_INPUT and not CONCAT)
