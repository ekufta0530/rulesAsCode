rules:
- id: python.django.deserialization.tainted-marshal-django.tainted-marshal-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `marshal` module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. For deserializing data from untrusted sources we recommend using YAML
    or JSON libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - deserialization::sink::load-object::lang
    - web::source::cookie::django
    - web::source::http-params::django
    - web::source::http-body::django
    - web::source::header::django
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.audit.marshal-usage
    technology:
    - python
    - django
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/python.django.deserialization.tainted-marshal-django.tainted-marshal-django
    shortlink: https://sg.run/k39X
    semgrep.dev:
      rule:
        r_id: 44928
        rv_id: 111818
        rule_id: gxUvy1
        version_id: l4T46nJ
        url: https://semgrep.dev/playground/r/l4T46nJ/python.django.deserialization.tainted-marshal-django.tainted-marshal-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n\
                ...):\n  ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: marshal.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
