rules:
- id: java.micronaut.ssrf.httpclient-taint-ws.httpclient-taint-ws
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: LOW
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::sink::http-request::HttpClient
    - net::source::network-connection::Micronaut
    - web::sink::http-request::HttpClient
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - Micronaut
    - WebSocket
    - java
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Server-Side Request Forgery (SSRF)
    source: https://semgrep.dev/r/java.micronaut.ssrf.httpclient-taint-ws.httpclient-taint-ws
    shortlink: https://sg.run/YGLLd
    semgrep.dev:
      rule:
        r_id: 114914
        rv_id: 735007
        rule_id: d8Ur33X
        version_id: e1TrolB
        url: https://semgrep.dev/playground/r/e1TrolB/java.micronaut.ssrf.httpclient-taint-ws.httpclient-taint-ws
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - label: REQ
    patterns:
    - focus-metavariable: $INPUT
    - pattern: |
        @io.micronaut.websocket.annotation.$ON(...)
        $TYPE $NAME(..., $ITYPE $INPUT, ...) {...}
    - pattern-either:
      - pattern-inside: |
          @io.micronaut.websocket.annotation.ServerWebSocket(...)
          class $CL {...}
      - pattern-inside: |
          @io.micronaut.websocket.annotation.ClientWebSocket(...)
          class $CL {...}
    - metavariable-pattern:
        metavariable: $ON
        patterns:
        - patterns:
          - pattern-either:
            - pattern: OnOpen
            - pattern: OnClose
            - pattern: OnMessage
    - metavariable-pattern:
        metavariable: $ITYPE
        patterns:
        - patterns:
          - pattern-not-regex: WebSocketSession
  - label: STRING_CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${$X}..."
      - pattern: $F + $X
      - pattern: |
          "...".formatted(...)
      - pattern: String.format(...)
      - pattern: MessageFormat.format(...)
    requires: REQ
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  pattern-sinks:
  - patterns:
    - focus-metavariable: $URI
    - pattern-either:
      - pattern: (io.micronaut.http.client.HttpClient $C). ... .retrieve($URI, ...)
      - pattern: (io.micronaut.http.client.HttpClient $C). ... .exchange($URI, ...)
      - pattern: (io.micronaut.http.client.netty.DefaultHttpClient $C). ... .retrieve($URI,
          ...)
      - pattern: (io.micronaut.http.client.netty.DefaultHttpClient $C). ... .exchange($URI,
          ...)
      - pattern: (io.micronaut.http.client.StreamingHttpClient $C). ... .retrieve($URI,
          ...)
      - pattern: (io.micronaut.http.client.StreamingHttpClient $C). ... .exchange($URI,
          ...)
      - pattern: new io.micronaut.http.client.netty.DefaultHttpClient($URI)
      - pattern: new io.micronaut.http.client.netty.DefaultHttpClient($URI, $X)
      - pattern: new io.micronaut.http.client.netty.DefaultHttpClient($URI, $X, $Y)
    requires: REQ and not STRING_CONCAT
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
  - patterns:
    - focus-metavariable: $X
    - pattern: io.micronaut.http.HttpRequest.$METHOD($URL, ..., $X, ...)
  - patterns:
    - pattern: io.micronaut.http.uri.UriBuilder. ... .$FUNC(...)
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern-either:
          - pattern: path
          - pattern: expand
          - pattern: queryParam
  - patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: java.net.http.HttpRequest. ... .$FUNC(..., $X, ...)
      - pattern: (java.net.http.HttpRequest.Builder $B). ... .$FUNC(..., $X, ...)
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern-not-regex: ^(newBuilder|uri)$
  - patterns:
    - focus-metavariable: $PARAM
    - pattern: $URLBUILDER. ... .addQueryParameter(..., $PARAM). ...
