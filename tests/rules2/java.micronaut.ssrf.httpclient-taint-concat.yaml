rules:
- id: java.micronaut.ssrf.httpclient-taint-concat.httpclient-taint-concat
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::sink::http-request::HttpClient
    - web::sink::http-request::HttpClient
    - web::source::cookie::Micronaut
    - web::source::form-data::Micronaut
    - web::source::header::Micronaut
    - web::source::http-body::Micronaut
    - web::source::http-params::Micronaut
    - web::source::url-path-params::Micronaut
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - Micronaut
    - java
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Server-Side Request Forgery (SSRF)
    source: https://semgrep.dev/r/java.micronaut.ssrf.httpclient-taint-concat.httpclient-taint-concat
    shortlink: https://sg.run/KxLLn
    semgrep.dev:
      rule:
        r_id: 114911
        rv_id: 735004
        rule_id: OrUN88q
        version_id: w8TlPEE
        url: https://semgrep.dev/playground/r/w8TlPEE/java.micronaut.ssrf.httpclient-taint-concat.httpclient-taint-concat
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - label: REQ
    patterns:
    - pattern: |
        @io.micronaut.http.annotation.$METHOD(...)
        $T $FUNC(..., $TYPE $SOURCE, ...) {...}
    - focus-metavariable: $SOURCE
    - metavariable-regex:
        metavariable: $METHOD
        regex: (Delete|Get|Head|Options|Patch|Put|Post|Trace|CustomHttpMethod)
    - metavariable-pattern:
        metavariable: $TYPE
        patterns:
        - patterns:
          - pattern-not-regex: ^Session$
  - label: REQ
    patterns:
    - pattern-either:
      - pattern: (io.micronaut.http.HttpRequest<$ANY> $REQ).$PARAM(...)
      - pattern: (io.micronaut.http.HttpRequest<?> $REQ).$PARAM(...)
      - pattern: (io.micronaut.http.HttpRequest $REQ).$PARAM(...)
    - metavariable-pattern:
        metavariable: $PARAM
        patterns:
        - patterns:
          - pattern-either:
            - pattern: getCookies
            - pattern: getLocale
            - pattern: getParameters
            - pattern: getPath
            - pattern: getUri
            - pattern: getBody
            - pattern: getContentType
            - pattern: getHeaders
  - label: NOT_CONCAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: $F + $X
      - pattern: String.format(..., $X, ...)
      - pattern: MessageFormat.format(..., $X, ...)
    - pattern-not: $X + $F
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "ws://" + $X
    - pattern-not: |
        "wss://" + $X
    - pattern-not: |
        "//" + $X
    requires: REQ
  - label: HTTP_FORMAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: MessageFormat.format("$REGEX", $X,...)
      - pattern: String.format("$REGEX", $X,...)
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^(http://|https://|//|ws://|wss://)%s.*
    requires: REQ
  - label: STRING_CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${$X}..."
      - pattern: $F + $X
      - pattern: |
          "...".formatted(...)
      - pattern: String.format(...)
      - pattern: MessageFormat.format(...)
    requires: REQ
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  pattern-sinks:
  - patterns:
    - focus-metavariable: $URI
    - pattern-either:
      - pattern: (io.micronaut.http.client.HttpClient $C). ... .retrieve($URI, ...)
      - pattern: (io.micronaut.http.client.HttpClient $C). ... .exchange($URI, ...)
      - pattern: (io.micronaut.http.client.netty.DefaultHttpClient $C). ... .retrieve($URI,
          ...)
      - pattern: (io.micronaut.http.client.netty.DefaultHttpClient $C). ... .exchange($URI,
          ...)
      - pattern: (io.micronaut.http.client.StreamingHttpClient $C). ... .retrieve($URI,
          ...)
      - pattern: (io.micronaut.http.client.StreamingHttpClient $C). ... .exchange($URI,
          ...)
      - pattern: new io.micronaut.http.client.netty.DefaultHttpClient($URI)
      - pattern: new io.micronaut.http.client.netty.DefaultHttpClient($URI, $X)
      - pattern: new io.micronaut.http.client.netty.DefaultHttpClient($URI, $X, $Y)
    requires: (REQ and STRING_CONCAT and not NOT_CONCAT) or HTTP_FORMAT
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
  - patterns:
    - focus-metavariable: $X
    - pattern: io.micronaut.http.HttpRequest.$METHOD($URL, ..., $X, ...)
  - patterns:
    - pattern: io.micronaut.http.uri.UriBuilder. ... .$FUNC(...)
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern-either:
          - pattern: path
          - pattern: expand
          - pattern: queryParam
  - patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: java.net.http.HttpRequest. ... .$FUNC(..., $X, ...)
      - pattern: (java.net.http.HttpRequest.Builder $B). ... .$FUNC(..., $X, ...)
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern-not-regex: ^(newBuilder|uri)$
  - patterns:
    - focus-metavariable: $PARAM
    - pattern: $URLBUILDER. ... .addQueryParameter(..., $PARAM). ...
