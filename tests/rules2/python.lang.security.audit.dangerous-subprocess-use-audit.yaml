rules:
- id: python.lang.security.audit.dangerous-subprocess-use-audit.dangerous-subprocess-use-audit
  pattern-either:
  - patterns:
    - pattern-not: subprocess.$FUNC("...", ...)
    - pattern-not: subprocess.$FUNC(["...",...], ...)
    - pattern-not: subprocess.$FUNC(("...",...), ...)
    - pattern-not:
        patterns:
        - pattern-not-inside: |
            $ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]
            ...
        - pattern-inside: |
            $ARR = [...]
            ...
        - pattern-either:
          - pattern: subprocess.$FUNC(*$ARR, ...)
          - pattern: subprocess.$FUNC([*$ARR, ...])
    - pattern-not: subprocess.CalledProcessError(...)
    - pattern-not: subprocess.SubprocessError(...)
    - pattern: subprocess.$FUNC(...)
  - patterns:
    - pattern: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...)
    - pattern-not: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...)
  - patterns:
    - pattern-either:
      - pattern: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...)
      - pattern: subprocess.$FUNC(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...)
    - pattern-not: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)
    - pattern-not: subprocess.$FUNC(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...)
  - patterns:
    - pattern: subprocess.$FUNC("=~/(python)/",...)
    - pattern-not: subprocess.$FUNC("=~/(python)/","...",...)
  - patterns:
    - pattern-either:
      - pattern: subprocess.$FUNC(["=~/(python)/",...],...)
      - pattern: subprocess.$FUNC(("=~/(python)/",...),...)
    - pattern-not: subprocess.$FUNC(["=~/(python)/","...",...],...)
    - pattern-not: subprocess.$FUNC(("=~/(python)/","...",...),...)
  message: Detected subprocess function '$FUNC' without a static string. If this data
    can be controlled by a malicious actor, it may be an instance of command injection.
    Audit the use of this call to ensure it is not controllable by an external resource.
    You may consider using 'shlex.escape()'.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess
    - https://docs.python.org/3/library/subprocess.html
    - https://docs.python.org/3/library/shlex.html
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    category: security
    technology:
    - python
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    vulnerability_class:
    - Command Injection
    source: https://semgrep.dev/r/python.lang.security.audit.dangerous-subprocess-use-audit.dangerous-subprocess-use-audit
    shortlink: https://sg.run/zL8G
    semgrep.dev:
      rule:
        r_id: 27261
        rv_id: 110378
        rule_id: ReU0QY
        version_id: 44TR6yw
        url: https://semgrep.dev/playground/r/44TR6yw/python.lang.security.audit.dangerous-subprocess-use-audit.dangerous-subprocess-use-audit
        origin: community
  languages:
  - python
  severity: ERROR
