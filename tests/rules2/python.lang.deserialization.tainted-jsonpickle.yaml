rules:
- id: python.lang.deserialization.tainted-jsonpickle.tainted-jsonpickle
  message: The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. The `jsonpickle` module can
    execute arbitrary Python code. Do not load `jsonpickles` from untrusted sources.
    For deserializing data from untrusted sources we recommend using YAML or JSON
    libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - deserialization::sink::load-object::jsonpickle
    - web::source::cookie::lang
    - web::source::form-data::lang
    - web::source::header::lang
    - web::source::http-body::lang
    - web::source::http-params::lang
    - web::source::url-path-params::lang
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    - https://portswigger.net/web-security/deserialization
    - https://www.exploit-db.com/exploits/49585
    technology:
    - deserialization
    - http
    - http.server
    - jsonpickle
    - web
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-jsonpickle.tainted-jsonpickle
    shortlink: https://sg.run/RjgE
    semgrep.dev:
      rule:
        r_id: 44949
        rv_id: 524371
        rule_id: ReUNKY
        version_id: 7ZTppyJ
        url: https://semgrep.dev/playground/r/7ZTppyJ/python.lang.deserialization.tainted-jsonpickle.tainted-jsonpickle
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    interfile: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
              ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
              ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
              ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DICT[$KEY]
            ...
        - pattern-inside: |
            $DICT.get($KEY, $DEFAULT)
            ...
        - pattern-inside: |
            $DICT = { ... }
            ...
        - pattern-inside: |
            $DICT = dict(...)
            ...
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $TO_DICT[$KEY]
            ...
        - pattern-inside: |
            $TO_DICT.get($KEY, $DEFAULT)
            ...
        - pattern-inside: |
            $TO_DICT = { ... }
            ...
        - pattern-inside: |
            $TO_DICT = dict(...)
            ...
        - pattern-inside: |
            $FROM_DICT[$KEY]
            ...
        - pattern-inside: |
            $FROM_DICT.get($KEY, $DEFAULT)
            ...
        - pattern-inside: |
            $FROM_DICT = { ... }
            ...
        - pattern-inside: |
            $FROM_DICT = dict(...)
            ...
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $LIST = [ ... ]
            ...
        - pattern-inside: |
            $LIST = list(...)
            ...
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SET = { $ITEM, ... }
            ...
        - pattern-inside: |
            $SET = set(...)
            ...
        - pattern-inside: |
            $OTHERSET = { $ITEM, ... }
            ...
        - pattern-inside: |
            $OTHERSET = set(...)
            ...
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: jsonpickle.unpickler.decode($SINK, ...)
      - pattern: jsonpickle.unpickler.loadclass($SINK, ...)
      - pattern: jsonpickle.unpickler.loadrepr($SINK)
      - pattern: jsonpickle.util.b64decode($SINK)
      - pattern: jsonpickle.util.b85decode($SINK)
      - patterns:
        - pattern-inside: |
            $B = jsonpickle.backend.JSONBackend()
            ...
        - pattern-either:
          - pattern: $B.decode($SINK)
          - pattern: $B.loads($SINK)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $DICT[$KEY]
          ...
      - pattern-inside: |
          $DICT = { $KEY: $VALUE for ... in ...}
          ...
      - pattern-inside: |
          $DICT.get($KEY, $DEFAULT)
          ...
      - pattern-inside: |
          $DICT = { }
          ...
      - pattern-inside: |
          $DICT = { $KEY: $VALUE, ... }
          ...
      - pattern-inside: |
          $DICT = dict(...)
          ...
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $LIST = [ ... ]
          ...
      - pattern-inside: |
          $LIST = list(...)
          ...
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SET = { $ITEM, ... }
          ...
      - pattern-inside: |
          $SET = set(...)
          ...
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SET = { $ITEM, ... }
          ...
      - pattern-inside: |
          $SET = { $ITEM for ... in ...}
          ...
      - pattern-inside: |
          $SET = set(...)
          ...
      - pattern-inside: |
          $SET = frozenset(...)
          ...
      - pattern-inside: |
          $OTHERSET = { $ITEM, ... }
          ...
      - pattern-inside: |
          $OTHERSET = set(...)
          ...
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $TUPLE = ( $ITEM, ... )
          ...
      - pattern-inside: |
          $TUPLE = $ITEM, ...
          ...
      - pattern-inside: |
          $TUPLE = tuple(...)
          ...
    - pattern-either:
      - pattern: $TUPLE.len()
