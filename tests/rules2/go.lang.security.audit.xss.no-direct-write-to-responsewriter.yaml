rules:
- id: go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
  languages:
  - go
  message: Detected directly writing or similar in 'http.ResponseWriter.write()'.
    This bypasses HTML escaping that prevents cross-site scripting vulnerabilities.
    Instead, use the 'html/template' package and render data using 'template.Execute()'.
  metadata:
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    vulnerability_class:
    - Cross-Site-Scripting (XSS)
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
    shortlink: https://sg.run/EkbA
    semgrep.dev:
      rule:
        r_id: 9137
        rv_id: 109633
        rule_id: GdU71y
        version_id: A8T95O8
        url: https://semgrep.dev/playground/r/A8T95O8/go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func $HANDLER(..., $WRITER *http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern-either:
    - pattern: $WRITER.Write(...)
    - pattern: (*$WRITER).Write(...)
  - pattern-not: $WRITER.Write([]byte("..."))
  severity: WARNING
