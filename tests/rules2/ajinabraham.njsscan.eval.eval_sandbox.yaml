rules:
- id: ajinabraham.njsscan.eval.eval_sandbox.sandbox_code_injection
  patterns:
  - pattern-inside: |
      require('sandbox')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $S.run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $S.run(<... $CODE ...>,...)
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...)
    - pattern: |
        $S.run(<... $REQ.$BODY ...>,...)
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $S.run(<... $CODE ...>,...)
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$BODY ...>,...)
    - pattern: |-
        $CODE = <... $REQ.$BODY ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...)
  message: Unrusted data in `sandbox` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp-web: a1
    cwe: cwe-94
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/ajinabraham.njsscan.eval.eval_sandbox.sandbox_code_injection
    shortlink: https://sg.run/egzy
    semgrep.dev:
      rule:
        r_id: 43632
        rv_id: 78250
        rule_id: PeUK79
        version_id: d6TBLL
        url: https://semgrep.dev/playground/r/d6TBLL/ajinabraham.njsscan.eval.eval_sandbox.sandbox_code_injection
        origin: community
