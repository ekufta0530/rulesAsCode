rules:
- id: java.spring.security.spring-tainted-ldap-injection.spring-tainted-ldap-injection
  message: Untrusted input might be used to build an LDAP query, which can allow attackers
    to run arbitrary LDAP queries. If an LDAP query must contain untrusted input then
    it must be escaped. Ensure data passed to an LDAP query is not controllable or
    properly sanitize the user input with functions like createEqualityFilter.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    functional-categories:
    - ldap::sink::ldap-query::javax.naming
    - web::source::cookie::Spring
    - web::source::header::Spring
    - web::source::http-body::Spring
    - web::source::http-params::Spring
    - web::source::url-path-params::Spring
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - Spring
    - java
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - LDAP Injection
    source: https://semgrep.dev/r/java.spring.security.spring-tainted-ldap-injection.spring-tainted-ldap-injection
    shortlink: https://sg.run/eg6b
    semgrep.dev:
      rule:
        r_id: 43776
        rv_id: 742814
        rule_id: 4bUJwX
        version_id: pZTzEZw
        url: https://semgrep.dev/playground/r/pZTzEZw/java.spring.security.spring-tainted-ldap-injection.spring-tainted-ldap-injection
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $RET $METHOD(..., @$REQ(...) $TYPE $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., @$REQ $TYPE $SOURCE, ...) {...}
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute|MatrixVariable|RequestPart|RequestAttribute)
    - focus-metavariable: $SOURCE
  - patterns:
    - pattern-either:
      - pattern-inside: |
          @$MAPPING(...)
          $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}
      - pattern-inside: |
          @$MAPPING
          $RET $METHODNAME(..., $TYPE $SOURCE, ...) {...}
    - pattern-either:
      - pattern: $RET $METHOD(..., String $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., org.springframework.http.HttpEntity<$X> $SOURCE,
          ...) {...}
      - pattern: $RET $METHOD(..., java.io.InputStream $SOURCE, ...) {...}
      - pattern: $RET $METHOD(..., java.io.Reader $SOURCE, ...) {...}
    - metavariable-regex:
        metavariable: $MAPPING
        regex: (ResponseBody|RequestMapping|PatchMapping|GetMapping|DeleteMapping|PutMapping|PostMapping|HttpExchange|GetExchange|PostExchange|PutExchange|PatchExchange|DeleteExchange|ResponseStatus)
    - focus-metavariable: $SOURCE
  - patterns:
    - pattern-either:
      - pattern: (org.springframework.web.context.request.WebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.NativeWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.FacesWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.ServletWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.servlet.handler.DispatcherServletWebRequest
          $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.async.AsyncWebRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.context.request.async.StandardServletAsyncWebRequest
          $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getHeader|getHeaderNames|getHeaderValues|getParameter|getParameterMap|getParameterNames|getParameterValues|getAttribute|getAttributeNames)
  - patterns:
    - pattern-either:
      - pattern: (org.springframework.http.HttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.client.ClientHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.ServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.ServletServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.web.multipart.support.RequestPartServletServerHttpRequest
          $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.reactive.ServerHttpRequest $REQ).$METHOD(...)
      - pattern: (org.springframework.http.server.reactive.ServerHttpRequestDecorator
          $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getPath|getQueryParams|getBody|getURI|getHeaders|getCookies)
  - patterns:
    - pattern-either:
      - pattern: (javax.servlet.ServletRequest $REQ).$METHOD(...)
      - pattern: (javax.servlet.http.HttpServletRequest $REQ).$METHOD(...)
      - pattern: (jakarta.servlet.ServletRequest $REQ).$METHOD(...)
      - pattern: (jakarta.servlet.http.HttpServletRequest $REQ).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString|getPathInfo)
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  - from: $VAR
    patterns:
    - patterns:
      - pattern: (SearchRequest $SEARCH).$METHOD($VAR)
      - metavariable-regex:
          metavariable: $METHOD
          regex: (setBase|setFilter)
    to: $SEARCH
  pattern-sinks:
  - patterns:
    - focus-metavariable:
      - $FILTER
      - $BASE
    - pattern-either:
      - pattern: (javax.naming.directory.InitialDirContext $IDC).search($BASE, $FILTER,
          ...)
      - pattern: (javax.naming.directory.DirContext $CTX).search($BASE, $FILTER, ...)
      - pattern: (InitialDirContext $IDC).search($BASE, $FILTER, ...)
      - pattern: (DirContext $CTX).search($BASE, $FILTER, ...)
      - pattern: (LDAPConnection $CONN).search($BASE, $SCOPE, $FILTER, ...)
      - pattern: (LdapConnection $CONN).search($BASE, ...)
      - pattern: (LdapTemplate $TEMP).search($BASE, $FILTER, ...)
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
  - pattern: Filter.createEqualityFilter(...)
  - pattern: Filter.createPresenceFilter(...)
  - pattern: new Rdn(...)
  - pattern: new RDN(...)
  - pattern: (Encoder $ENC).encodeForDN(...)
  - pattern: (Encoder $ENC).encodeForLDAP(...)
  - pattern: LdapNameBuilder.newInstance(...). ... .add(...)
  - pattern: org.apache.directory.ldap.client.api.search.FilterBuilder.equal(...)
