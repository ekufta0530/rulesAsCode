rules:
- id: csharp.dotnet-core.command-injection.process-taint-grpc.process-taint-grpc
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the input, and use safe methods for executing the commands.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::source::remote-procedure-call::gRPC
    - os::sink::os-command-or-thread::.NET
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - .NET
    - csharp
    - dotnet
    - grpc
    - process
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Command Injection
    source: https://semgrep.dev/r/csharp.dotnet-core.command-injection.process-taint-grpc.process-taint-grpc
    shortlink: https://sg.run/ngzZ
    semgrep.dev:
      rule:
        r_id: 70836
        rv_id: 229173
        rule_id: nJULA6
        version_id: A8TkDEy
        url: https://semgrep.dev/playground/r/A8TkDEy/csharp.dotnet-core.command-injection.process-taint-grpc.process-taint-grpc
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  options:
    interfile: true
  pattern-sources:
  - patterns:
    - pattern-inside: |
        using Grpc.Core;
        ...
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern-inside: |
          public $TYPE $NAME($T $REQ, ServerCallContext $CTX) {
            ...
          }
      - pattern-inside: |
          public $TYPE $NAME($T $REQ, $ST $STREAM, ServerCallContext $CTX) {
            ...
          }
  - patterns:
    - pattern-inside: |
        using Grpc.Core;
        ...
    - pattern-either:
      - pattern: (ServerCallContext $CTX).RequestHeaders
      - pattern: (ServerCallContext $CTX). ... .Request.Query
      - pattern: (ServerCallContext $CTX). ... .Request.QueryString
      - pattern: (ServerCallContext $CTX). ... .Request.Headers
      - pattern: (ServerCallContext $CTX). ... .Request.RouteValues
      - pattern: (ServerCallContext $CTX). ... .Request.Body
      - pattern: (ServerCallContext $CTX). ... .Request.BodyReader
      - pattern: (ServerCallContext $CTX). ... .Request.Form
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: (StringBuilder $TO).Append(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendLine(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendFormat(..., $FROM,...)
        - pattern: (StringBuilder $TO).AppendJoin(..., $FROM,...)
        - pattern: (StringBuilder $TO).Replace(..., $FROM,...)
        - pattern: (StringBuilder $TO).Insert(..., $FROM,...)
        - patterns:
          - pattern-either:
            - pattern: $TO.Append(..., $FROM,...)
            - pattern: $TO.AppendLine(..., $FROM,...)
            - pattern: $TO.AppendFormat(..., $FROM,...)
            - pattern: $TO.AppendJoin(..., $FROM,...)
            - pattern: $TO.Replace(..., $FROM,...)
            - pattern: $TO.Insert(..., $FROM,...)
          - pattern-either:
            - pattern-inside: |
                var $TO = new StringBuilder(...);
                ...
            - pattern-inside: |
                $TO = new StringBuilder(...);
                ...
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: System.Diagnostics.Process.Start($CMD, ...)
      - pattern: Diagnostics.Process.Start($CMD, ...)
      - pattern: Process.Start($CMD, ...)
  - patterns:
    - focus-metavariable: $ARGS
    - metavariable-regex:
        metavariable: $CMD
        regex: (.*)(sh|bash|ksh|csh|tcsh|zsh|cmd\.exe|wt\.exe|powershell\.exe)
    - pattern-either:
      - pattern: System.Diagnostics.Process.Start($CMD, $ARGS, ...)
      - pattern: Diagnostics.Process.Start($CMD, $ARGS, ...)
      - pattern: Process.Start($CMD, $ARGS, ...)
  - patterns:
    - focus-metavariable: $CMD
    - pattern: (Process $X).StartInfo.FileName = $CMD;
  - patterns:
    - focus-metavariable: $CMD
    - pattern: (ProcessStartInfo $X).FileName = $CMD;
  - patterns:
    - focus-metavariable: $ARGS
    - pattern: (Process $X).StartInfo.Arguments = $ARGS;
    - metavariable-regex:
        metavariable: $CMD
        regex: (.*)(sh|bash|ksh|csh|tcsh|zsh|cmd\.exe|wt\.exe|powershell\.exe)
    - pattern-inside: |
        $X.StartInfo.FileName = $CMD;
        ...
  - patterns:
    - focus-metavariable: $ARGS
    - pattern: (ProcessStartInfo $X).Arguments = $ARGS;
    - metavariable-regex:
        metavariable: $CMD
        regex: (.*)(sh|bash|ksh|csh|tcsh|zsh|cmd\.exe|wt\.exe|powershell\.exe)
    - pattern-either:
      - pattern-inside: |
          $X.FileName = $CMD;
          ...
      - pattern-inside: |
          $T $X = new ProcessStartInfo($CMD);
          ...
  pattern-sanitizers:
  - patterns:
    - pattern: Convert.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (ToBase64CharArray|ToBase64String|ToBoolean|ToDateTime|ToDecimal|ToDouble|ToInt16|ToInt32|ToInt64|ToSByte|ToSingle|ToUInt16|ToUInt32|ToUInt64)
  - patterns:
    - pattern-either:
      - pattern: $INT.Parse(...)
      - pattern: $INT.TryParse(...)
      - pattern: $INT.TryParseExact(...)
    - metavariable-regex:
        metavariable: $INT
        regex: (Int32|Int128|Int16|Int64|IntPtr|Boolean|Decimal|Double|Guid|DateTime|Single|SByte|UInt128|UInt16|UInt32|UInt64|UIntPtr)
  - patterns:
    - pattern-either:
      - pattern: (int $NUM)
      - pattern: (long $NUM)
      - pattern: (float $NUM)
      - pattern: (double $NUM)
      - pattern: (bool $NUM)
      - pattern: (Guid $NUM)
      - pattern: var $X = (int) ...;
      - pattern: var $X = (long) ...;
      - pattern: var $X = (float) ...;
      - pattern: var $X = (double) ...;
      - pattern: var $X = (bool) ...;
      - pattern: var $X = (Guid) ...;
