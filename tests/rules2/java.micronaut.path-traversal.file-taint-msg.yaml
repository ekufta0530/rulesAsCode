rules:
- id: java.micronaut.path-traversal.file-taint-msg.file-taint-msg
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)`
    to only retrieve the file name from the path.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - file::sink::file-access::commons-io
    - file::sink::file-access::java.io
    - file::sink::file-access::java.xml
    - pubsub::source::message::Micronaut
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - Kafka
    - Micronaut
    - RabbitMQ
    - java
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Path Traversal
    source: https://semgrep.dev/r/java.micronaut.path-traversal.file-taint-msg.file-taint-msg
    shortlink: https://sg.run/L1LbG
    semgrep.dev:
      rule:
        r_id: 115583
        rv_id: 734996
        rule_id: 8GUQNRp
        version_id: jQTQ489
        url: https://semgrep.dev/playground/r/jQTQ489/java.micronaut.path-traversal.file-taint-msg.file-taint-msg
        origin: pro_rules
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - focus-metavariable: $INPUT
    - pattern: |
        @io.micronaut.configuration.kafka.annotation.Topic(...)
        $TYPE $NAME(..., $I $INPUT, ...) {...}
    - pattern-inside: |
        @io.micronaut.configuration.kafka.annotation.KafkaListener(...)
        class $CL {...}
  - patterns:
    - focus-metavariable: $INPUT
    - pattern: |
        @io.micronaut.rabbitmq.annotation.Queue(...)
        $TYPE $NAME(..., $I $INPUT, ...) {...}
    - pattern-inside: |
        @io.micronaut.rabbitmq.annotation.RabbitListener(...)
        class $CL {...}
  pattern-propagators:
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $INPUT
    patterns:
    - pattern: (StringBuilder $BUILDER).append($INPUT);
    to: $BUILDER
  - from: $F
    patterns:
    - pattern: $X = (java.io.File $F).$ANY(...)
    to: $X
  pattern-sinks:
  - patterns:
    - focus-metavariable: $FILE
    - pattern-either:
      - pattern: new java.io.File(..., $FILE, ...)
      - pattern: new java.io.FileReader($FILE, ...)
      - pattern: new java.io.FileInputStream($FILE, ...)
      - pattern: new java.io.FileOutputStream($FILE, ...)
      - pattern: new javax.xml.transform.stream.StreamSource($FILE, ...)
      - patterns:
        - pattern-either:
          - pattern: (Class $CLASS).getResourceAsStream($FILE, ...)
          - pattern: (Class $CLASS).getResources($FILE, ...)
          - pattern: (Class $CLASS).getResource($FILE, ...)
          - pattern: (ClassLoader $CLASS).getResourceAsStream($FILE, ...)
          - pattern: (ClassLoader $CLASS).getResources($FILE, ...)
          - pattern: (ClassLoader $CLASS).getResource($FILE, ...)
      - patterns:
        - pattern-either:
          - pattern: $CLASS.getResourceAsStream($FILE, ...)
          - pattern: $CLASS.getResources($FILE, ...)
          - pattern: $CLASS.getResource($FILE, ...)
        - metavariable-regex:
            metavariable: $CLASS
            regex: .*(?i)class.*
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  - pattern: |
      if (<... $FN.startsWith(...) ...>)
      {
        ...
      }
      ...
  - pattern: |
      if (<... $FN.contains(...) ...>)
      {
        ...
      }
      ...
