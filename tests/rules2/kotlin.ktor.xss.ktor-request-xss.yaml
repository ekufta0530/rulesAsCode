rules:
- id: kotlin.ktor.xss.ktor-request-xss.ktor-request-xss
  message: Untrusted input could be used to tamper with a web page rendering, which
    can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur
    when untrusted input executes malicious JavaScript code, leading to issues such
    as account compromise and sensitive information leakage. To prevent this vulnerability,
    validate the user input, perform contextual output encoding or sanitize the input.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - web::sink::direct-response::Ktor
    - web::source::cookie::Ktor
    - web::source::header::Ktor
    - web::source::http-params::Ktor
    - web::source::url-path-params::Ktor
    owasp:
    - A03:2021 - Injection
    - A07:2017 - Cross-Site Scripting (XSS)
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - kotlin
    - ktor
    license: Copyright 2023 Semgrep, Inc.
    vulnerability_class:
    - Cross-Site-Scripting (XSS)
    source: https://semgrep.dev/r/kotlin.ktor.xss.ktor-request-xss.ktor-request-xss
    shortlink: https://sg.run/A6k0
    semgrep.dev:
      rule:
        r_id: 59550
        rv_id: 731942
        rule_id: pKUZ7A
        version_id: 0bTrY7y
        url: https://semgrep.dev/playground/r/0bTrY7y/kotlin.ktor.xss.ktor-request-xss.ktor-request-xss
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: no_processing_needed
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - pattern-either:
            - pattern: application.call.parameters
            - patterns:
              - pattern: application.call.receive(...)
              - pattern-not-inside: |
                  val $X: Int = application.call.receive(...)
              - pattern-not-inside: |
                  val $X: Int = application.call.receive(...)
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: application.call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: application.call.request.cookies.rawCookies
            - pattern: application.call.request.local.uri
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - pattern-either:
            - pattern: call.parameters
            - patterns:
              - pattern: call.receive(...)
              - pattern-not-inside: |
                  val $X: Int = call.receive(...)
              - pattern-not-inside: |
                  val $X: Int = call.receive(...)
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: call.request.cookies.rawCookies
            - pattern: call.request.local.uri
  - label: returns_url_encoded
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: application.call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
  - label: urldecode
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.net
                ...
          - patterns:
            - pattern: net.URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.net.*
                ...
            - pattern-inside: |
                import java.net.URLDecoder
                ...
          - patterns:
            - pattern: URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
    requires: returns_url_encoded
  pattern-sinks:
  - label: sink
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.$RESPFUNC($INPUT, ContentType.Text.Html,
                    ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respond(Text|Bytes))$
              - patterns:
                - pattern: application.call.$RESPFUNC(..., message = $INPUT, contentType
                    = ContentType.Text.Html, ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondText)$
              - patterns:
                - pattern: application.call.$RESPFUNC(..., bytes = $INPUT, contentType
                    = ContentType.Text.Html, ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondBytes)$
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.$RESPFUNC($INPUT, ContentType.Text.Html, ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respond(Text|Bytes))$
              - patterns:
                - pattern: call.$RESPFUNC(..., message = $INPUT, contentType = ContentType.Text.Html,
                    ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondText)$
              - patterns:
                - pattern: call.$RESPFUNC(..., bytes = $INPUT, contentType = ContentType.Text.Html,
                    ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondBytes)$
            - focus-metavariable: $INPUT
    requires: urldecode or no_processing_needed
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
